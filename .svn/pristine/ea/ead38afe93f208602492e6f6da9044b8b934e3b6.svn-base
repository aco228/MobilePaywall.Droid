using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Senti.Localization;

namespace MobilePaywall.Localization
{
  public class PendingLocalizationGroup : ILocalizationGroup 
  {
    public static readonly PendingLocalizationGroup Empty = new PendingLocalizationGroup();

    private MobilePaywallLocalization _localization = null;

    protected bool IsEmpty { get { return this._localization == null; } }
    protected MobilePaywallLocalization Localization { get { return this._localization; } }

    private string _header = null;
		private string _title = null;
		private string _notification = null;
		private string _pleaseWait = null;
		

    public string Header { get { return this._header ?? ((this.Localization.HasFallback && this.Localization.Fallback.Pending != null) ? this.Localization.Fallback.Pending.Header : string.Empty); } }
		public string Title { get { return this._title ?? ((this.Localization.HasFallback && this.Localization.Fallback.Pending != null) ? this.Localization.Fallback.Pending.Title : string.Empty); } }
		public string Notification { get { return this._notification ?? ((this.Localization.HasFallback && this.Localization.Fallback.Pending != null) ? this.Localization.Fallback.Pending.Notification : string.Empty); } }
		public string PleaseWait { get { return this._pleaseWait ?? ((this.Localization.HasFallback && this.Localization.Fallback.Pending != null) ? this.Localization.Fallback.Pending.PleaseWait : string.Empty); } }
		

    private PendingLocalizationGroup()
    {
      this._header = string.Empty;
				this._title = string.Empty;
				this._notification = string.Empty;
				this._pleaseWait = string.Empty;
				
    }

    public PendingLocalizationGroup(MobilePaywallLocalization localization)
    {
      this._localization = localization;
    }

    public string GetValue(string key)
    {
      switch (key)
      {
        case "Header":
					return this.Header;
				case "Title":
					return this.Title;
				case "Notification":
					return this.Notification;
				case "PleaseWait":
					return this.PleaseWait;
				
        default:
          return null;
      }
    }

    public bool AssignValue(string key, string value)
    {
      switch (key)
      {
        case "Header":
					this._header = value;
					return true;
				case "Title":
					this._title = value;
					return true;
				case "Notification":
					this._notification = value;
					return true;
				case "PleaseWait":
					this._pleaseWait = value;
					return true;
				
        default:
          return false;
      }
    }
  }
}
