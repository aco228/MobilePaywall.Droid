using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class OLCacheTable : TableBase<OLCache>
  {
    public static string GetColumnNames()
    {
      return TableBase<OLCache>.GetColumnNames(string.Empty, OLCacheTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<OLCache>.GetColumnNames(tablePrefix, OLCacheTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription OLCacheID = new ColumnDescription("OLCacheID", 0, typeof(int));
			public static readonly ColumnDescription UserSessionID = new ColumnDescription("UserSessionID", 1, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 2, typeof(int));
			public static readonly ColumnDescription Pxid = new ColumnDescription("Pxid", 3, typeof(string));
			public static readonly ColumnDescription IPAddress = new ColumnDescription("IPAddress", 4, typeof(string));
			public static readonly ColumnDescription ServiceName = new ColumnDescription("ServiceName", 5, typeof(string));
			public static readonly ColumnDescription ServiceCountry = new ColumnDescription("ServiceCountry", 6, typeof(string));
			public static readonly ColumnDescription CountryName = new ColumnDescription("CountryName", 7, typeof(string));
			public static readonly ColumnDescription CountryCode = new ColumnDescription("CountryCode", 8, typeof(string));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 9, typeof(int));
			public static readonly ColumnDescription MobileOperatorName = new ColumnDescription("MobileOperatorName", 10, typeof(string));
			public static readonly ColumnDescription IdentificationSessionGuid = new ColumnDescription("IdentificationSessionGuid", 11, typeof(Guid));
			public static readonly ColumnDescription Msisdn = new ColumnDescription("Msisdn", 12, typeof(string));
			public static readonly ColumnDescription PaymentRequestID = new ColumnDescription("PaymentRequestID", 13, typeof(int));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 14, typeof(int));
			public static readonly ColumnDescription PaymentCreated = new ColumnDescription("PaymentCreated", 15, typeof(DateTime));
			public static readonly ColumnDescription PaymentContentAccessPolicyID = new ColumnDescription("PaymentContentAccessPolicyID", 16, typeof(int));
			public static readonly ColumnDescription TransactionID = new ColumnDescription("TransactionID", 17, typeof(int));
			public static readonly ColumnDescription TransactionCreated = new ColumnDescription("TransactionCreated", 18, typeof(DateTime));
			public static readonly ColumnDescription IsSubseguent = new ColumnDescription("IsSubseguent", 19, typeof(bool));
			public static readonly ColumnDescription SessionCreated = new ColumnDescription("SessionCreated", 20, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 21, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 22, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				OLCacheID,
				UserSessionID,
				ServiceID,
				Pxid,
				IPAddress,
				ServiceName,
				ServiceCountry,
				CountryName,
				CountryCode,
				MobileOperatorID,
				MobileOperatorName,
				IdentificationSessionGuid,
				Msisdn,
				PaymentRequestID,
				PaymentID,
				PaymentCreated,
				PaymentContentAccessPolicyID,
				TransactionID,
				TransactionCreated,
				IsSubseguent,
				SessionCreated,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public OLCacheTable(SqlQuery query) : base(query) { }
    public OLCacheTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int OLCacheID { get { return this.Reader.GetInt32(this.GetIndex(Columns.OLCacheID)); } }
		public int UserSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserSessionID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		
		public string Pxid 
		{
			get
			{
				int index = this.GetIndex(Columns.Pxid);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string IPAddress 
		{
			get
			{
				int index = this.GetIndex(Columns.IPAddress);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string ServiceName 
		{
			get
			{
				int index = this.GetIndex(Columns.ServiceName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string ServiceCountry 
		{
			get
			{
				int index = this.GetIndex(Columns.ServiceCountry);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string CountryName 
		{
			get
			{
				int index = this.GetIndex(Columns.CountryName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string CountryCode 
		{
			get
			{
				int index = this.GetIndex(Columns.CountryCode);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public int? MobileOperatorID 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public string MobileOperatorName 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public Guid? IdentificationSessionGuid 
		{
			get
			{
				int index = this.GetIndex(Columns.IdentificationSessionGuid);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetGuid(index);
			}
		}

		
		public string Msisdn 
		{
			get
			{
				int index = this.GetIndex(Columns.Msisdn);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public int? PaymentRequestID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentRequestID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? PaymentID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public DateTime? PaymentCreated 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentCreated);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		
		public int? PaymentContentAccessPolicyID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentContentAccessPolicyID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? TransactionID 
		{
			get
			{
				int index = this.GetIndex(Columns.TransactionID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public DateTime? TransactionCreated 
		{
			get
			{
				int index = this.GetIndex(Columns.TransactionCreated);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		
		public bool? IsSubseguent 
		{
			get
			{
				int index = this.GetIndex(Columns.IsSubseguent);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		
		public DateTime? SessionCreated 
		{
			get
			{
				int index = this.GetIndex(Columns.SessionCreated);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public OLCache CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new OLCache(this.OLCacheID,this.UserSessionID,this.ServiceID,this.Pxid,this.IPAddress,this.ServiceName,this.ServiceCountry,this.CountryName,this.CountryCode,this.MobileOperatorID,this.MobileOperatorName,this.IdentificationSessionGuid,this.Msisdn,this.PaymentRequestID,this.PaymentID,this.PaymentCreated,this.PaymentContentAccessPolicyID,this.TransactionID,this.TransactionCreated,this.IsSubseguent,this.SessionCreated,this.Updated,this.Created); 
		}
		

  }
}

