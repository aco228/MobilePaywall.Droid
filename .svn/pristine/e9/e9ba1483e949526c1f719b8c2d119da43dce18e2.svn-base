using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IServiceOfferManager : IDataManager<ServiceOffer> 
  {
	

  }

  public partial class ServiceOffer : MobilePaywallObject<IServiceOfferManager> 
  {
		private string _name = String.Empty;
		private string _description = String.Empty;
		private Service _service;
		private BusinessModelEntry _businessModelEntry;
		private PaymentConfiguration _paymentConfiguration;
		private ContentAccessPolicy _contentAccessPolicy;
		private bool _isDefault = false;
		private bool _isActive = false;
		private DateTime? _validFrom = DateTime.MinValue;
		private DateTime? _validTo = DateTime.MinValue;
		

		public string Name{ get {return this._name; } set { this._name = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public BusinessModelEntry BusinessModelEntry 
		{
			get
			{
				if (this._businessModelEntry != null &&
						this._businessModelEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this.ConnectionContext, this._businessModelEntry.ID) as BusinessModelEntry;
					else
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this._businessModelEntry.ID) as BusinessModelEntry;
				return this._businessModelEntry;
			}
			set { _businessModelEntry = value; }
		}

		public PaymentConfiguration PaymentConfiguration 
		{
			get
			{
				if (this._paymentConfiguration != null &&
						this._paymentConfiguration.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentConfiguration = PaymentConfiguration.CreateManager().LazyLoad(this.ConnectionContext, this._paymentConfiguration.ID) as PaymentConfiguration;
					else
						this._paymentConfiguration = PaymentConfiguration.CreateManager().LazyLoad(this._paymentConfiguration.ID) as PaymentConfiguration;
				return this._paymentConfiguration;
			}
			set { _paymentConfiguration = value; }
		}

		public ContentAccessPolicy ContentAccessPolicy 
		{
			get
			{
				if (this._contentAccessPolicy != null &&
						this._contentAccessPolicy.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentAccessPolicy = ContentAccessPolicy.CreateManager().LazyLoad(this.ConnectionContext, this._contentAccessPolicy.ID) as ContentAccessPolicy;
					else
						this._contentAccessPolicy = ContentAccessPolicy.CreateManager().LazyLoad(this._contentAccessPolicy.ID) as ContentAccessPolicy;
				return this._contentAccessPolicy;
			}
			set { _contentAccessPolicy = value; }
		}

		public bool IsDefault {get {return this._isDefault; } set { this._isDefault = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		public DateTime? ValidFrom { get { return this._validFrom; } set { this._validFrom = value;} }
		public DateTime? ValidTo { get { return this._validTo; } set { this._validTo = value;} }
		

    public override bool IsInsertable { get { return true;} }
    
    public override bool IsUpdatable { get { return true;} }

    public ServiceOffer()
    { 
    }

    public ServiceOffer(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ServiceOffer(int id,  string name, string description, Service service, BusinessModelEntry businessModelEntry, PaymentConfiguration paymentConfiguration, ContentAccessPolicy contentAccessPolicy, bool isDefault, bool isActive, DateTime? validFrom, DateTime? validTo, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._name = name;
			this._description = description;
			this._service = service;
			this._businessModelEntry = businessModelEntry;
			this._paymentConfiguration = paymentConfiguration;
			this._contentAccessPolicy = contentAccessPolicy;
			this._isDefault = isDefault;
			this._isActive = isActive;
			this._validFrom = validFrom;
			this._validTo = validTo;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ServiceOffer(-1, this.Name,this.Description, this.Service, this.BusinessModelEntry, this.PaymentConfiguration, this.ContentAccessPolicy,this.IsDefault,this.IsActive,this.ValidFrom,this.ValidTo, DateTime.Now, DateTime.Now);
    }
  }
}

