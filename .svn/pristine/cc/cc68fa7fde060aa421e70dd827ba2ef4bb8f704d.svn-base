using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class QualityAssuranceReportTable : TableBase<QualityAssuranceReport>
  {
    public static string GetColumnNames()
    {
      return TableBase<QualityAssuranceReport>.GetColumnNames(string.Empty, QualityAssuranceReportTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<QualityAssuranceReport>.GetColumnNames(tablePrefix, QualityAssuranceReportTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription QualityAssuranceReportID = new ColumnDescription("QualityAssuranceReportID", 0, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 1, typeof(int));
			public static readonly ColumnDescription PaymentProviderID = new ColumnDescription("PaymentProviderID", 2, typeof(int));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 3, typeof(int));
			public static readonly ColumnDescription CreatorID = new ColumnDescription("CreatorID", 4, typeof(int));
			public static readonly ColumnDescription Remark = new ColumnDescription("Remark", 5, typeof(string));
			public static readonly ColumnDescription ReportUrl = new ColumnDescription("ReportUrl", 6, typeof(string));
			public static readonly ColumnDescription Tested = new ColumnDescription("Tested", 7, typeof(DateTime));
			public static readonly ColumnDescription HasError = new ColumnDescription("HasError", 8, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 9, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 10, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				QualityAssuranceReportID,
				ServiceID,
				PaymentProviderID,
				MobileOperatorID,
				CreatorID,
				Remark,
				ReportUrl,
				Tested,
				HasError,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public QualityAssuranceReportTable(SqlQuery query) : base(query) { }
    public QualityAssuranceReportTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int QualityAssuranceReportID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QualityAssuranceReportID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		public int PaymentProviderID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentProviderID)); } }
		public int MobileOperatorID { get { return this.Reader.GetInt32(this.GetIndex(Columns.MobileOperatorID)); } }
		public int CreatorID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CreatorID)); } }
		
		public string Remark 
		{
			get
			{
				int index = this.GetIndex(Columns.Remark);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string ReportUrl 
		{
			get
			{
				int index = this.GetIndex(Columns.ReportUrl);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Tested { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Tested)); } }
		public bool HasError { get { return this.Reader.GetBoolean(this.GetIndex(Columns.HasError)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public QualityAssuranceReport CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(PaymentProvider paymentProvider)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(MobileOperator mobileOperator, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(PaymentProvider paymentProvider, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(PaymentProvider paymentProvider, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, PaymentProvider paymentProvider)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(PaymentProvider paymentProvider, MobileOperator mobileOperator, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, MobileOperator mobileOperator, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, PaymentProvider paymentProvider, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, PaymentProvider paymentProvider, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		public QualityAssuranceReport CreateInstance(Service service, PaymentProvider paymentProvider, MobileOperator mobileOperator, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReport(this.QualityAssuranceReportID,service ?? new Service(this.ServiceID), paymentProvider ?? new PaymentProvider(this.PaymentProviderID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), creator ?? new Client(this.CreatorID), this.Remark,this.ReportUrl,this.Tested,this.HasError,this.Updated,this.Created); 
		}
		

  }
}

