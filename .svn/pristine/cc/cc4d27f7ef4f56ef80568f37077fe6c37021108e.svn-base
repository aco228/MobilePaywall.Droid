using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IShortcodeKeywordServiceOfferMapManager : IDataManager<ShortcodeKeywordServiceOfferMap> 
  {
	

  }

  public partial class ShortcodeKeywordServiceOfferMap : MobilePaywallObject<IShortcodeKeywordServiceOfferMapManager> 
  {
		private Shortcode _shortcode;
		private Keyword _keyword;
		private ServiceOffer _serviceOffer;
		

		public Shortcode Shortcode 
		{
			get
			{
				if (this._shortcode != null &&
						this._shortcode.IsEmpty)
					if (this.ConnectionContext != null)
						this._shortcode = Shortcode.CreateManager().LazyLoad(this.ConnectionContext, this._shortcode.ID) as Shortcode;
					else
						this._shortcode = Shortcode.CreateManager().LazyLoad(this._shortcode.ID) as Shortcode;
				return this._shortcode;
			}
			set { _shortcode = value; }
		}

		public Keyword Keyword 
		{
			get
			{
				if (this._keyword != null &&
						this._keyword.IsEmpty)
					if (this.ConnectionContext != null)
						this._keyword = Keyword.CreateManager().LazyLoad(this.ConnectionContext, this._keyword.ID) as Keyword;
					else
						this._keyword = Keyword.CreateManager().LazyLoad(this._keyword.ID) as Keyword;
				return this._keyword;
			}
			set { _keyword = value; }
		}

		public ServiceOffer ServiceOffer 
		{
			get
			{
				if (this._serviceOffer != null &&
						this._serviceOffer.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this.ConnectionContext, this._serviceOffer.ID) as ServiceOffer;
					else
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this._serviceOffer.ID) as ServiceOffer;
				return this._serviceOffer;
			}
			set { _serviceOffer = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ShortcodeKeywordServiceOfferMap()
    { 
    }

    public ShortcodeKeywordServiceOfferMap(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ShortcodeKeywordServiceOfferMap(int id,  Shortcode shortcode, Keyword keyword, ServiceOffer serviceOffer, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._shortcode = shortcode;
			this._keyword = keyword;
			this._serviceOffer = serviceOffer;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ShortcodeKeywordServiceOfferMap(-1,  this.Shortcode, this.Keyword, this.ServiceOffer, DateTime.Now, DateTime.Now);
    }
  }
}

