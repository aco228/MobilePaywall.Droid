using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IEditHistoryManager : IDataManager<EditHistory> 
  {
	

  }

  public partial class EditHistory : MobilePaywallObject<IEditHistoryManager> 
  {
		private Client _client;
		private Application _application;
		private Service _service;
		private string _tableName = String.Empty;
		private string _columnName = String.Empty;
		private int _entryID = -1;
		private EditHistoryAction _editHistoryAction;
		private string _oldValue = String.Empty;
		private string _newValue = String.Empty;
		

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public Application Application 
		{
			get
			{
				if (this._application != null &&
						this._application.IsEmpty)
					if (this.ConnectionContext != null)
						this._application = Application.CreateManager().LazyLoad(this.ConnectionContext, this._application.ID) as Application;
					else
						this._application = Application.CreateManager().LazyLoad(this._application.ID) as Application;
				return this._application;
			}
			set { _application = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public string TableName{ get {return this._tableName; } set { this._tableName = value;} }
		public string ColumnName{ get {return this._columnName; } set { this._columnName = value;} }
		public int EntryID{ get {return this._entryID; } set { this._entryID = value;} }
		public EditHistoryAction EditHistoryAction  { get { return this._editHistoryAction; } set { this._editHistoryAction = value; } }
		public string OldValue{ get {return this._oldValue; } set { this._oldValue = value;} }
		public string NewValue{ get {return this._newValue; } set { this._newValue = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public EditHistory()
    { 
    }

    public EditHistory(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public EditHistory(int id,  Client client, Application application, Service service, string tableName, string columnName, int entryID, EditHistoryAction editHistoryAction, string oldValue, string newValue, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._client = client;
			this._application = application;
			this._service = service;
			this._tableName = tableName;
			this._columnName = columnName;
			this._entryID = entryID;
			this._editHistoryAction = editHistoryAction;
			this._oldValue = oldValue;
			this._newValue = newValue;
			
    }

    public override object Clone(bool deepClone)
    {
      return new EditHistory(-1,  this.Client, this.Application, this.Service,this.TableName,this.ColumnName,this.EntryID, this.EditHistoryAction,this.OldValue,this.NewValue, DateTime.Now, DateTime.Now);
    }
  }
}

