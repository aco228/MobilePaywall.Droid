using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class MsisdnBlacklistManager : IMsisdnBlacklistManager
  {
    
    public List<MsisdnBlacklist> Load()
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection );
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection )
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection );
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection );
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection )
    {
      SqlQueryParameters parameters = new SqlQueryParameters();return this.LoadMany(connection, parameters);
    }



    public List<MsisdnBlacklist> Load(Instance instance)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, instance);
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection, Instance instance)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, instance);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, instance);
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection, Instance instance)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[mb].InstanceID=@InstanceID";
      parameters.Arguments.Add("InstanceID", instance.ID);
      return this.LoadMany(connection, parameters);
    }



    public List<MsisdnBlacklist> Load(Service service)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service);
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection, Service service)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service);
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection, Service service)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[mb].ServiceID=@ServiceID";
      parameters.Arguments.Add("ServiceID", service.ID);
      return this.LoadMany(connection, parameters);
    }



    public List<MsisdnBlacklist> Load(string msisdn)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, msisdn);
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection, string msisdn)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, msisdn);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, msisdn);
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection, string msisdn)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[mb].Msisdn=@Msisdn";
      parameters.Arguments.Add("Msisdn", msisdn);
      return this.LoadMany(connection, parameters);
    }


    public MsisdnBlacklist Load(Service service, string msisdn)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service, msisdn);
    }

    public MsisdnBlacklist Load(IConnectionInfo connection, Service service, string msisdn)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service, msisdn);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service, msisdn);
    }

    public MsisdnBlacklist Load(ISqlConnectionInfo connection, Service service, string msisdn)
    {      
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where =  "([mb].InstanceID = @InstanceID OR [mb].InstanceID IS NULL) AND " +
                          "([mb].MerchantID = @MerchantID OR [mb].MerchantID IS NULL) AND " +
                          "([mb].ServiceID = @ServiceID OR [mb].ServiceID IS NULL) AND " +
                          "[mb].Msisdn = @Msisdn AND [mb].IsActive = 1";
      parameters.Arguments.Add("InstanceID", service.Merchant.Instance.ID);
      parameters.Arguments.Add("MerchantID", service.Merchant.ID);
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("Msisdn", msisdn);
      return this.Load(connection, parameters);
    }

    public List<MsisdnBlacklist> Load(Service service, bool isActive)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service, isActive);
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection, Service service, bool isActive)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service, isActive);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service, isActive);
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection, Service service, bool isActive)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[mb].ServiceID = @ServiceID AND [mb].IsActive = @IsActive";
      parameters.Arguments.Add("ServiceID", service.ID);

      int boolIsActive = 0; if (isActive) boolIsActive = 1;
      parameters.Arguments.Add("IsActive", boolIsActive);

      return this.LoadMany(connection, parameters);
    }

    

    public List<MsisdnBlacklist> Load(Instance instance, Merchant merchant, Service service, string msisdn)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, instance, merchant, service, msisdn);
    }

    public List<MsisdnBlacklist> Load(IConnectionInfo connection, Instance instance, Merchant merchant, Service service, string msisdn)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, instance, merchant, service, msisdn);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, instance, merchant, service, msisdn);
    }

    public List<MsisdnBlacklist> Load(ISqlConnectionInfo connection, Instance instance, Merchant merchant, Service service, string msisdn)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();

      parameters.Where = "[mb].Msisdn = @Msisdn AND [mb].IsActive = 1";
      parameters.Arguments.Add("Msisdn", msisdn);

      if (instance != null)
        parameters.Where += string.Format(" AND [mb].InstanceID = {0} ", instance.ID);

      if (merchant != null)
        parameters.Where += string.Format(" AND [mb].MerchantID = {0} ", merchant.ID);

      if (service != null)
        parameters.Where += string.Format(" AND [mb].ServiceID = {0} ", service.ID);

      return this.LoadMany(connection, parameters);
    }

  }
}

