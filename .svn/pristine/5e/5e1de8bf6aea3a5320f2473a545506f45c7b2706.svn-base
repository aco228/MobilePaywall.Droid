using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPremiumMessageManager : IDataManager<PremiumMessage> 
  {
	

  }

  public partial class PremiumMessage : MobilePaywallObject<IPremiumMessageManager> 
  {
		private Guid _guid;
		private PremiumMessageDirection _premiumMessageDirection;
		private PremiumMessageStatus _premiumMessageStatus;
		private UserSession _userSession;
		private ShortcodeKeywordServiceOfferMap _shortcodeKeywordServiceOfferMap;
		private string _text = String.Empty;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public PremiumMessageDirection PremiumMessageDirection  { get { return this._premiumMessageDirection; } set { this._premiumMessageDirection = value; } }
		public PremiumMessageStatus PremiumMessageStatus  { get { return this._premiumMessageStatus; } set { this._premiumMessageStatus = value; } }
		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public ShortcodeKeywordServiceOfferMap ShortcodeKeywordServiceOfferMap 
		{
			get
			{
				if (this._shortcodeKeywordServiceOfferMap != null &&
						this._shortcodeKeywordServiceOfferMap.IsEmpty)
					if (this.ConnectionContext != null)
						this._shortcodeKeywordServiceOfferMap = ShortcodeKeywordServiceOfferMap.CreateManager().LazyLoad(this.ConnectionContext, this._shortcodeKeywordServiceOfferMap.ID) as ShortcodeKeywordServiceOfferMap;
					else
						this._shortcodeKeywordServiceOfferMap = ShortcodeKeywordServiceOfferMap.CreateManager().LazyLoad(this._shortcodeKeywordServiceOfferMap.ID) as ShortcodeKeywordServiceOfferMap;
				return this._shortcodeKeywordServiceOfferMap;
			}
			set { _shortcodeKeywordServiceOfferMap = value; }
		}

		public string Text{ get {return this._text; } set { this._text = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public PremiumMessage()
    { 
    }

    public PremiumMessage(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public PremiumMessage(int id,  Guid guid, PremiumMessageDirection premiumMessageDirection, PremiumMessageStatus premiumMessageStatus, UserSession userSession, ShortcodeKeywordServiceOfferMap shortcodeKeywordServiceOfferMap, string text, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._premiumMessageDirection = premiumMessageDirection;
			this._premiumMessageStatus = premiumMessageStatus;
			this._userSession = userSession;
			this._shortcodeKeywordServiceOfferMap = shortcodeKeywordServiceOfferMap;
			this._text = text;
			
    }

    public override object Clone(bool deepClone)
    {
      return new PremiumMessage(-1, this.Guid, this.PremiumMessageDirection, this.PremiumMessageStatus, this.UserSession, this.ShortcodeKeywordServiceOfferMap,this.Text, DateTime.Now, DateTime.Now);
    }
  }
}

