using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IUserContentAccessHistoryManager : IDataManager<UserContentAccessHistory> 
  {
	

  }

  public partial class UserContentAccessHistory : MobilePaywallObject<IUserContentAccessHistoryManager> 
  {
		private PaymentContentAccessPolicyMap _paymentContentAccessPolicyMap;
		private Content _content;
		private UserSession _userSession;
		

		public PaymentContentAccessPolicyMap PaymentContentAccessPolicyMap 
		{
			get
			{
				if (this._paymentContentAccessPolicyMap != null &&
						this._paymentContentAccessPolicyMap.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentContentAccessPolicyMap = PaymentContentAccessPolicyMap.CreateManager().LazyLoad(this.ConnectionContext, this._paymentContentAccessPolicyMap.ID) as PaymentContentAccessPolicyMap;
					else
						this._paymentContentAccessPolicyMap = PaymentContentAccessPolicyMap.CreateManager().LazyLoad(this._paymentContentAccessPolicyMap.ID) as PaymentContentAccessPolicyMap;
				return this._paymentContentAccessPolicyMap;
			}
			set { _paymentContentAccessPolicyMap = value; }
		}

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public UserContentAccessHistory()
    { 
    }

    public UserContentAccessHistory(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public UserContentAccessHistory(int id,  PaymentContentAccessPolicyMap paymentContentAccessPolicyMap, Content content, UserSession userSession, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._paymentContentAccessPolicyMap = paymentContentAccessPolicyMap;
			this._content = content;
			this._userSession = userSession;
			
    }

    public override object Clone(bool deepClone)
    {
      return new UserContentAccessHistory(-1,  this.PaymentContentAccessPolicyMap, this.Content, this.UserSession, DateTime.Now, DateTime.Now);
    }
  }
}

