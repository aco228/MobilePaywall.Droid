using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class AndroidContentDataManager : IAndroidContentDataManager
  {
    public AndroidContentData Load(AndroidContent AndroidContent)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, AndroidContent);
    }

    public AndroidContentData Load(IConnectionInfo connection, AndroidContent AndroidContent)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, AndroidContent);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, AndroidContent);
    }

    public AndroidContentData Load(ISqlConnectionInfo connection, AndroidContent AndroidContent)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentID = @AndroidContent";
      parameters.Arguments.Add("AndroidContent", AndroidContent.ID);
      return this.Load(connection, parameters);
    }

    public AndroidContentData Load(AndroidContent AndroidContent, string mimeType)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, AndroidContent, mimeType);
    }

    public AndroidContentData Load(IConnectionInfo connection, AndroidContent AndroidContent, string mimeType)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, AndroidContent, mimeType);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, AndroidContent, mimeType);
    }

    public AndroidContentData Load(ISqlConnectionInfo connection, AndroidContent AndroidContent, string mimeType)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentID = @AndroidContent AND [acd_vcpe_vc].MimeType = @MimeType";
      parameters.Arguments.Add("AndroidContent", AndroidContent.ID);
      parameters.Arguments.Add("MimeType", mimeType);
      return this.Load(connection, parameters);
    }

    public AndroidContentData Load(AndroidContent AndroidContent, VideoCodec videoCodec)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, AndroidContent, videoCodec);
    }

    public AndroidContentData Load(IConnectionInfo connection, AndroidContent AndroidContent, VideoCodec videoCodec)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, AndroidContent, videoCodec);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, AndroidContent, videoCodec);
    }

    public AndroidContentData Load(ISqlConnectionInfo connection, AndroidContent AndroidContent, VideoCodec videoCodec)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentID = @AndroidContent AND [ac1].VideoCodecID = @VideoCodecID";
      parameters.Arguments.Add("AndroidContent", AndroidContent.ID);
      parameters.Arguments.Add("VideoCodecID", videoCodec.ID);
      return this.Load(connection, parameters);
    }

    // TODO: Change this again. Probably its better to split up AndroidContentData table and store all meta information outside of it. 
    //       Only binary data should be stored in there (and reference to AndroidContent)


    public AndroidContentData LoadWithoutData(int AndroidContentDataID)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.LoadWithoutData(connection, AndroidContentDataID);
    }

    public AndroidContentData LoadWithoutData(IConnectionInfo connection, int AndroidContentDataID)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.LoadWithoutData(sqlConnection, AndroidContentDataID);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.LoadWithoutData(sqlConnection, AndroidContentDataID);
    }

    public AndroidContentData LoadWithoutData(ISqlConnectionInfo connection, int AndroidContentDataID)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentDataID = @AndroidContent";
      parameters.Arguments.Add("AndroidContent", AndroidContentDataID);
      parameters.SetExcludedColumns(new List<ColumnDescription>(new ColumnDescription[] { AndroidContentDataTable.Columns.Data }));
      return this.Load(connection, parameters);
    }

    public List<AndroidContentData> LoadWithoutData(AndroidContent AndroidContent)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.LoadWithoutData(connection, AndroidContent);
    }

    public List<AndroidContentData> LoadWithoutData(IConnectionInfo connection, AndroidContent AndroidContent)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.LoadWithoutData(sqlConnection, AndroidContent);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.LoadWithoutData(sqlConnection, AndroidContent);
    }

    public List<AndroidContentData> LoadWithoutData(ISqlConnectionInfo connection, AndroidContent AndroidContent)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentID = @AndroidContent";
      parameters.Arguments.Add("AndroidContent", AndroidContent.ID);
      parameters.SetExcludedColumns(new List<ColumnDescription>(new ColumnDescription[] { AndroidContentDataTable.Columns.Data }));
      return this.LoadMany(connection, parameters);
    }


    public List<AndroidContentData> Load(AndroidContent AndroidContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, AndroidContent, conversionProfile, isOriginal);
    }

    public List<AndroidContentData> Load(IConnectionInfo connection, AndroidContent AndroidContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, AndroidContent, conversionProfile, isOriginal);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, AndroidContent, conversionProfile, isOriginal);
    }

    public List<AndroidContentData> Load(ISqlConnectionInfo connection, AndroidContent AndroidContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].AndroidContentID = @AndroidContentID AND [acd_vcpe].VideoConversionProfileID = @VideoConversionProfileIDIsOriginal";
      parameters.Arguments.Add("AndroidContentID", AndroidContent.ID);
      parameters.Arguments.Add("VideoConversionProfileID", conversionProfile.ID);
      parameters.Arguments.Add("IsOriginal", isOriginal ? 1 : 0);
      return this.LoadMany(connection, parameters);
    }

  }
}

