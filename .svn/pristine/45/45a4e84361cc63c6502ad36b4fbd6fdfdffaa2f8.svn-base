using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ILookupSessionResultManager : IDataManager<LookupSessionResult> 
  {
	

  }

  public partial class LookupSessionResult : MobilePaywallObject<ILookupSessionResultManager> 
  {
		private LookupSession _lookupSession;
		private bool _isSuccessful = false;
		private bool _isFinalResult = false;
		private Guid? _identificationResultGuid;
		private MobileOperator _mobileOperator;
		private string _msisdn = String.Empty;
		private string _encryptedMsisdn = String.Empty;
		

		public LookupSession LookupSession 
		{
			get
			{
				if (this._lookupSession != null &&
						this._lookupSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._lookupSession = LookupSession.CreateManager().LazyLoad(this.ConnectionContext, this._lookupSession.ID) as LookupSession;
					else
						this._lookupSession = LookupSession.CreateManager().LazyLoad(this._lookupSession.ID) as LookupSession;
				return this._lookupSession;
			}
			set { _lookupSession = value; }
		}

		public bool IsSuccessful {get {return this._isSuccessful; } set { this._isSuccessful = value;} }
		public bool IsFinalResult {get {return this._isFinalResult; } set { this._isFinalResult = value;} }
		public Guid? IdentificationResultGuid { get { return this._identificationResultGuid; } set { this._identificationResultGuid = value;}}
		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public string Msisdn{ get {return this._msisdn; } set { this._msisdn = value;} }
		public string EncryptedMsisdn{ get {return this._encryptedMsisdn; } set { this._encryptedMsisdn = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public LookupSessionResult()
    { 
    }

    public LookupSessionResult(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public LookupSessionResult(int id,  LookupSession lookupSession, bool isSuccessful, bool isFinalResult, Guid? identificationResultGuid, MobileOperator mobileOperator, string msisdn, string encryptedMsisdn, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._lookupSession = lookupSession;
			this._isSuccessful = isSuccessful;
			this._isFinalResult = isFinalResult;
			this._identificationResultGuid = identificationResultGuid;
			this._mobileOperator = mobileOperator;
			this._msisdn = msisdn;
			this._encryptedMsisdn = encryptedMsisdn;
			
    }

    public override object Clone(bool deepClone)
    {
      return new LookupSessionResult(-1,  this.LookupSession,this.IsSuccessful,this.IsFinalResult,this.IdentificationResultGuid, this.MobileOperator,this.Msisdn,this.EncryptedMsisdn, DateTime.Now, DateTime.Now);
    }
  }
}

