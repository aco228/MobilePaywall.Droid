using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class TemplateServiceCapTable : TableBase<TemplateServiceCap>
  {
    public static string GetColumnNames()
    {
      return TableBase<TemplateServiceCap>.GetColumnNames(string.Empty, TemplateServiceCapTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<TemplateServiceCap>.GetColumnNames(tablePrefix, TemplateServiceCapTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription TemplateServiceCapID = new ColumnDescription("TemplateServiceCapID", 0, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 1, typeof(int));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 2, typeof(int));
			public static readonly ColumnDescription Value = new ColumnDescription("Value", 3, typeof(int));
			public static readonly ColumnDescription TempCurrentValue = new ColumnDescription("TempCurrentValue", 4, typeof(int));
			public static readonly ColumnDescription Timespan = new ColumnDescription("Timespan", 5, typeof(string));
			public static readonly ColumnDescription DateKey = new ColumnDescription("DateKey", 6, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 7, typeof(string));
			public static readonly ColumnDescription IsLocked = new ColumnDescription("IsLocked", 8, typeof(bool));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 9, typeof(bool));
			public static readonly ColumnDescription LastTransactionDate = new ColumnDescription("LastTransactionDate", 10, typeof(DateTime));
			public static readonly ColumnDescription CapReferenceDate = new ColumnDescription("CapReferenceDate", 11, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 12, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 13, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				TemplateServiceCapID,
				ServiceID,
				MobileOperatorID,
				Value,
				TempCurrentValue,
				Timespan,
				DateKey,
				Description,
				IsLocked,
				IsActive,
				LastTransactionDate,
				CapReferenceDate,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public TemplateServiceCapTable(SqlQuery query) : base(query) { }
    public TemplateServiceCapTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int TemplateServiceCapID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TemplateServiceCapID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		
		public int? MobileOperatorID 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public int Value { get { return this.Reader.GetInt32(this.GetIndex(Columns.Value)); } }
		public int TempCurrentValue { get { return this.Reader.GetInt32(this.GetIndex(Columns.TempCurrentValue)); } }
		public string Timespan { get { return this.Reader.GetString(this.GetIndex(Columns.Timespan)); } }
		public string DateKey { get { return this.Reader.GetString(this.GetIndex(Columns.DateKey)); } }
		public string Description { get { return this.Reader.GetString(this.GetIndex(Columns.Description)); } }
		public bool IsLocked { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsLocked)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		public DateTime LastTransactionDate { get { return this.Reader.GetDateTime(this.GetIndex(Columns.LastTransactionDate)); } }
		public DateTime CapReferenceDate { get { return this.Reader.GetDateTime(this.GetIndex(Columns.CapReferenceDate)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public TemplateServiceCap CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceCap(this.TemplateServiceCapID,new Service(this.ServiceID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Value,this.TempCurrentValue,this.Timespan,this.DateKey,this.Description,this.IsLocked,this.IsActive,this.LastTransactionDate,this.CapReferenceDate,this.Updated,this.Created); 
		}
		public TemplateServiceCap CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceCap(this.TemplateServiceCapID,new Service(this.ServiceID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Value,this.TempCurrentValue,this.Timespan,this.DateKey,this.Description,this.IsLocked,this.IsActive,this.LastTransactionDate,this.CapReferenceDate,this.Updated,this.Created); 
		}
		public TemplateServiceCap CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceCap(this.TemplateServiceCapID,service ?? new Service(this.ServiceID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Value,this.TempCurrentValue,this.Timespan,this.DateKey,this.Description,this.IsLocked,this.IsActive,this.LastTransactionDate,this.CapReferenceDate,this.Updated,this.Created); 
		}
		public TemplateServiceCap CreateInstance(Service service, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceCap(this.TemplateServiceCapID,service ?? new Service(this.ServiceID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Value,this.TempCurrentValue,this.Timespan,this.DateKey,this.Description,this.IsLocked,this.IsActive,this.LastTransactionDate,this.CapReferenceDate,this.Updated,this.Created); 
		}
		

  }
}

