using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(EditHistory))] 
  public partial class EditHistoryManager : MobilePaywall.Data.Sql.SqlManagerBase<EditHistory>, IEditHistoryManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override EditHistory LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							EditHistoryTable.GetColumnNames("[eh]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[eh_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[eh_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[eh_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[eh_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[eh_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[eh_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[eh_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[eh_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[eh_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[eh_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[eh_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[eh_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[eh_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[eh_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[eh_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[eh_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[eh_s_t]") : string.Empty) + 
					" FROM [core].[EditHistory] AS [eh] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [eh_c] ON [eh].[ClientID] = [eh_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [eh_c_ct] ON [eh_c].[ClientTypeID] = [eh_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_a] ON [eh].[ApplicationID] = [eh_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [eh_a_i] ON [eh_a].[InstanceID] = [eh_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [eh_a_rt] ON [eh_a].[RuntimeTypeID] = [eh_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [eh_s] ON [eh].[ServiceID] = [eh_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_s_a] ON [eh_s].[ApplicationID] = [eh_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [eh_s_p] ON [eh_s].[ProductID] = [eh_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [eh_s_m] ON [eh_s].[MerchantID] = [eh_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [eh_s_st] ON [eh_s].[ServiceTypeID] = [eh_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [eh_s_ust] ON [eh_s].[UserSessionTypeID] = [eh_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [eh_s_c] ON [eh_s].[FallbackCountryID] = [eh_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [eh_s_l] ON [eh_s].[FallbackLanguageID] = [eh_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [eh_s_ar] ON [eh_s].[FallbackAgeRatingID] = [eh_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [eh_s_sc] ON [eh_s].[ServiceConfigurationID] = [eh_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [eh_s_bm] ON [eh_s].[BusinessModelID] = [eh_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [eh_s_t] ON [eh_s].[TemplateID] = [eh_s_t].[TemplateID] ";
				sqlCmdText += "WHERE [eh].[EditHistoryID] = @EditHistoryID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@EditHistoryID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "loadinternal", "notfound"), "EditHistory could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				EditHistoryTable ehTable = new EditHistoryTable(query);
				ClientTable eh_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable eh_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable eh_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable eh_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable eh_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable eh_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable eh_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable eh_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable eh_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable eh_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable eh_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable eh_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable eh_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable eh_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable eh_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable eh_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable eh_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				ClientType eh_c_ctObject = (this.Depth > 1) ? eh_c_ctTable.CreateInstance() : null;
				Client eh_cObject = (this.Depth > 0) ? eh_cTable.CreateInstance(eh_c_ctObject) : null;
				Instance eh_a_iObject = (this.Depth > 1) ? eh_a_iTable.CreateInstance() : null;
				RuntimeType eh_a_rtObject = (this.Depth > 1) ? eh_a_rtTable.CreateInstance() : null;
				Application eh_aObject = (this.Depth > 0) ? eh_aTable.CreateInstance(eh_a_iObject, eh_a_rtObject) : null;
				Application eh_s_aObject = (this.Depth > 1) ? eh_s_aTable.CreateInstance() : null;
				Product eh_s_pObject = (this.Depth > 1) ? eh_s_pTable.CreateInstance() : null;
				Merchant eh_s_mObject = (this.Depth > 1) ? eh_s_mTable.CreateInstance() : null;
				ServiceType eh_s_stObject = (this.Depth > 1) ? eh_s_stTable.CreateInstance() : null;
				UserSessionType eh_s_ustObject = (this.Depth > 1) ? eh_s_ustTable.CreateInstance() : null;
				Country eh_s_cObject = (this.Depth > 1) ? eh_s_cTable.CreateInstance() : null;
				Language eh_s_lObject = (this.Depth > 1) ? eh_s_lTable.CreateInstance() : null;
				AgeRating eh_s_arObject = (this.Depth > 1) ? eh_s_arTable.CreateInstance() : null;
				ServiceConfiguration eh_s_scObject = (this.Depth > 1) ? eh_s_scTable.CreateInstance() : null;
				BusinessModel eh_s_bmObject = (this.Depth > 1) ? eh_s_bmTable.CreateInstance() : null;
				Template eh_s_tObject = (this.Depth > 1) ? eh_s_tTable.CreateInstance() : null;
				Service eh_sObject = (this.Depth > 0) ? eh_sTable.CreateInstance(eh_s_aObject, eh_s_pObject, eh_s_mObject, eh_s_stObject, eh_s_ustObject, eh_s_cObject, eh_s_lObject, eh_s_arObject, eh_s_scObject, eh_s_bmObject, eh_s_tObject) : null;
				EditHistory ehObject = ehTable.CreateInstance(eh_cObject, eh_aObject, eh_sObject);
				sqlReader.Close();

				return ehObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "loadinternal", "exception"), "EditHistory could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "EditHistory", "Exception while loading EditHistory object from database. See inner exception for details.", ex);
      }
    }

    public EditHistory Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							EditHistoryTable.GetColumnNames("[eh]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[eh_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[eh_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[eh_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[eh_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[eh_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[eh_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[eh_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[eh_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[eh_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[eh_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[eh_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[eh_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[eh_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[eh_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[eh_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[eh_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[eh_s_t]") : string.Empty) +  
					" FROM [core].[EditHistory] AS [eh] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [eh_c] ON [eh].[ClientID] = [eh_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [eh_c_ct] ON [eh_c].[ClientTypeID] = [eh_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_a] ON [eh].[ApplicationID] = [eh_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [eh_a_i] ON [eh_a].[InstanceID] = [eh_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [eh_a_rt] ON [eh_a].[RuntimeTypeID] = [eh_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [eh_s] ON [eh].[ServiceID] = [eh_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_s_a] ON [eh_s].[ApplicationID] = [eh_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [eh_s_p] ON [eh_s].[ProductID] = [eh_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [eh_s_m] ON [eh_s].[MerchantID] = [eh_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [eh_s_st] ON [eh_s].[ServiceTypeID] = [eh_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [eh_s_ust] ON [eh_s].[UserSessionTypeID] = [eh_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [eh_s_c] ON [eh_s].[FallbackCountryID] = [eh_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [eh_s_l] ON [eh_s].[FallbackLanguageID] = [eh_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [eh_s_ar] ON [eh_s].[FallbackAgeRatingID] = [eh_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [eh_s_sc] ON [eh_s].[ServiceConfigurationID] = [eh_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [eh_s_bm] ON [eh_s].[BusinessModelID] = [eh_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [eh_s_t] ON [eh_s].[TemplateID] = [eh_s_t].[TemplateID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "customload", "notfound"), "EditHistory could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				EditHistoryTable ehTable = new EditHistoryTable(query);
				ClientTable eh_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable eh_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable eh_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable eh_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable eh_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable eh_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable eh_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable eh_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable eh_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable eh_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable eh_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable eh_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable eh_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable eh_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable eh_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable eh_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable eh_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				ClientType eh_c_ctObject = (this.Depth > 1) ? eh_c_ctTable.CreateInstance() : null;
				Client eh_cObject = (this.Depth > 0) ? eh_cTable.CreateInstance(eh_c_ctObject) : null;
				Instance eh_a_iObject = (this.Depth > 1) ? eh_a_iTable.CreateInstance() : null;
				RuntimeType eh_a_rtObject = (this.Depth > 1) ? eh_a_rtTable.CreateInstance() : null;
				Application eh_aObject = (this.Depth > 0) ? eh_aTable.CreateInstance(eh_a_iObject, eh_a_rtObject) : null;
				Application eh_s_aObject = (this.Depth > 1) ? eh_s_aTable.CreateInstance() : null;
				Product eh_s_pObject = (this.Depth > 1) ? eh_s_pTable.CreateInstance() : null;
				Merchant eh_s_mObject = (this.Depth > 1) ? eh_s_mTable.CreateInstance() : null;
				ServiceType eh_s_stObject = (this.Depth > 1) ? eh_s_stTable.CreateInstance() : null;
				UserSessionType eh_s_ustObject = (this.Depth > 1) ? eh_s_ustTable.CreateInstance() : null;
				Country eh_s_cObject = (this.Depth > 1) ? eh_s_cTable.CreateInstance() : null;
				Language eh_s_lObject = (this.Depth > 1) ? eh_s_lTable.CreateInstance() : null;
				AgeRating eh_s_arObject = (this.Depth > 1) ? eh_s_arTable.CreateInstance() : null;
				ServiceConfiguration eh_s_scObject = (this.Depth > 1) ? eh_s_scTable.CreateInstance() : null;
				BusinessModel eh_s_bmObject = (this.Depth > 1) ? eh_s_bmTable.CreateInstance() : null;
				Template eh_s_tObject = (this.Depth > 1) ? eh_s_tTable.CreateInstance() : null;
				Service eh_sObject = (this.Depth > 0) ? eh_sTable.CreateInstance(eh_s_aObject, eh_s_pObject, eh_s_mObject, eh_s_stObject, eh_s_ustObject, eh_s_cObject, eh_s_lObject, eh_s_arObject, eh_s_scObject, eh_s_bmObject, eh_s_tObject) : null;
				EditHistory ehObject = ehTable.CreateInstance(eh_cObject, eh_aObject, eh_sObject);
				sqlReader.Close();

				return ehObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "customload", "exception"), "EditHistory could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "EditHistory", "Exception while loading (custom/single) EditHistory object from database. See inner exception for details.", ex);
      }
    }

    public List<EditHistory> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							EditHistoryTable.GetColumnNames("[eh]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[eh_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[eh_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[eh_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[eh_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[eh_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[eh_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[eh_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[eh_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[eh_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[eh_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[eh_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[eh_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[eh_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[eh_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[eh_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[eh_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[eh_s_t]") : string.Empty) +  
					" FROM [core].[EditHistory] AS [eh] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [eh_c] ON [eh].[ClientID] = [eh_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [eh_c_ct] ON [eh_c].[ClientTypeID] = [eh_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_a] ON [eh].[ApplicationID] = [eh_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [eh_a_i] ON [eh_a].[InstanceID] = [eh_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [eh_a_rt] ON [eh_a].[RuntimeTypeID] = [eh_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [eh_s] ON [eh].[ServiceID] = [eh_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [eh_s_a] ON [eh_s].[ApplicationID] = [eh_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [eh_s_p] ON [eh_s].[ProductID] = [eh_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [eh_s_m] ON [eh_s].[MerchantID] = [eh_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [eh_s_st] ON [eh_s].[ServiceTypeID] = [eh_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [eh_s_ust] ON [eh_s].[UserSessionTypeID] = [eh_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [eh_s_c] ON [eh_s].[FallbackCountryID] = [eh_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [eh_s_l] ON [eh_s].[FallbackLanguageID] = [eh_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [eh_s_ar] ON [eh_s].[FallbackAgeRatingID] = [eh_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [eh_s_sc] ON [eh_s].[ServiceConfigurationID] = [eh_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [eh_s_bm] ON [eh_s].[BusinessModelID] = [eh_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [eh_s_t] ON [eh_s].[TemplateID] = [eh_s_t].[TemplateID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "customloadmany", "notfound"), "EditHistory list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<EditHistory>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				EditHistoryTable ehTable = new EditHistoryTable(query);
				ClientTable eh_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable eh_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable eh_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable eh_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable eh_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable eh_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable eh_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable eh_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable eh_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable eh_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable eh_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable eh_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable eh_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable eh_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable eh_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable eh_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable eh_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        List<EditHistory> result = new List<EditHistory>();
        do
        {
          
					ClientType eh_c_ctObject = (this.Depth > 1) ? eh_c_ctTable.CreateInstance() : null;
					Client eh_cObject = (this.Depth > 0) ? eh_cTable.CreateInstance(eh_c_ctObject) : null;
					Instance eh_a_iObject = (this.Depth > 1) ? eh_a_iTable.CreateInstance() : null;
					RuntimeType eh_a_rtObject = (this.Depth > 1) ? eh_a_rtTable.CreateInstance() : null;
					Application eh_aObject = (this.Depth > 0) ? eh_aTable.CreateInstance(eh_a_iObject, eh_a_rtObject) : null;
					Application eh_s_aObject = (this.Depth > 1) ? eh_s_aTable.CreateInstance() : null;
					Product eh_s_pObject = (this.Depth > 1) ? eh_s_pTable.CreateInstance() : null;
					Merchant eh_s_mObject = (this.Depth > 1) ? eh_s_mTable.CreateInstance() : null;
					ServiceType eh_s_stObject = (this.Depth > 1) ? eh_s_stTable.CreateInstance() : null;
					UserSessionType eh_s_ustObject = (this.Depth > 1) ? eh_s_ustTable.CreateInstance() : null;
					Country eh_s_cObject = (this.Depth > 1) ? eh_s_cTable.CreateInstance() : null;
					Language eh_s_lObject = (this.Depth > 1) ? eh_s_lTable.CreateInstance() : null;
					AgeRating eh_s_arObject = (this.Depth > 1) ? eh_s_arTable.CreateInstance() : null;
					ServiceConfiguration eh_s_scObject = (this.Depth > 1) ? eh_s_scTable.CreateInstance() : null;
					BusinessModel eh_s_bmObject = (this.Depth > 1) ? eh_s_bmTable.CreateInstance() : null;
					Template eh_s_tObject = (this.Depth > 1) ? eh_s_tTable.CreateInstance() : null;
					Service eh_sObject = (this.Depth > 0) ? eh_sTable.CreateInstance(eh_s_aObject, eh_s_pObject, eh_s_mObject, eh_s_stObject, eh_s_ustObject, eh_s_cObject, eh_s_lObject, eh_s_arObject, eh_s_scObject, eh_s_bmObject, eh_s_tObject) : null;
					EditHistory ehObject = (this.Depth > -1) ? ehTable.CreateInstance(eh_cObject, eh_aObject, eh_sObject) : null;
					result.Add(ehObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "customloadmany", "exception"), "EditHistory list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "EditHistory", "Exception while loading (custom/many) EditHistory object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, EditHistory data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[EditHistory] ([ClientID],[ApplicationID],[ServiceID],[TableName],[ColumnName],[EntryID],[EditHistoryActionID],[OldValue],[NewValue]) VALUES(@ClientID,@ApplicationID,@ServiceID,@TableName,@ColumnName,@EntryID,@EditHistoryActionID,@OldValue,@NewValue); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@TableName", data.TableName).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ColumnName", !string.IsNullOrEmpty(data.ColumnName) ? (object)data.ColumnName : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@EntryID", data.EntryID).SqlDbType = SqlDbType.Int;
				sqlCmd.Parameters.AddWithValue("@EditHistoryActionID", (int)data.EditHistoryAction);
				sqlCmd.Parameters.AddWithValue("@OldValue", !string.IsNullOrEmpty(data.OldValue) ? (object)data.OldValue : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@NewValue", !string.IsNullOrEmpty(data.NewValue) ? (object)data.NewValue : DBNull.Value).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "insert", "noprimarykey"), "EditHistory could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "EditHistory", "Exception while inserting EditHistory object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "insert", "exception"), "EditHistory could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "EditHistory", "Exception while inserting EditHistory object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, EditHistory data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[EditHistory] SET " +
												"[ClientID] = @ClientID, " + 
												"[ApplicationID] = @ApplicationID, " + 
												"[ServiceID] = @ServiceID, " + 
												"[TableName] = @TableName, " + 
												"[ColumnName] = @ColumnName, " + 
												"[EntryID] = @EntryID, " + 
												"[EditHistoryActionID] = @EditHistoryActionID, " + 
												"[OldValue] = @OldValue, " + 
												"[NewValue] = @NewValue, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [EditHistoryID] = @EditHistoryID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@TableName", data.TableName).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ColumnName", !string.IsNullOrEmpty(data.ColumnName) ? (object)data.ColumnName : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@EntryID", data.EntryID).SqlDbType = SqlDbType.Int;
				sqlCmd.Parameters.AddWithValue("@EditHistoryActionID", (int)data.EditHistoryAction);
				sqlCmd.Parameters.AddWithValue("@OldValue", !string.IsNullOrEmpty(data.OldValue) ? (object)data.OldValue : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@NewValue", !string.IsNullOrEmpty(data.NewValue) ? (object)data.NewValue : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@EditHistoryID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "update", "norecord"), "EditHistory could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "EditHistory", "Exception while updating EditHistory object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "update", "morerecords"), "EditHistory was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "EditHistory", "Exception while updating EditHistory object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "update", "exception"), "EditHistory could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "EditHistory", "Exception while updating EditHistory object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, EditHistory data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[EditHistory] WHERE EditHistoryID = @EditHistoryID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@EditHistoryID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "delete", "norecord"), "EditHistory could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "EditHistory", "Exception while deleting EditHistory object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("eh", "delete", "exception"), "EditHistory could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "EditHistory", "Exception while deleting EditHistory object from database. See inner exception for details.", ex);
      }
    }
  }
}

