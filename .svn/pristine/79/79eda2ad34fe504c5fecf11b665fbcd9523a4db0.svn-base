var StatisticTableAdvanced = function () {

  var initTable = function (page, setPageLength) {
    var pageLength;

    if (setPageLength != null && setPageLength != undefined && setPageLength != '')
      pageLength = ((setPageLength == 'All') ? -1 : setPageLength);
    else
      pageLength = 15;

    $('#mptable-portlet-title').find('.dt-buttons').remove();

    var table = $('#statistics_table');   

    /* Formatting function for row details */
    function fnFormatDetails(oTable, nTr) {
      var aData = oTable.row(nTr).data();
      var data = aData[aData.length - 1];

      return data;
      //var sOut = '<table>';
      //sOut += '<tr><td>Platform(s):</td><td>bla</td></tr>';
      //sOut += '<tr><td>Engine version:</td><td>blabla</td></tr>';
      //sOut += '<tr><td>CSS grade:</td><td>blablabla</td></tr>';
      //sOut += '<tr><td>Others:</td><td>Could provide a link here</td></tr>';
      //sOut += '</table>';

      //return sOut;
    }

    /*
    * Insert a 'details' column to the table
    */

    if (page == 'index') {
      var nCloneTh = document.createElement('th');
      nCloneTh.className = "table-checkbox";

      var nCloneTd = document.createElement('td');
      nCloneTd.innerHTML = '<span class="row-details row-details-close"></span>';

      var nCloneFoot = document.createElement('td');
      nCloneFoot.innerHTML = '<span class="">Total</span>';

      table.find('thead tr').each(function () {
        this.insertBefore(nCloneTh, this.childNodes[0]);
      });

      table.find('tbody tr').not('.expanded-details').each(function () {
        this.insertBefore(nCloneTd.cloneNode(true), this.childNodes[0]);
      });

      table.find('tfoot tr').each(function () {
        this.insertBefore(nCloneFoot.cloneNode(true), this.childNodes[0]);
      });
    }

    /*
     * Initialize DataTables, with no sorting on the 'details' column
     */
    var oTable = table.DataTable({

      "columnDefs": [
        { "orderable": (page == "index" ? false : true), "targets": [0] }
      ],
      "order": [
         [(page == "index" ? 1 : 0), 'asc'], [(page == "index" ? 2 : 1), 'asc']
      ],
      "lengthMenu": [
          [5, 10, 15, 20, -1],
          [5, 10, 15, 20, "All"] // change per page values here
      ],
      // set the initial value
      "pageLength": pageLength,

      "dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizontal scrollable datatable

      buttons: [
        'copy', 'csv', 'excel', 'pdf', 'print'
      ],

      //buttons: [
      //  {
      //    extend: 'copy',
      //    text: 'Copy to clipboard'
      //  },
      //  {
      //    extend: 'csv',
      //    text: 'Export to CSV'
      //  },
      //  {
      //    extend: 'excel',
      //    text: 'Export to Excel'
      //  },
      //  {
      //    extend: 'pdf',
      //    text: 'Save as PDF'
      //  },
      //  {
      //    extend: 'print',
      //    text: 'Print'
      //  }
      //],


      // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
      // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
      // So when dropdowns used the scrollable div should be removed. 
      //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
      
      "bFilter": false
    });

    new $.fn.dataTable.Buttons(oTable, {
      buttons: [
        {
          extend: 'colvisRestore',
          text: 'See all columns'
        },
        'columnsToggle'
      ]
    } );

    //add export buttons to Tools dropdown
    oTable.buttons(['.buttons-html5', '.buttons-print']).container().appendTo('#table_export_btns');
    //add columnsToggle buttons to Columns dropdown
    //var tableColumnToggler = $('#statistics_table_column_toggler');
    oTable.buttons(['.buttons-columnVisibility']).container().appendTo('#statistics_table_column_toggler');

    var tableWrapper = $('#statistics_table_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper

    tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown

    /* Add event listener for opening and closing details
    * Note that the indicator for showing which row is open is not controlled by DataTables,
    * rather it is done here
    */
    table.on('click', ' tbody td .row-details', function () {
      var nTr = $(this).parents('tr')[0];
      if (oTable.row( nTr ).child.isShown()) {
        /* This row is already open - close it */
        $(this).addClass("row-details-close").removeClass("row-details-open");
        oTable.row(nTr).child.hide();
      } else {
        /* Open this row */
        $(this).addClass("row-details-open").removeClass("row-details-close");
        oTable.row(nTr).child(fnFormatDetails(oTable, nTr), 'details').show().child()[0];
        //oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), 'details');
      }

      //if (oTable.row( nTr ).child.isShown()) {
      //  /* This row is already open - close it */
      //  $(this).addClass("row-details-close").removeClass("row-details-open");
      //  oTable.row( nTr ).child.hide();
      //} else {
      //  /* Open this row */
      //  $(this).addClass("row-details-open").removeClass("row-details-close");
      //  //oTable.row(nTr).next()
      //}

      //var nTr = $(this).parents('tr')[0];

      //if (oTable.row( nTr ).child.isShown()) {
      //  /* This row is already open - close it */
      //  $(this).addClass("row-details-close").removeClass("row-details-open");
      //  oTable.row( nTr ).child.hide();
      //} else {
      //  /* Open this row */
      //  $(this).addClass("row-details-open").removeClass("row-details-close");
      //  //oTable.row(nTr).next()
      //}
    });
  }


  return {
    //main function to initiate the module
    init: function (setPageLength) {
      if (!jQuery().dataTable) {
        return;
      }

      initTable(setPageLength);
    }
  };

}();