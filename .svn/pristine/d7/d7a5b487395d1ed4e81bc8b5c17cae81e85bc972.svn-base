using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IServiceConfigurationEntryManager : IDataManager<ServiceConfigurationEntry> 
  {
	

  }

  public partial class ServiceConfigurationEntry : MobilePaywallObject<IServiceConfigurationEntryManager> 
  {
		private ServiceConfiguration _serviceConfiguration;
		private Country _country;
		private MobileOperator _mobileOperator;
		private LookupMode _lookupMode;
		private AgeVerificationMode _ageVerificationMode;
		private AgeRating _ageRating;
		private AgeRatingSelectionMode _ageRatingSelectionMode;
		private ShortMessageProvider _shortMessageProvider;
		private bool _hasSmsPayment = false;
		private bool _isAgeVerificationRequired = false;
		private bool _isWelcomePageRequired = false;
		private bool _isLandingPageRequired = false;
		private bool _isPaymentEnabled = false;
		private string _shortcode = String.Empty;
		private string _keyword = String.Empty;
		

		public ServiceConfiguration ServiceConfiguration 
		{
			get
			{
				if (this._serviceConfiguration != null &&
						this._serviceConfiguration.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceConfiguration = ServiceConfiguration.CreateManager().LazyLoad(this.ConnectionContext, this._serviceConfiguration.ID) as ServiceConfiguration;
					else
						this._serviceConfiguration = ServiceConfiguration.CreateManager().LazyLoad(this._serviceConfiguration.ID) as ServiceConfiguration;
				return this._serviceConfiguration;
			}
			set { _serviceConfiguration = value; }
		}

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public LookupMode LookupMode  { get { return this._lookupMode; } set { this._lookupMode = value; } }
		public AgeVerificationMode AgeVerificationMode  { get { return this._ageVerificationMode; } set { this._ageVerificationMode = value; } }
		public AgeRating AgeRating 
		{
			get
			{
				if (this._ageRating != null &&
						this._ageRating.IsEmpty)
					if (this.ConnectionContext != null)
						this._ageRating = AgeRating.CreateManager().LazyLoad(this.ConnectionContext, this._ageRating.ID) as AgeRating;
					else
						this._ageRating = AgeRating.CreateManager().LazyLoad(this._ageRating.ID) as AgeRating;
				return this._ageRating;
			}
			set { _ageRating = value; }
		}

		public AgeRatingSelectionMode AgeRatingSelectionMode  { get { return this._ageRatingSelectionMode; } set { this._ageRatingSelectionMode = value; } }
		public ShortMessageProvider ShortMessageProvider 
		{
			get
			{
				if (this._shortMessageProvider != null &&
						this._shortMessageProvider.IsEmpty)
					if (this.ConnectionContext != null)
						this._shortMessageProvider = ShortMessageProvider.CreateManager().LazyLoad(this.ConnectionContext, this._shortMessageProvider.ID) as ShortMessageProvider;
					else
						this._shortMessageProvider = ShortMessageProvider.CreateManager().LazyLoad(this._shortMessageProvider.ID) as ShortMessageProvider;
				return this._shortMessageProvider;
			}
			set { _shortMessageProvider = value; }
		}

		public bool HasSmsPayment {get {return this._hasSmsPayment; } set { this._hasSmsPayment = value;} }
		public bool IsAgeVerificationRequired {get {return this._isAgeVerificationRequired; } set { this._isAgeVerificationRequired = value;} }
		public bool IsWelcomePageRequired {get {return this._isWelcomePageRequired; } set { this._isWelcomePageRequired = value;} }
		public bool IsLandingPageRequired {get {return this._isLandingPageRequired; } set { this._isLandingPageRequired = value;} }
		public bool IsPaymentEnabled {get {return this._isPaymentEnabled; } set { this._isPaymentEnabled = value;} }
		public string Shortcode{ get {return this._shortcode; } set { this._shortcode = value;} }
		public string Keyword{ get {return this._keyword; } set { this._keyword = value;} }
		

    public override bool IsInsertable { get { return true;} }

    //public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ServiceConfigurationEntry()
    { 
    }

    public ServiceConfigurationEntry(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ServiceConfigurationEntry(int id,  ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator, LookupMode lookupMode, AgeVerificationMode ageVerificationMode, AgeRating ageRating, AgeRatingSelectionMode ageRatingSelectionMode, ShortMessageProvider shortMessageProvider, bool hasSmsPayment, bool isAgeVerificationRequired, bool isWelcomePageRequired, bool isLandingPageRequired, bool isPaymentEnabled, string shortcode, string keyword, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._serviceConfiguration = serviceConfiguration;
			this._country = country;
			this._mobileOperator = mobileOperator;
			this._lookupMode = lookupMode;
			this._ageVerificationMode = ageVerificationMode;
			this._ageRating = ageRating;
			this._ageRatingSelectionMode = ageRatingSelectionMode;
			this._shortMessageProvider = shortMessageProvider;
			this._hasSmsPayment = hasSmsPayment;
			this._isAgeVerificationRequired = isAgeVerificationRequired;
			this._isWelcomePageRequired = isWelcomePageRequired;
			this._isLandingPageRequired = isLandingPageRequired;
			this._isPaymentEnabled = isPaymentEnabled;
			this._shortcode = shortcode;
			this._keyword = keyword;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ServiceConfigurationEntry(-1,  this.ServiceConfiguration, this.Country, this.MobileOperator, this.LookupMode, this.AgeVerificationMode, this.AgeRating, this.AgeRatingSelectionMode, this.ShortMessageProvider,this.HasSmsPayment,this.IsAgeVerificationRequired,this.IsWelcomePageRequired,this.IsLandingPageRequired,this.IsPaymentEnabled,this.Shortcode,this.Keyword, DateTime.Now, DateTime.Now);
    }
  }
}

