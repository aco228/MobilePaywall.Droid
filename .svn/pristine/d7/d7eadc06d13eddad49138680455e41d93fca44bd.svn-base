using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPaymentContentAccessPolicyMapManager : IDataManager<PaymentContentAccessPolicyMap> 
  {
	

  }

  public partial class PaymentContentAccessPolicyMap : MobilePaywallObject<IPaymentContentAccessPolicyMapManager> 
  {
		private Payment _payment;
		private Content _content;
		private ContentAccessPolicy _contentAccessPolicy;
		private Transaction _transaction;
		private bool _isValid = false;
		private bool _isTemporary = false;
		private DateTime? _validFrom = DateTime.MinValue;
		private DateTime? _validTo = DateTime.MinValue;
		

		public Payment Payment 
		{
			get
			{
				if (this._payment != null &&
						this._payment.IsEmpty)
					if (this.ConnectionContext != null)
						this._payment = Payment.CreateManager().LazyLoad(this.ConnectionContext, this._payment.ID) as Payment;
					else
						this._payment = Payment.CreateManager().LazyLoad(this._payment.ID) as Payment;
				return this._payment;
			}
			set { _payment = value; }
		}

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public ContentAccessPolicy ContentAccessPolicy 
		{
			get
			{
				if (this._contentAccessPolicy != null &&
						this._contentAccessPolicy.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentAccessPolicy = ContentAccessPolicy.CreateManager().LazyLoad(this.ConnectionContext, this._contentAccessPolicy.ID) as ContentAccessPolicy;
					else
						this._contentAccessPolicy = ContentAccessPolicy.CreateManager().LazyLoad(this._contentAccessPolicy.ID) as ContentAccessPolicy;
				return this._contentAccessPolicy;
			}
			set { _contentAccessPolicy = value; }
		}

		public Transaction Transaction 
		{
			get
			{
				if (this._transaction != null &&
						this._transaction.IsEmpty)
					if (this.ConnectionContext != null)
						this._transaction = Transaction.CreateManager().LazyLoad(this.ConnectionContext, this._transaction.ID) as Transaction;
					else
						this._transaction = Transaction.CreateManager().LazyLoad(this._transaction.ID) as Transaction;
				return this._transaction;
			}
			set { _transaction = value; }
		}

		public bool IsValid {get {return this._isValid; } set { this._isValid = value;} }
		public bool IsTemporary {get {return this._isTemporary; } set { this._isTemporary = value;} }
		public DateTime? ValidFrom { get { return this._validFrom; } set { this._validFrom = value;} }
		public DateTime? ValidTo { get { return this._validTo; } set { this._validTo = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public PaymentContentAccessPolicyMap()
    { 
    }

    public PaymentContentAccessPolicyMap(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public PaymentContentAccessPolicyMap(int id,  Payment payment, Content content, ContentAccessPolicy contentAccessPolicy, Transaction transaction, bool isValid, bool isTemporary, DateTime? validFrom, DateTime? validTo, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._payment = payment;
			this._content = content;
			this._contentAccessPolicy = contentAccessPolicy;
			this._transaction = transaction;
			this._isValid = isValid;
			this._isTemporary = isTemporary;
			this._validFrom = validFrom;
			this._validTo = validTo;
			
    }

    public override object Clone(bool deepClone)
    {
      return new PaymentContentAccessPolicyMap(-1,  this.Payment, this.Content, this.ContentAccessPolicy, this.Transaction,this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo, DateTime.Now, DateTime.Now);
    }
  }
}

