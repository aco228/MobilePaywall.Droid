using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(Task))] 
  public partial class TaskManager : MobilePaywall.Data.Sql.SqlManagerBase<Task>, ITaskManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override Task LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							TaskTable.GetColumnNames("[t]") + 
							(this.Depth > 0 ? "," + TaskTypeTable.GetColumnNames("[t_tt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[t_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[t_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[c1_ct]") : string.Empty) + 
					" FROM [merchant].[Task] AS [t] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[TaskType] AS [t_tt] ON [t].[TaskTypeID] = [t_tt].[TaskTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [t_c] ON [t].[CreatorID] = [t_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [t_c_ct] ON [t_c].[ClientTypeID] = [t_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Client] AS [c1] ON [t].[ResolverID] = [c1].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ClientType] AS [c1_ct] ON [c1].[ClientTypeID] = [c1_ct].[ClientTypeID] ";
				sqlCmdText += "WHERE [t].[TaskID] = @TaskID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TaskID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "loadinternal", "notfound"), "Task could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TaskTable tTable = new TaskTable(query);
				TaskTypeTable t_ttTable = (this.Depth > 0) ? new TaskTypeTable(query) : null;
				ClientTable t_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable t_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ClientTable c1Table = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable c1_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        
				TaskType t_ttObject = (this.Depth > 0) ? t_ttTable.CreateInstance() : null;
				ClientType t_c_ctObject = (this.Depth > 1) ? t_c_ctTable.CreateInstance() : null;
				Client t_cObject = (this.Depth > 0) ? t_cTable.CreateInstance(t_c_ctObject) : null;
				ClientType c1_ctObject = (this.Depth > 1) ? c1_ctTable.CreateInstance() : null;
				Client c1Object = (this.Depth > 0) ? c1Table.CreateInstance(c1_ctObject) : null;
				Task tObject = tTable.CreateInstance(t_ttObject, t_cObject, c1Object);
				sqlReader.Close();

				return tObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "loadinternal", "exception"), "Task could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Task", "Exception while loading Task object from database. See inner exception for details.", ex);
      }
    }

    public Task Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TaskTable.GetColumnNames("[t]") + 
							(this.Depth > 0 ? "," + TaskTypeTable.GetColumnNames("[t_tt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[t_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[t_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[c1_ct]") : string.Empty) +  
					" FROM [merchant].[Task] AS [t] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[TaskType] AS [t_tt] ON [t].[TaskTypeID] = [t_tt].[TaskTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [t_c] ON [t].[CreatorID] = [t_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [t_c_ct] ON [t_c].[ClientTypeID] = [t_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Client] AS [c1] ON [t].[ResolverID] = [c1].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ClientType] AS [c1_ct] ON [c1].[ClientTypeID] = [c1_ct].[ClientTypeID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "customload", "notfound"), "Task could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TaskTable tTable = new TaskTable(query);
				TaskTypeTable t_ttTable = (this.Depth > 0) ? new TaskTypeTable(query) : null;
				ClientTable t_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable t_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ClientTable c1Table = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable c1_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        
				TaskType t_ttObject = (this.Depth > 0) ? t_ttTable.CreateInstance() : null;
				ClientType t_c_ctObject = (this.Depth > 1) ? t_c_ctTable.CreateInstance() : null;
				Client t_cObject = (this.Depth > 0) ? t_cTable.CreateInstance(t_c_ctObject) : null;
				ClientType c1_ctObject = (this.Depth > 1) ? c1_ctTable.CreateInstance() : null;
				Client c1Object = (this.Depth > 0) ? c1Table.CreateInstance(c1_ctObject) : null;
				Task tObject = tTable.CreateInstance(t_ttObject, t_cObject, c1Object);
				sqlReader.Close();

				return tObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "customload", "exception"), "Task could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Task", "Exception while loading (custom/single) Task object from database. See inner exception for details.", ex);
      }
    }

    public List<Task> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TaskTable.GetColumnNames("[t]") + 
							(this.Depth > 0 ? "," + TaskTypeTable.GetColumnNames("[t_tt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[t_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[t_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[c1_ct]") : string.Empty) +  
					" FROM [merchant].[Task] AS [t] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[TaskType] AS [t_tt] ON [t].[TaskTypeID] = [t_tt].[TaskTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [t_c] ON [t].[CreatorID] = [t_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [t_c_ct] ON [t_c].[ClientTypeID] = [t_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Client] AS [c1] ON [t].[ResolverID] = [c1].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ClientType] AS [c1_ct] ON [c1].[ClientTypeID] = [c1_ct].[ClientTypeID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "customloadmany", "notfound"), "Task list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<Task>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TaskTable tTable = new TaskTable(query);
				TaskTypeTable t_ttTable = (this.Depth > 0) ? new TaskTypeTable(query) : null;
				ClientTable t_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable t_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ClientTable c1Table = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable c1_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        List<Task> result = new List<Task>();
        do
        {
          
					TaskType t_ttObject = (this.Depth > 0) ? t_ttTable.CreateInstance() : null;
					ClientType t_c_ctObject = (this.Depth > 1) ? t_c_ctTable.CreateInstance() : null;
					Client t_cObject = (this.Depth > 0) ? t_cTable.CreateInstance(t_c_ctObject) : null;
					ClientType c1_ctObject = (this.Depth > 1) ? c1_ctTable.CreateInstance() : null;
					Client c1Object = (this.Depth > 0) ? c1Table.CreateInstance(c1_ctObject) : null;
					Task tObject = (this.Depth > -1) ? tTable.CreateInstance(t_ttObject, t_cObject, c1Object) : null;
					result.Add(tObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "customloadmany", "exception"), "Task list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Task", "Exception while loading (custom/many) Task object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, Task data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [merchant].[Task] ([TaskTypeID],[TaskStatusID],[TaskActionID],[CreatorID],[ResolverID],[Data],[Note]) VALUES(@TaskTypeID,@TaskStatusID,@TaskActionID,@CreatorID,@ResolverID,@Data,@Note); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@TaskTypeID", data.TaskType.ID);
				sqlCmd.Parameters.AddWithValue("@TaskStatusID", (int)data.TaskStatus);
				sqlCmd.Parameters.AddWithValue("@TaskActionID", (int)data.TaskAction);
				sqlCmd.Parameters.AddWithValue("@CreatorID", data.Creator.ID);
				sqlCmd.Parameters.AddWithValue("@ResolverID", data.Resolver == null ? DBNull.Value : (object)data.Resolver.ID);
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Note", !string.IsNullOrEmpty(data.Note) ? (object)data.Note : DBNull.Value).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "insert", "noprimarykey"), "Task could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "Task", "Exception while inserting Task object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "insert", "exception"), "Task could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "Task", "Exception while inserting Task object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, Task data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [merchant].[Task] SET " +
												"[TaskTypeID] = @TaskTypeID, " + 
												"[TaskStatusID] = @TaskStatusID, " + 
												"[TaskActionID] = @TaskActionID, " + 
												"[CreatorID] = @CreatorID, " + 
												"[ResolverID] = @ResolverID, " + 
												"[Data] = @Data, " + 
												"[Note] = @Note, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [TaskID] = @TaskID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@TaskTypeID", data.TaskType.ID);
				sqlCmd.Parameters.AddWithValue("@TaskStatusID", (int)data.TaskStatus);
				sqlCmd.Parameters.AddWithValue("@TaskActionID", (int)data.TaskAction);
				sqlCmd.Parameters.AddWithValue("@CreatorID", data.Creator.ID);
				sqlCmd.Parameters.AddWithValue("@ResolverID", data.Resolver == null ? DBNull.Value : (object)data.Resolver.ID);
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Note", !string.IsNullOrEmpty(data.Note) ? (object)data.Note : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@TaskID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "update", "norecord"), "Task could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "Task", "Exception while updating Task object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "update", "morerecords"), "Task was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "Task", "Exception while updating Task object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "update", "exception"), "Task could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "Task", "Exception while updating Task object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, Task data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [merchant].[Task] WHERE TaskID = @TaskID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TaskID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "delete", "norecord"), "Task could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "Task", "Exception while deleting Task object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("t", "delete", "exception"), "Task could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "Task", "Exception while deleting Task object from database. See inner exception for details.", ex);
      }
    }
  }
}

