using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ILookupManagerConfigurationManager : IDataManager<LookupManagerConfiguration> 
  {
	

  }

  public partial class LookupManagerConfiguration : MobilePaywallObject<ILookupManagerConfigurationManager> 
  {
		private LookupManagerType _lookupManagerType;
		private Country _country;
		private PaymentProvider _paymentProvider;
		private Service _service;
		private string _description = String.Empty;
		

		public LookupManagerType LookupManagerType 
		{
			get
			{
				if (this._lookupManagerType != null &&
						this._lookupManagerType.IsEmpty)
					if (this.ConnectionContext != null)
						this._lookupManagerType = LookupManagerType.CreateManager().LazyLoad(this.ConnectionContext, this._lookupManagerType.ID) as LookupManagerType;
					else
						this._lookupManagerType = LookupManagerType.CreateManager().LazyLoad(this._lookupManagerType.ID) as LookupManagerType;
				return this._lookupManagerType;
			}
			set { _lookupManagerType = value; }
		}

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public PaymentProvider PaymentProvider 
		{
			get
			{
				if (this._paymentProvider != null &&
						this._paymentProvider.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this.ConnectionContext, this._paymentProvider.ID) as PaymentProvider;
					else
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this._paymentProvider.ID) as PaymentProvider;
				return this._paymentProvider;
			}
			set { _paymentProvider = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public string Description{ get {return this._description; } set { this._description = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public LookupManagerConfiguration()
    { 
    }

    public LookupManagerConfiguration(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public LookupManagerConfiguration(int id,  LookupManagerType lookupManagerType, Country country, PaymentProvider paymentProvider, Service service, string description, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._lookupManagerType = lookupManagerType;
			this._country = country;
			this._paymentProvider = paymentProvider;
			this._service = service;
			this._description = description;
			
    }

    public override object Clone(bool deepClone)
    {
      return new LookupManagerConfiguration(-1,  this.LookupManagerType, this.Country, this.PaymentProvider, this.Service,this.Description, DateTime.Now, DateTime.Now);
    }
  }
}

