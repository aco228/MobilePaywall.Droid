using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class EditHistoryTable : TableBase<EditHistory>
  {
    public static string GetColumnNames()
    {
      return TableBase<EditHistory>.GetColumnNames(string.Empty, EditHistoryTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<EditHistory>.GetColumnNames(tablePrefix, EditHistoryTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription EditHistoryID = new ColumnDescription("EditHistoryID", 0, typeof(int));
			public static readonly ColumnDescription ClientID = new ColumnDescription("ClientID", 1, typeof(int));
			public static readonly ColumnDescription ApplicationID = new ColumnDescription("ApplicationID", 2, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 3, typeof(int));
			public static readonly ColumnDescription TableName = new ColumnDescription("TableName", 4, typeof(string));
			public static readonly ColumnDescription ColumnName = new ColumnDescription("ColumnName", 5, typeof(string));
			public static readonly ColumnDescription EntryID = new ColumnDescription("EntryID", 6, typeof(int));
			public static readonly ColumnDescription EditHistoryActionID = new ColumnDescription("EditHistoryActionID", 7, typeof(int));
			public static readonly ColumnDescription OldValue = new ColumnDescription("OldValue", 8, typeof(string));
			public static readonly ColumnDescription NewValue = new ColumnDescription("NewValue", 9, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 10, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 11, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				EditHistoryID,
				ClientID,
				ApplicationID,
				ServiceID,
				TableName,
				ColumnName,
				EntryID,
				EditHistoryActionID,
				OldValue,
				NewValue,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public EditHistoryTable(SqlQuery query) : base(query) { }
    public EditHistoryTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int EditHistoryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.EditHistoryID)); } }
		public int ClientID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientID)); } }
		
		public int? ApplicationID 
		{
			get
			{
				int index = this.GetIndex(Columns.ApplicationID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? ServiceID 
		{
			get
			{
				int index = this.GetIndex(Columns.ServiceID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public string TableName { get { return this.Reader.GetString(this.GetIndex(Columns.TableName)); } }
		
		public string ColumnName 
		{
			get
			{
				int index = this.GetIndex(Columns.ColumnName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public int EntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.EntryID)); } }
		public int EditHistoryActionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.EditHistoryActionID)); } }
		
		public string OldValue 
		{
			get
			{
				int index = this.GetIndex(Columns.OldValue);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string NewValue 
		{
			get
			{
				int index = this.GetIndex(Columns.NewValue);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public EditHistory CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,new Client(this.ClientID), (ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Application application)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,new Client(this.ClientID), application ?? (this.ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Client client)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,client ?? new Client(this.ClientID), (ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,new Client(this.ClientID), (ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Client client, Application application)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,client ?? new Client(this.ClientID), application ?? (this.ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Application application, Service service)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,new Client(this.ClientID), application ?? (this.ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Client client, Service service)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,client ?? new Client(this.ClientID), (ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		public EditHistory CreateInstance(Client client, Application application, Service service)  
		{ 
			if (!this.HasData) return null;
			return new EditHistory(this.EditHistoryID,client ?? new Client(this.ClientID), application ?? (this.ApplicationID.HasValue ? new Application(this.ApplicationID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.TableName,this.ColumnName,this.EntryID,(EditHistoryAction)this.EditHistoryActionID,this.OldValue,this.NewValue,this.Updated,this.Created); 
		}
		

  }
}

