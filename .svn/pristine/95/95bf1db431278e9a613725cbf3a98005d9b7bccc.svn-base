using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class InitiateCallbackTable : TableBase<InitiateCallback>
  {
    public static string GetColumnNames()
    {
      return TableBase<InitiateCallback>.GetColumnNames(string.Empty, InitiateCallbackTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<InitiateCallback>.GetColumnNames(tablePrefix, InitiateCallbackTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription InitiateCallbackID = new ColumnDescription("InitiateCallbackID", 0, typeof(int));
			public static readonly ColumnDescription InitiateCallbackGuid = new ColumnDescription("InitiateCallbackGuid", 1, typeof(Guid));
			public static readonly ColumnDescription PaymentRequestID = new ColumnDescription("PaymentRequestID", 2, typeof(int));
			public static readonly ColumnDescription IsCompleted = new ColumnDescription("IsCompleted", 3, typeof(bool));
			public static readonly ColumnDescription ValidTo = new ColumnDescription("ValidTo", 4, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				InitiateCallbackID,
				InitiateCallbackGuid,
				PaymentRequestID,
				IsCompleted,
				ValidTo,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public InitiateCallbackTable(SqlQuery query) : base(query) { }
    public InitiateCallbackTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int InitiateCallbackID { get { return this.Reader.GetInt32(this.GetIndex(Columns.InitiateCallbackID)); } }
		public Guid InitiateCallbackGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.InitiateCallbackGuid)); } }
		public int PaymentRequestID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentRequestID)); } }
		public bool IsCompleted { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsCompleted)); } }
		public DateTime ValidTo { get { return this.Reader.GetDateTime(this.GetIndex(Columns.ValidTo)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public InitiateCallback CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new InitiateCallback(this.InitiateCallbackID,this.InitiateCallbackGuid,new PaymentRequest(this.PaymentRequestID), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		public InitiateCallback CreateInstance(PaymentRequest paymentRequest)  
		{ 
			if (!this.HasData) return null;
			return new InitiateCallback(this.InitiateCallbackID,this.InitiateCallbackGuid,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		

  }
}

