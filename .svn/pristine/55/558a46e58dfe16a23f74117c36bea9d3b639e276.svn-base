using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IDeamonTaskManager : IDataManager<DeamonTask> 
  {
	

  }

  public partial class DeamonTask : MobilePaywallObject<IDeamonTaskManager> 
  {
		private string _name = String.Empty;
		private string _namespace = String.Empty;
		private string _demandKey = String.Empty;
		private int _day = -1;
		private int _hour = -1;
		private int _minute = -1;
		private DateTime? _lastExecution = DateTime.MinValue;
		private bool _executeOnlyOnDemand = false;
		private bool _isRunning = false;
		private bool _isActive = false;
		

		public string Name{ get {return this._name; } set { this._name = value;} }
		public string Namespace{ get {return this._namespace; } set { this._namespace = value;} }
		public string DemandKey{ get {return this._demandKey; } set { this._demandKey = value;} }
		public int Day{ get {return this._day; } set { this._day = value;} }
		public int Hour{ get {return this._hour; } set { this._hour = value;} }
		public int Minute{ get {return this._minute; } set { this._minute = value;} }
		public DateTime? LastExecution { get { return this._lastExecution; } set { this._lastExecution = value;} }
		public bool ExecuteOnlyOnDemand {get {return this._executeOnlyOnDemand; } set { this._executeOnlyOnDemand = value;} }
		public bool IsRunning {get {return this._isRunning; } set { this._isRunning = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public DeamonTask()
    { 
    }

    public DeamonTask(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public DeamonTask(int id,  string name, string @namespace, string demandKey, int day, int hour, int minute, DateTime? lastExecution, bool executeOnlyOnDemand, bool isRunning, bool isActive, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._name = name;
			this._namespace = @namespace;
			this._demandKey = demandKey;
			this._day = day;
			this._hour = hour;
			this._minute = minute;
			this._lastExecution = lastExecution;
			this._executeOnlyOnDemand = executeOnlyOnDemand;
			this._isRunning = isRunning;
			this._isActive = isActive;
			
    }

    public override object Clone(bool deepClone)
    {
      return new DeamonTask(-1, this.Name,this.Namespace,this.DemandKey,this.Day,this.Hour,this.Minute,this.LastExecution,this.ExecuteOnlyOnDemand,this.IsRunning,this.IsActive, DateTime.Now, DateTime.Now);
    }
  }
}

