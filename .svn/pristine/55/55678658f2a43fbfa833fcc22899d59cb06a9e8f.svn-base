using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(GreeceMsisdnServiceMap))] 
  public partial class GreeceMsisdnServiceMapManager : MobilePaywall.Data.Sql.SqlManagerBase<GreeceMsisdnServiceMap>, IGreeceMsisdnServiceMapManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override GreeceMsisdnServiceMap LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							GreeceMsisdnServiceMapTable.GetColumnNames("[gmsm]") + 
							(this.Depth > 0 ? "," + GreeceMsisdnTable.GetColumnNames("[gmsm_gm]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[gmsm_gm_mo]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[gmsm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[gmsm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[gmsm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[gmsm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[gmsm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[gmsm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[gmsm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[gmsm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[gmsm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[gmsm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[gmsm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[gmsm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + OLCacheTable.GetColumnNames("[gmsm_olc]") : string.Empty) + 
					" FROM [core].[GreeceMsisdnServiceMap] AS [gmsm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[GreeceMsisdn] AS [gmsm_gm] ON [gmsm].[GreeceMsisdnID] = [gmsm_gm].[GreeceMsisdnID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [gmsm_gm_mo] ON [gmsm_gm].[MobileOperatorID] = [gmsm_gm_mo].[MobileOperatorID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [gmsm_s] ON [gmsm].[ServiceID] = [gmsm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [gmsm_s_a] ON [gmsm_s].[ApplicationID] = [gmsm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [gmsm_s_p] ON [gmsm_s].[ProductID] = [gmsm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [gmsm_s_m] ON [gmsm_s].[MerchantID] = [gmsm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [gmsm_s_st] ON [gmsm_s].[ServiceTypeID] = [gmsm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [gmsm_s_ust] ON [gmsm_s].[UserSessionTypeID] = [gmsm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [gmsm_s_c] ON [gmsm_s].[FallbackCountryID] = [gmsm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [gmsm_s_l] ON [gmsm_s].[FallbackLanguageID] = [gmsm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [gmsm_s_ar] ON [gmsm_s].[FallbackAgeRatingID] = [gmsm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [gmsm_s_sc] ON [gmsm_s].[ServiceConfigurationID] = [gmsm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [gmsm_s_bm] ON [gmsm_s].[BusinessModelID] = [gmsm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [gmsm_s_t] ON [gmsm_s].[TemplateID] = [gmsm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[OLCache] AS [gmsm_olc] ON [gmsm].[OLCacheID] = [gmsm_olc].[OLCacheID] ";
				sqlCmdText += "WHERE [gmsm].[GreeceMsisdnServiceMapID] = @GreeceMsisdnServiceMapID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@GreeceMsisdnServiceMapID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "loadinternal", "notfound"), "GreeceMsisdnServiceMap could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				GreeceMsisdnServiceMapTable gmsmTable = new GreeceMsisdnServiceMapTable(query);
				GreeceMsisdnTable gmsm_gmTable = (this.Depth > 0) ? new GreeceMsisdnTable(query) : null;
				MobileOperatorTable gmsm_gm_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ServiceTable gmsm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable gmsm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable gmsm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable gmsm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable gmsm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable gmsm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable gmsm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable gmsm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable gmsm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable gmsm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable gmsm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable gmsm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				OLCacheTable gmsm_olcTable = (this.Depth > 0) ? new OLCacheTable(query) : null;

        
				MobileOperator gmsm_gm_moObject = (this.Depth > 1) ? gmsm_gm_moTable.CreateInstance() : null;
				GreeceMsisdn gmsm_gmObject = (this.Depth > 0) ? gmsm_gmTable.CreateInstance(gmsm_gm_moObject) : null;
				Application gmsm_s_aObject = (this.Depth > 1) ? gmsm_s_aTable.CreateInstance() : null;
				Product gmsm_s_pObject = (this.Depth > 1) ? gmsm_s_pTable.CreateInstance() : null;
				Merchant gmsm_s_mObject = (this.Depth > 1) ? gmsm_s_mTable.CreateInstance() : null;
				ServiceType gmsm_s_stObject = (this.Depth > 1) ? gmsm_s_stTable.CreateInstance() : null;
				UserSessionType gmsm_s_ustObject = (this.Depth > 1) ? gmsm_s_ustTable.CreateInstance() : null;
				Country gmsm_s_cObject = (this.Depth > 1) ? gmsm_s_cTable.CreateInstance() : null;
				Language gmsm_s_lObject = (this.Depth > 1) ? gmsm_s_lTable.CreateInstance() : null;
				AgeRating gmsm_s_arObject = (this.Depth > 1) ? gmsm_s_arTable.CreateInstance() : null;
				ServiceConfiguration gmsm_s_scObject = (this.Depth > 1) ? gmsm_s_scTable.CreateInstance() : null;
				BusinessModel gmsm_s_bmObject = (this.Depth > 1) ? gmsm_s_bmTable.CreateInstance() : null;
				Template gmsm_s_tObject = (this.Depth > 1) ? gmsm_s_tTable.CreateInstance() : null;
				Service gmsm_sObject = (this.Depth > 0) ? gmsm_sTable.CreateInstance(gmsm_s_aObject, gmsm_s_pObject, gmsm_s_mObject, gmsm_s_stObject, gmsm_s_ustObject, gmsm_s_cObject, gmsm_s_lObject, gmsm_s_arObject, gmsm_s_scObject, gmsm_s_bmObject, gmsm_s_tObject) : null;
				OLCache gmsm_olcObject = (this.Depth > 0) ? gmsm_olcTable.CreateInstance() : null;
				GreeceMsisdnServiceMap gmsmObject = gmsmTable.CreateInstance(gmsm_gmObject, gmsm_sObject, gmsm_olcObject);
				sqlReader.Close();

				return gmsmObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "loadinternal", "exception"), "GreeceMsisdnServiceMap could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "GreeceMsisdnServiceMap", "Exception while loading GreeceMsisdnServiceMap object from database. See inner exception for details.", ex);
      }
    }

    public GreeceMsisdnServiceMap Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							GreeceMsisdnServiceMapTable.GetColumnNames("[gmsm]") + 
							(this.Depth > 0 ? "," + GreeceMsisdnTable.GetColumnNames("[gmsm_gm]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[gmsm_gm_mo]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[gmsm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[gmsm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[gmsm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[gmsm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[gmsm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[gmsm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[gmsm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[gmsm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[gmsm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[gmsm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[gmsm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[gmsm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + OLCacheTable.GetColumnNames("[gmsm_olc]") : string.Empty) +  
					" FROM [core].[GreeceMsisdnServiceMap] AS [gmsm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[GreeceMsisdn] AS [gmsm_gm] ON [gmsm].[GreeceMsisdnID] = [gmsm_gm].[GreeceMsisdnID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [gmsm_gm_mo] ON [gmsm_gm].[MobileOperatorID] = [gmsm_gm_mo].[MobileOperatorID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [gmsm_s] ON [gmsm].[ServiceID] = [gmsm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [gmsm_s_a] ON [gmsm_s].[ApplicationID] = [gmsm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [gmsm_s_p] ON [gmsm_s].[ProductID] = [gmsm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [gmsm_s_m] ON [gmsm_s].[MerchantID] = [gmsm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [gmsm_s_st] ON [gmsm_s].[ServiceTypeID] = [gmsm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [gmsm_s_ust] ON [gmsm_s].[UserSessionTypeID] = [gmsm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [gmsm_s_c] ON [gmsm_s].[FallbackCountryID] = [gmsm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [gmsm_s_l] ON [gmsm_s].[FallbackLanguageID] = [gmsm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [gmsm_s_ar] ON [gmsm_s].[FallbackAgeRatingID] = [gmsm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [gmsm_s_sc] ON [gmsm_s].[ServiceConfigurationID] = [gmsm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [gmsm_s_bm] ON [gmsm_s].[BusinessModelID] = [gmsm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [gmsm_s_t] ON [gmsm_s].[TemplateID] = [gmsm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[OLCache] AS [gmsm_olc] ON [gmsm].[OLCacheID] = [gmsm_olc].[OLCacheID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "customload", "notfound"), "GreeceMsisdnServiceMap could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				GreeceMsisdnServiceMapTable gmsmTable = new GreeceMsisdnServiceMapTable(query);
				GreeceMsisdnTable gmsm_gmTable = (this.Depth > 0) ? new GreeceMsisdnTable(query) : null;
				MobileOperatorTable gmsm_gm_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ServiceTable gmsm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable gmsm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable gmsm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable gmsm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable gmsm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable gmsm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable gmsm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable gmsm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable gmsm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable gmsm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable gmsm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable gmsm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				OLCacheTable gmsm_olcTable = (this.Depth > 0) ? new OLCacheTable(query) : null;

        
				MobileOperator gmsm_gm_moObject = (this.Depth > 1) ? gmsm_gm_moTable.CreateInstance() : null;
				GreeceMsisdn gmsm_gmObject = (this.Depth > 0) ? gmsm_gmTable.CreateInstance(gmsm_gm_moObject) : null;
				Application gmsm_s_aObject = (this.Depth > 1) ? gmsm_s_aTable.CreateInstance() : null;
				Product gmsm_s_pObject = (this.Depth > 1) ? gmsm_s_pTable.CreateInstance() : null;
				Merchant gmsm_s_mObject = (this.Depth > 1) ? gmsm_s_mTable.CreateInstance() : null;
				ServiceType gmsm_s_stObject = (this.Depth > 1) ? gmsm_s_stTable.CreateInstance() : null;
				UserSessionType gmsm_s_ustObject = (this.Depth > 1) ? gmsm_s_ustTable.CreateInstance() : null;
				Country gmsm_s_cObject = (this.Depth > 1) ? gmsm_s_cTable.CreateInstance() : null;
				Language gmsm_s_lObject = (this.Depth > 1) ? gmsm_s_lTable.CreateInstance() : null;
				AgeRating gmsm_s_arObject = (this.Depth > 1) ? gmsm_s_arTable.CreateInstance() : null;
				ServiceConfiguration gmsm_s_scObject = (this.Depth > 1) ? gmsm_s_scTable.CreateInstance() : null;
				BusinessModel gmsm_s_bmObject = (this.Depth > 1) ? gmsm_s_bmTable.CreateInstance() : null;
				Template gmsm_s_tObject = (this.Depth > 1) ? gmsm_s_tTable.CreateInstance() : null;
				Service gmsm_sObject = (this.Depth > 0) ? gmsm_sTable.CreateInstance(gmsm_s_aObject, gmsm_s_pObject, gmsm_s_mObject, gmsm_s_stObject, gmsm_s_ustObject, gmsm_s_cObject, gmsm_s_lObject, gmsm_s_arObject, gmsm_s_scObject, gmsm_s_bmObject, gmsm_s_tObject) : null;
				OLCache gmsm_olcObject = (this.Depth > 0) ? gmsm_olcTable.CreateInstance() : null;
				GreeceMsisdnServiceMap gmsmObject = gmsmTable.CreateInstance(gmsm_gmObject, gmsm_sObject, gmsm_olcObject);
				sqlReader.Close();

				return gmsmObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "customload", "exception"), "GreeceMsisdnServiceMap could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "GreeceMsisdnServiceMap", "Exception while loading (custom/single) GreeceMsisdnServiceMap object from database. See inner exception for details.", ex);
      }
    }

    public List<GreeceMsisdnServiceMap> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							GreeceMsisdnServiceMapTable.GetColumnNames("[gmsm]") + 
							(this.Depth > 0 ? "," + GreeceMsisdnTable.GetColumnNames("[gmsm_gm]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[gmsm_gm_mo]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[gmsm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[gmsm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[gmsm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[gmsm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[gmsm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[gmsm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[gmsm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[gmsm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[gmsm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[gmsm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[gmsm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[gmsm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + OLCacheTable.GetColumnNames("[gmsm_olc]") : string.Empty) +  
					" FROM [core].[GreeceMsisdnServiceMap] AS [gmsm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[GreeceMsisdn] AS [gmsm_gm] ON [gmsm].[GreeceMsisdnID] = [gmsm_gm].[GreeceMsisdnID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [gmsm_gm_mo] ON [gmsm_gm].[MobileOperatorID] = [gmsm_gm_mo].[MobileOperatorID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [gmsm_s] ON [gmsm].[ServiceID] = [gmsm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [gmsm_s_a] ON [gmsm_s].[ApplicationID] = [gmsm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [gmsm_s_p] ON [gmsm_s].[ProductID] = [gmsm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [gmsm_s_m] ON [gmsm_s].[MerchantID] = [gmsm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [gmsm_s_st] ON [gmsm_s].[ServiceTypeID] = [gmsm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [gmsm_s_ust] ON [gmsm_s].[UserSessionTypeID] = [gmsm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [gmsm_s_c] ON [gmsm_s].[FallbackCountryID] = [gmsm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [gmsm_s_l] ON [gmsm_s].[FallbackLanguageID] = [gmsm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [gmsm_s_ar] ON [gmsm_s].[FallbackAgeRatingID] = [gmsm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [gmsm_s_sc] ON [gmsm_s].[ServiceConfigurationID] = [gmsm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [gmsm_s_bm] ON [gmsm_s].[BusinessModelID] = [gmsm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [gmsm_s_t] ON [gmsm_s].[TemplateID] = [gmsm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[OLCache] AS [gmsm_olc] ON [gmsm].[OLCacheID] = [gmsm_olc].[OLCacheID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "customloadmany", "notfound"), "GreeceMsisdnServiceMap list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<GreeceMsisdnServiceMap>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				GreeceMsisdnServiceMapTable gmsmTable = new GreeceMsisdnServiceMapTable(query);
				GreeceMsisdnTable gmsm_gmTable = (this.Depth > 0) ? new GreeceMsisdnTable(query) : null;
				MobileOperatorTable gmsm_gm_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ServiceTable gmsm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable gmsm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable gmsm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable gmsm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable gmsm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable gmsm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable gmsm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable gmsm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable gmsm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable gmsm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable gmsm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable gmsm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				OLCacheTable gmsm_olcTable = (this.Depth > 0) ? new OLCacheTable(query) : null;

        List<GreeceMsisdnServiceMap> result = new List<GreeceMsisdnServiceMap>();
        do
        {
          
					MobileOperator gmsm_gm_moObject = (this.Depth > 1) ? gmsm_gm_moTable.CreateInstance() : null;
					GreeceMsisdn gmsm_gmObject = (this.Depth > 0) ? gmsm_gmTable.CreateInstance(gmsm_gm_moObject) : null;
					Application gmsm_s_aObject = (this.Depth > 1) ? gmsm_s_aTable.CreateInstance() : null;
					Product gmsm_s_pObject = (this.Depth > 1) ? gmsm_s_pTable.CreateInstance() : null;
					Merchant gmsm_s_mObject = (this.Depth > 1) ? gmsm_s_mTable.CreateInstance() : null;
					ServiceType gmsm_s_stObject = (this.Depth > 1) ? gmsm_s_stTable.CreateInstance() : null;
					UserSessionType gmsm_s_ustObject = (this.Depth > 1) ? gmsm_s_ustTable.CreateInstance() : null;
					Country gmsm_s_cObject = (this.Depth > 1) ? gmsm_s_cTable.CreateInstance() : null;
					Language gmsm_s_lObject = (this.Depth > 1) ? gmsm_s_lTable.CreateInstance() : null;
					AgeRating gmsm_s_arObject = (this.Depth > 1) ? gmsm_s_arTable.CreateInstance() : null;
					ServiceConfiguration gmsm_s_scObject = (this.Depth > 1) ? gmsm_s_scTable.CreateInstance() : null;
					BusinessModel gmsm_s_bmObject = (this.Depth > 1) ? gmsm_s_bmTable.CreateInstance() : null;
					Template gmsm_s_tObject = (this.Depth > 1) ? gmsm_s_tTable.CreateInstance() : null;
					Service gmsm_sObject = (this.Depth > 0) ? gmsm_sTable.CreateInstance(gmsm_s_aObject, gmsm_s_pObject, gmsm_s_mObject, gmsm_s_stObject, gmsm_s_ustObject, gmsm_s_cObject, gmsm_s_lObject, gmsm_s_arObject, gmsm_s_scObject, gmsm_s_bmObject, gmsm_s_tObject) : null;
					OLCache gmsm_olcObject = (this.Depth > 0) ? gmsm_olcTable.CreateInstance() : null;
					GreeceMsisdnServiceMap gmsmObject = (this.Depth > -1) ? gmsmTable.CreateInstance(gmsm_gmObject, gmsm_sObject, gmsm_olcObject) : null;
					result.Add(gmsmObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "customloadmany", "exception"), "GreeceMsisdnServiceMap list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "GreeceMsisdnServiceMap", "Exception while loading (custom/many) GreeceMsisdnServiceMap object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, GreeceMsisdnServiceMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[GreeceMsisdnServiceMap] ([GreeceMsisdnID],[ServiceID],[OLCacheID]) VALUES(@GreeceMsisdnID,@ServiceID,@OLCacheID); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@GreeceMsisdnID", data.GreeceMsisdn.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@OLCacheID", data.OLCache == null ? DBNull.Value : (object)data.OLCache.ID);
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "insert", "noprimarykey"), "GreeceMsisdnServiceMap could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "GreeceMsisdnServiceMap", "Exception while inserting GreeceMsisdnServiceMap object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "insert", "exception"), "GreeceMsisdnServiceMap could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "GreeceMsisdnServiceMap", "Exception while inserting GreeceMsisdnServiceMap object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, GreeceMsisdnServiceMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[GreeceMsisdnServiceMap] SET " +
												"[GreeceMsisdnID] = @GreeceMsisdnID, " + 
												"[ServiceID] = @ServiceID, " + 
												"[OLCacheID] = @OLCacheID, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [GreeceMsisdnServiceMapID] = @GreeceMsisdnServiceMapID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@GreeceMsisdnID", data.GreeceMsisdn.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@OLCacheID", data.OLCache == null ? DBNull.Value : (object)data.OLCache.ID);
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@GreeceMsisdnServiceMapID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "update", "norecord"), "GreeceMsisdnServiceMap could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "GreeceMsisdnServiceMap", "Exception while updating GreeceMsisdnServiceMap object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "update", "morerecords"), "GreeceMsisdnServiceMap was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "GreeceMsisdnServiceMap", "Exception while updating GreeceMsisdnServiceMap object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "update", "exception"), "GreeceMsisdnServiceMap could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "GreeceMsisdnServiceMap", "Exception while updating GreeceMsisdnServiceMap object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, GreeceMsisdnServiceMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[GreeceMsisdnServiceMap] WHERE GreeceMsisdnServiceMapID = @GreeceMsisdnServiceMapID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@GreeceMsisdnServiceMapID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "delete", "norecord"), "GreeceMsisdnServiceMap could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "GreeceMsisdnServiceMap", "Exception while deleting GreeceMsisdnServiceMap object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("gmsm", "delete", "exception"), "GreeceMsisdnServiceMap could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "GreeceMsisdnServiceMap", "Exception while deleting GreeceMsisdnServiceMap object from database. See inner exception for details.", ex);
      }
    }
  }
}

