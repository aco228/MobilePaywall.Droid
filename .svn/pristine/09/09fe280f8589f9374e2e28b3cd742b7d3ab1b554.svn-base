using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ContentGroupManager : IContentGroupManager
  {
		public List<ContentGroup> Load()
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection);
		}

		public List<ContentGroup> Load(IConnectionInfo connection)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			return this.LoadMany(connection, parameters);
		}


		public ContentGroup Load(string name)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, name);
		}

		public ContentGroup Load(IConnectionInfo connection, string name)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, name);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, name);
		}

		public ContentGroup Load(ISqlConnectionInfo connection, string name)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].Name = @Name";
			parameters.Arguments.Add("Name", name);
			return this.Load(connection, parameters);
		}


		public List<ContentGroup> Load(Instance instance)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance);
		}

		public List<ContentGroup> Load(IConnectionInfo connection, Instance instance)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection, Instance instance)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].InstanceID = @InstanceID";
			parameters.Arguments.Add("InstanceID", instance.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroup> Load(ContentGroupType contentGroupType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroupType);
		}

		public List<ContentGroup> Load(IConnectionInfo connection, ContentGroupType contentGroupType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroupType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroupType);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection, ContentGroupType contentGroupType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].ContentGroupTypeID = @ContentGroupTypeID";
			parameters.Arguments.Add("ContentGroupTypeID", contentGroupType.ID);
			//return this.Load(connection, parameters);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroup> Load(Instance instance, ContentGroupType contentGroupType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance, contentGroupType);
		}

		public List<ContentGroup> Load(IConnectionInfo connection, Instance instance, ContentGroupType contentGroupType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance, contentGroupType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance, contentGroupType);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection, Instance instance, ContentGroupType contentGroupType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].InstanceID = @InstanceID AND [cg].ContentGroupTypeID = @ContentGroupTypeID";
			parameters.Arguments.Add("InstanceID", instance.ID);
			parameters.Arguments.Add("ContentGroupTypeID", contentGroupType.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroup> Load(Instance instance, ContentGroupType contentGroupType, bool isEnabled)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance, contentGroupType, isEnabled);
		}

		public List<ContentGroup> Load(IConnectionInfo connection, Instance instance, ContentGroupType contentGroupType, bool isEnabled)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance, contentGroupType, isEnabled);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance, contentGroupType, isEnabled);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection, Instance instance, ContentGroupType contentGroupType, bool isEnabled)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].InstanceID = @InstanceID AND [cg].ContentGroupTypeID = @ContentGroupTypeID AND [cg].IsEnabled = @IsEnabled";
			parameters.Arguments.Add("InstanceID", instance.ID);
			parameters.Arguments.Add("ContentGroupTypeID", contentGroupType.ID);
			parameters.Arguments.Add("IsEnabled", isEnabled ? 1 : 0);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroup> Load(Instance instance, bool isEnabled)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance, isEnabled);
		}

		public List<ContentGroup> Load(IConnectionInfo connection, Instance instance, bool isEnabled)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance, isEnabled);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance, isEnabled);
		}

		public List<ContentGroup> Load(ISqlConnectionInfo connection, Instance instance, bool isEnabled)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cg].InstanceID = @InstanceID AND [cg].IsEnabled = @IsEnabled";
			parameters.Arguments.Add("InstanceID", instance.ID);
			parameters.Arguments.Add("IsEnabled", isEnabled ? 1 : 0);
			return this.LoadMany(connection, parameters);
		}
  }
}

