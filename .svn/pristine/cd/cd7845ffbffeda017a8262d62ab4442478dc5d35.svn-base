using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ServiceOfferManager : IServiceOfferManager
  {
    
    public List<ServiceOffer> Load()
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection);
    }

    public List<ServiceOffer> Load(IConnectionInfo connection)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection);
    }

    public List<ServiceOffer> Load(ISqlConnectionInfo connection)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      return this.LoadMany(connection, parameters);
    }



		public List<ServiceOffer> Load(Service service)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, service);
		}

		public List<ServiceOffer> Load(IConnectionInfo connection, Service service)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, service);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, service);
		}

		public List<ServiceOffer> Load(ISqlConnectionInfo connection, Service service)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[so].ServiceID = @ServiceID";
			parameters.Arguments.Add("ServiceID", service.ID);
			return this.LoadMany(connection, parameters);
		}

    public ServiceOffer Load(Guid behaviorModelGuid)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, behaviorModelGuid);
    }

    public ServiceOffer Load(IConnectionInfo connection, Guid behaviorModelGuid)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, behaviorModelGuid);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, behaviorModelGuid);
    }

    public ServiceOffer Load(ISqlConnectionInfo connection, Guid behaviorModelGuid)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[so_pc_bm].ExternalBehaviorModelGuid = @ExternalBehaviorModelGuid";
      parameters.Arguments.Add("ExternalBehaviorModelGuid", behaviorModelGuid);
      return this.Load(connection, parameters);
    }

    public ServiceOffer Load(BehaviorModel behaviorModel)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, behaviorModel);
    }

    public ServiceOffer Load(IConnectionInfo connection, BehaviorModel behaviorModel)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, behaviorModel);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, behaviorModel);
    }

    public ServiceOffer Load(ISqlConnectionInfo connection, BehaviorModel behaviorModel)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[so_pc].BehaviorModelID = @BehaviorModelID";
      parameters.Arguments.Add("BehaviorModelID", behaviorModel.ID);
      return this.Load(connection, parameters);
    }
  }
}

