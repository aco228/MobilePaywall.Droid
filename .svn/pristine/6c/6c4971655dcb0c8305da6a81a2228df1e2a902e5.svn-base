using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(TemplateServiceNote))] 
  public partial class TemplateServiceNoteManager : MobilePaywall.Data.Sql.SqlManagerBase<TemplateServiceNote>, ITemplateServiceNoteManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override TemplateServiceNote LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							TemplateServiceNoteTable.GetColumnNames("[tsn]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[tsn_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[tsn_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[tsn_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[tsn_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[tsn_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[tsn_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[tsn_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tsn_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[tsn_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[tsn_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[tsn_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[tsn_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[tsn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[tsn_c_ct]") : string.Empty) + 
					" FROM [core].[TemplateServiceNote] AS [tsn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [tsn_s] ON [tsn].[ServiceID] = [tsn_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [tsn_s_a] ON [tsn_s].[ApplicationID] = [tsn_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [tsn_s_p] ON [tsn_s].[ProductID] = [tsn_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [tsn_s_m] ON [tsn_s].[MerchantID] = [tsn_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [tsn_s_st] ON [tsn_s].[ServiceTypeID] = [tsn_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [tsn_s_ust] ON [tsn_s].[UserSessionTypeID] = [tsn_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [tsn_s_c] ON [tsn_s].[FallbackCountryID] = [tsn_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tsn_s_l] ON [tsn_s].[FallbackLanguageID] = [tsn_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [tsn_s_ar] ON [tsn_s].[FallbackAgeRatingID] = [tsn_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [tsn_s_sc] ON [tsn_s].[ServiceConfigurationID] = [tsn_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [tsn_s_bm] ON [tsn_s].[BusinessModelID] = [tsn_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [tsn_s_t] ON [tsn_s].[TemplateID] = [tsn_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [tsn_c] ON [tsn].[ClientID] = [tsn_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [tsn_c_ct] ON [tsn_c].[ClientTypeID] = [tsn_c_ct].[ClientTypeID] ";
				sqlCmdText += "WHERE [tsn].[TemplateServiceNoteID] = @TemplateServiceNoteID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TemplateServiceNoteID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "loadinternal", "notfound"), "TemplateServiceNote could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateServiceNoteTable tsnTable = new TemplateServiceNoteTable(query);
				ServiceTable tsn_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable tsn_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable tsn_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable tsn_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable tsn_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable tsn_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable tsn_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable tsn_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable tsn_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable tsn_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable tsn_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable tsn_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ClientTable tsn_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable tsn_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        
				Application tsn_s_aObject = (this.Depth > 1) ? tsn_s_aTable.CreateInstance() : null;
				Product tsn_s_pObject = (this.Depth > 1) ? tsn_s_pTable.CreateInstance() : null;
				Merchant tsn_s_mObject = (this.Depth > 1) ? tsn_s_mTable.CreateInstance() : null;
				ServiceType tsn_s_stObject = (this.Depth > 1) ? tsn_s_stTable.CreateInstance() : null;
				UserSessionType tsn_s_ustObject = (this.Depth > 1) ? tsn_s_ustTable.CreateInstance() : null;
				Country tsn_s_cObject = (this.Depth > 1) ? tsn_s_cTable.CreateInstance() : null;
				Language tsn_s_lObject = (this.Depth > 1) ? tsn_s_lTable.CreateInstance() : null;
				AgeRating tsn_s_arObject = (this.Depth > 1) ? tsn_s_arTable.CreateInstance() : null;
				ServiceConfiguration tsn_s_scObject = (this.Depth > 1) ? tsn_s_scTable.CreateInstance() : null;
				BusinessModel tsn_s_bmObject = (this.Depth > 1) ? tsn_s_bmTable.CreateInstance() : null;
				Template tsn_s_tObject = (this.Depth > 1) ? tsn_s_tTable.CreateInstance() : null;
				Service tsn_sObject = (this.Depth > 0) ? tsn_sTable.CreateInstance(tsn_s_aObject, tsn_s_pObject, tsn_s_mObject, tsn_s_stObject, tsn_s_ustObject, tsn_s_cObject, tsn_s_lObject, tsn_s_arObject, tsn_s_scObject, tsn_s_bmObject, tsn_s_tObject) : null;
				ClientType tsn_c_ctObject = (this.Depth > 1) ? tsn_c_ctTable.CreateInstance() : null;
				Client tsn_cObject = (this.Depth > 0) ? tsn_cTable.CreateInstance(tsn_c_ctObject) : null;
				TemplateServiceNote tsnObject = tsnTable.CreateInstance(tsn_sObject, tsn_cObject);
				sqlReader.Close();

				return tsnObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "loadinternal", "exception"), "TemplateServiceNote could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateServiceNote", "Exception while loading TemplateServiceNote object from database. See inner exception for details.", ex);
      }
    }

    public TemplateServiceNote Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TemplateServiceNoteTable.GetColumnNames("[tsn]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[tsn_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[tsn_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[tsn_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[tsn_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[tsn_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[tsn_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[tsn_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tsn_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[tsn_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[tsn_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[tsn_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[tsn_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[tsn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[tsn_c_ct]") : string.Empty) +  
					" FROM [core].[TemplateServiceNote] AS [tsn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [tsn_s] ON [tsn].[ServiceID] = [tsn_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [tsn_s_a] ON [tsn_s].[ApplicationID] = [tsn_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [tsn_s_p] ON [tsn_s].[ProductID] = [tsn_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [tsn_s_m] ON [tsn_s].[MerchantID] = [tsn_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [tsn_s_st] ON [tsn_s].[ServiceTypeID] = [tsn_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [tsn_s_ust] ON [tsn_s].[UserSessionTypeID] = [tsn_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [tsn_s_c] ON [tsn_s].[FallbackCountryID] = [tsn_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tsn_s_l] ON [tsn_s].[FallbackLanguageID] = [tsn_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [tsn_s_ar] ON [tsn_s].[FallbackAgeRatingID] = [tsn_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [tsn_s_sc] ON [tsn_s].[ServiceConfigurationID] = [tsn_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [tsn_s_bm] ON [tsn_s].[BusinessModelID] = [tsn_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [tsn_s_t] ON [tsn_s].[TemplateID] = [tsn_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [tsn_c] ON [tsn].[ClientID] = [tsn_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [tsn_c_ct] ON [tsn_c].[ClientTypeID] = [tsn_c_ct].[ClientTypeID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "customload", "notfound"), "TemplateServiceNote could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateServiceNoteTable tsnTable = new TemplateServiceNoteTable(query);
				ServiceTable tsn_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable tsn_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable tsn_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable tsn_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable tsn_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable tsn_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable tsn_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable tsn_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable tsn_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable tsn_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable tsn_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable tsn_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ClientTable tsn_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable tsn_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        
				Application tsn_s_aObject = (this.Depth > 1) ? tsn_s_aTable.CreateInstance() : null;
				Product tsn_s_pObject = (this.Depth > 1) ? tsn_s_pTable.CreateInstance() : null;
				Merchant tsn_s_mObject = (this.Depth > 1) ? tsn_s_mTable.CreateInstance() : null;
				ServiceType tsn_s_stObject = (this.Depth > 1) ? tsn_s_stTable.CreateInstance() : null;
				UserSessionType tsn_s_ustObject = (this.Depth > 1) ? tsn_s_ustTable.CreateInstance() : null;
				Country tsn_s_cObject = (this.Depth > 1) ? tsn_s_cTable.CreateInstance() : null;
				Language tsn_s_lObject = (this.Depth > 1) ? tsn_s_lTable.CreateInstance() : null;
				AgeRating tsn_s_arObject = (this.Depth > 1) ? tsn_s_arTable.CreateInstance() : null;
				ServiceConfiguration tsn_s_scObject = (this.Depth > 1) ? tsn_s_scTable.CreateInstance() : null;
				BusinessModel tsn_s_bmObject = (this.Depth > 1) ? tsn_s_bmTable.CreateInstance() : null;
				Template tsn_s_tObject = (this.Depth > 1) ? tsn_s_tTable.CreateInstance() : null;
				Service tsn_sObject = (this.Depth > 0) ? tsn_sTable.CreateInstance(tsn_s_aObject, tsn_s_pObject, tsn_s_mObject, tsn_s_stObject, tsn_s_ustObject, tsn_s_cObject, tsn_s_lObject, tsn_s_arObject, tsn_s_scObject, tsn_s_bmObject, tsn_s_tObject) : null;
				ClientType tsn_c_ctObject = (this.Depth > 1) ? tsn_c_ctTable.CreateInstance() : null;
				Client tsn_cObject = (this.Depth > 0) ? tsn_cTable.CreateInstance(tsn_c_ctObject) : null;
				TemplateServiceNote tsnObject = tsnTable.CreateInstance(tsn_sObject, tsn_cObject);
				sqlReader.Close();

				return tsnObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "customload", "exception"), "TemplateServiceNote could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateServiceNote", "Exception while loading (custom/single) TemplateServiceNote object from database. See inner exception for details.", ex);
      }
    }

    public List<TemplateServiceNote> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TemplateServiceNoteTable.GetColumnNames("[tsn]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[tsn_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[tsn_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[tsn_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[tsn_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[tsn_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[tsn_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[tsn_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tsn_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[tsn_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[tsn_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[tsn_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[tsn_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[tsn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[tsn_c_ct]") : string.Empty) +  
					" FROM [core].[TemplateServiceNote] AS [tsn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [tsn_s] ON [tsn].[ServiceID] = [tsn_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [tsn_s_a] ON [tsn_s].[ApplicationID] = [tsn_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [tsn_s_p] ON [tsn_s].[ProductID] = [tsn_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [tsn_s_m] ON [tsn_s].[MerchantID] = [tsn_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [tsn_s_st] ON [tsn_s].[ServiceTypeID] = [tsn_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [tsn_s_ust] ON [tsn_s].[UserSessionTypeID] = [tsn_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [tsn_s_c] ON [tsn_s].[FallbackCountryID] = [tsn_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tsn_s_l] ON [tsn_s].[FallbackLanguageID] = [tsn_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [tsn_s_ar] ON [tsn_s].[FallbackAgeRatingID] = [tsn_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [tsn_s_sc] ON [tsn_s].[ServiceConfigurationID] = [tsn_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [tsn_s_bm] ON [tsn_s].[BusinessModelID] = [tsn_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [tsn_s_t] ON [tsn_s].[TemplateID] = [tsn_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [tsn_c] ON [tsn].[ClientID] = [tsn_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [tsn_c_ct] ON [tsn_c].[ClientTypeID] = [tsn_c_ct].[ClientTypeID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "customloadmany", "notfound"), "TemplateServiceNote list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<TemplateServiceNote>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateServiceNoteTable tsnTable = new TemplateServiceNoteTable(query);
				ServiceTable tsn_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable tsn_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable tsn_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable tsn_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable tsn_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable tsn_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable tsn_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable tsn_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable tsn_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable tsn_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable tsn_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable tsn_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ClientTable tsn_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable tsn_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;

        List<TemplateServiceNote> result = new List<TemplateServiceNote>();
        do
        {
          
					Application tsn_s_aObject = (this.Depth > 1) ? tsn_s_aTable.CreateInstance() : null;
					Product tsn_s_pObject = (this.Depth > 1) ? tsn_s_pTable.CreateInstance() : null;
					Merchant tsn_s_mObject = (this.Depth > 1) ? tsn_s_mTable.CreateInstance() : null;
					ServiceType tsn_s_stObject = (this.Depth > 1) ? tsn_s_stTable.CreateInstance() : null;
					UserSessionType tsn_s_ustObject = (this.Depth > 1) ? tsn_s_ustTable.CreateInstance() : null;
					Country tsn_s_cObject = (this.Depth > 1) ? tsn_s_cTable.CreateInstance() : null;
					Language tsn_s_lObject = (this.Depth > 1) ? tsn_s_lTable.CreateInstance() : null;
					AgeRating tsn_s_arObject = (this.Depth > 1) ? tsn_s_arTable.CreateInstance() : null;
					ServiceConfiguration tsn_s_scObject = (this.Depth > 1) ? tsn_s_scTable.CreateInstance() : null;
					BusinessModel tsn_s_bmObject = (this.Depth > 1) ? tsn_s_bmTable.CreateInstance() : null;
					Template tsn_s_tObject = (this.Depth > 1) ? tsn_s_tTable.CreateInstance() : null;
					Service tsn_sObject = (this.Depth > 0) ? tsn_sTable.CreateInstance(tsn_s_aObject, tsn_s_pObject, tsn_s_mObject, tsn_s_stObject, tsn_s_ustObject, tsn_s_cObject, tsn_s_lObject, tsn_s_arObject, tsn_s_scObject, tsn_s_bmObject, tsn_s_tObject) : null;
					ClientType tsn_c_ctObject = (this.Depth > 1) ? tsn_c_ctTable.CreateInstance() : null;
					Client tsn_cObject = (this.Depth > 0) ? tsn_cTable.CreateInstance(tsn_c_ctObject) : null;
					TemplateServiceNote tsnObject = (this.Depth > -1) ? tsnTable.CreateInstance(tsn_sObject, tsn_cObject) : null;
					result.Add(tsnObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "customloadmany", "exception"), "TemplateServiceNote list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateServiceNote", "Exception while loading (custom/many) TemplateServiceNote object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, TemplateServiceNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[TemplateServiceNote] ([ServiceID],[ClientID],[Text]) VALUES(@ServiceID,@ClientID,@Text); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@Text", data.Text).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "insert", "noprimarykey"), "TemplateServiceNote could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "TemplateServiceNote", "Exception while inserting TemplateServiceNote object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "insert", "exception"), "TemplateServiceNote could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "TemplateServiceNote", "Exception while inserting TemplateServiceNote object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, TemplateServiceNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[TemplateServiceNote] SET " +
												"[ServiceID] = @ServiceID, " + 
												"[ClientID] = @ClientID, " + 
												"[Text] = @Text, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [TemplateServiceNoteID] = @TemplateServiceNoteID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@Text", data.Text).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@TemplateServiceNoteID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "update", "norecord"), "TemplateServiceNote could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "TemplateServiceNote", "Exception while updating TemplateServiceNote object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "update", "morerecords"), "TemplateServiceNote was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "TemplateServiceNote", "Exception while updating TemplateServiceNote object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "update", "exception"), "TemplateServiceNote could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "TemplateServiceNote", "Exception while updating TemplateServiceNote object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, TemplateServiceNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[TemplateServiceNote] WHERE TemplateServiceNoteID = @TemplateServiceNoteID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TemplateServiceNoteID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "delete", "norecord"), "TemplateServiceNote could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "TemplateServiceNote", "Exception while deleting TemplateServiceNote object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tsn", "delete", "exception"), "TemplateServiceNote could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "TemplateServiceNote", "Exception while deleting TemplateServiceNote object from database. See inner exception for details.", ex);
      }
    }
  }
}

