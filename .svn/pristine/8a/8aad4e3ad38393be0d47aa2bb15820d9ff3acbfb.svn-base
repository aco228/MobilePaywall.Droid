using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class VideoCodecManager : IVideoCodecManager
  {
		
		public VideoCodec Load(string extension)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, extension);
		}

		public VideoCodec Load(IConnectionInfo connection, string extension)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, extension);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, extension);
		}

		public VideoCodec Load(ISqlConnectionInfo connection, string extension)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[vc].Extension = @Extension";
			parameters.Arguments.Add("Extension", extension);
			return this.Load(connection, parameters);
		}



		public T Load<T>(string value, VideoCodecIdentifier identifier)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load<T>(connection, value, identifier);
		}

		public T Load<T>(IConnectionInfo connection, string value, VideoCodecIdentifier identifier)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load<T>(sqlConnection, value, identifier);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load<T>(sqlConnection, value, identifier);
		}

		public T Load<T>(ISqlConnectionInfo connection, string value, VideoCodecIdentifier identifier)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = string.Format("[vc].{0} = @Value", identifier.ToString());
			parameters.Arguments.Add("Value", value);
			if (typeof(T).Equals(typeof(List<VideoCodecIdentifier>)))
				return (T)Convert.ChangeType(this.LoadMany(connection, parameters), typeof(T));
			else
				return (T)Convert.ChangeType(this.Load(connection, parameters), typeof(T));
		}

  }
}

