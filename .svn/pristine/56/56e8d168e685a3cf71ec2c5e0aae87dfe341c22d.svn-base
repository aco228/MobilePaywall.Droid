using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PaymentCallbackTable : TableBase<PaymentCallback>
  {
    public static string GetColumnNames()
    {
      return TableBase<PaymentCallback>.GetColumnNames(string.Empty, PaymentCallbackTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<PaymentCallback>.GetColumnNames(tablePrefix, PaymentCallbackTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PaymentCallbackID = new ColumnDescription("PaymentCallbackID", 0, typeof(int));
			public static readonly ColumnDescription PaymentCallbackGuid = new ColumnDescription("PaymentCallbackGuid", 1, typeof(Guid));
			public static readonly ColumnDescription PaymentRequestID = new ColumnDescription("PaymentRequestID", 2, typeof(int));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 3, typeof(int));
			public static readonly ColumnDescription IsCompleted = new ColumnDescription("IsCompleted", 4, typeof(bool));
			public static readonly ColumnDescription ValidTo = new ColumnDescription("ValidTo", 5, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 6, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PaymentCallbackID,
				PaymentCallbackGuid,
				PaymentRequestID,
				PaymentID,
				IsCompleted,
				ValidTo,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PaymentCallbackTable(SqlQuery query) : base(query) { }
    public PaymentCallbackTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PaymentCallbackID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentCallbackID)); } }
		public Guid PaymentCallbackGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.PaymentCallbackGuid)); } }
		public int PaymentRequestID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentRequestID)); } }
		
		public int? PaymentID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public bool IsCompleted { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsCompleted)); } }
		public DateTime ValidTo { get { return this.Reader.GetDateTime(this.GetIndex(Columns.ValidTo)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public PaymentCallback CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new PaymentCallback(this.PaymentCallbackID,this.PaymentCallbackGuid,new PaymentRequest(this.PaymentRequestID), (PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentCallback CreateInstance(Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new PaymentCallback(this.PaymentCallbackID,this.PaymentCallbackGuid,new PaymentRequest(this.PaymentRequestID), payment ?? (this.PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentCallback CreateInstance(PaymentRequest paymentRequest)  
		{ 
			if (!this.HasData) return null;
			return new PaymentCallback(this.PaymentCallbackID,this.PaymentCallbackGuid,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), (PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentCallback CreateInstance(PaymentRequest paymentRequest, Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new PaymentCallback(this.PaymentCallbackID,this.PaymentCallbackGuid,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), payment ?? (this.PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.IsCompleted,this.ValidTo,this.Updated,this.Created); 
		}
		

  }
}

