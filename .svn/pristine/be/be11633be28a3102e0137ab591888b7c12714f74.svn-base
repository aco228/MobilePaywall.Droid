using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class VideoContentDataTable : TableBase<VideoContentData>
  {
    public static string GetColumnNames()
    {
      return TableBase<VideoContentData>.GetColumnNames(string.Empty, VideoContentDataTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<VideoContentData>.GetColumnNames(tablePrefix, VideoContentDataTable.Columns.Item);
    }

		public static string GetColumnNames(string tablePrefix, ColumnSelectMode selectMode, List<ColumnDescription> columns)
		{
			if (selectMode == ColumnSelectMode.Include)
			{
				return TableBase<VideoContentData>.GetColumnNames(tablePrefix, columns.ToArray(), false);
			}
			else if (selectMode == ColumnSelectMode.Exclude)
			{
				return TableBase<VideoContentData>.GetColumnNames(tablePrefix, 
																													(from ColumnDescription cd in VideoContentDataTable.Columns.Item
																													 select !columns.Contains(cd) ? cd : new ColumnDescription("NULL", cd.Index, cd.Type)).ToArray(), 
																													false);
			}
			else
			{
				return TableBase<VideoContentData>.GetColumnNames(tablePrefix, VideoContentDataTable.Columns.Item);
			}
		}

    public class Columns
    {
		
			public static readonly ColumnDescription VideoContentDataID = new ColumnDescription("VideoContentDataID", 0, typeof(int));
			public static readonly ColumnDescription VideoContentID = new ColumnDescription("VideoContentID", 1, typeof(int));
			public static readonly ColumnDescription VideoConversionProfileEntryID = new ColumnDescription("VideoConversionProfileEntryID", 2, typeof(int));
			public static readonly ColumnDescription IsFullVideo = new ColumnDescription("IsFullVideo", 3, typeof(bool));
			public static readonly ColumnDescription IsOriginal = new ColumnDescription("IsOriginal", 4, typeof(bool));
			public static readonly ColumnDescription Duration = new ColumnDescription("Duration", 5, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 6, typeof(byte[]));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				VideoContentDataID,
				VideoContentID,
				VideoConversionProfileEntryID,
				IsFullVideo,
				IsOriginal,
				Duration,
				Data,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public VideoContentDataTable(SqlQuery query) : base(query) { }
    public VideoContentDataTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int VideoContentDataID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoContentDataID)); } }
		public int VideoContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoContentID)); } }
		public int VideoConversionProfileEntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoConversionProfileEntryID)); } }
		public bool IsFullVideo { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsFullVideo)); } }
		public bool IsOriginal { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsOriginal)); } }
		public int Duration { get { return this.Reader.GetInt32(this.GetIndex(Columns.Duration)); } }
		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public VideoContentData CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new VideoContentData(this.VideoContentDataID,new VideoContent(this.VideoContentID), new VideoConversionProfileEntry(this.VideoConversionProfileEntryID), this.IsFullVideo,this.IsOriginal,this.Duration,this.Data,this.Updated,this.Created); 
		}
		public VideoContentData CreateInstance(VideoContent videoContent)  
		{ 
			if (!this.HasData) return null;
			return new VideoContentData(this.VideoContentDataID,videoContent ?? new VideoContent(this.VideoContentID), new VideoConversionProfileEntry(this.VideoConversionProfileEntryID), this.IsFullVideo,this.IsOriginal,this.Duration,this.Data,this.Updated,this.Created); 
		}
		public VideoContentData CreateInstance(VideoConversionProfileEntry videoConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new VideoContentData(this.VideoContentDataID,new VideoContent(this.VideoContentID), videoConversionProfileEntry ?? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID), this.IsFullVideo,this.IsOriginal,this.Duration,this.Data,this.Updated,this.Created); 
		}
		public VideoContentData CreateInstance(VideoContent videoContent, VideoConversionProfileEntry videoConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new VideoContentData(this.VideoContentDataID,videoContent ?? new VideoContent(this.VideoContentID), videoConversionProfileEntry ?? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID), this.IsFullVideo,this.IsOriginal,this.Duration,this.Data,this.Updated,this.Created); 
		}
		

  }
}

