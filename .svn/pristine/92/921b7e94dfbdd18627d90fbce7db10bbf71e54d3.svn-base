using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(AuctionCreditPolicy))] 
  public partial class AuctionCreditPolicyManager : MobilePaywall.Data.Sql.SqlManagerBase<AuctionCreditPolicy>, IAuctionCreditPolicyManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override AuctionCreditPolicy LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							AuctionCreditPolicyTable.GetColumnNames("[acp]") + 
							(this.Depth > 0 ? "," + ServiceOfferTable.GetColumnNames("[acp_so]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[acp_so_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelEntryTable.GetColumnNames("[acp_so_bme]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentConfigurationTable.GetColumnNames("[acp_so_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentAccessPolicyTable.GetColumnNames("[acp_so_cap]") : string.Empty) + 
					" FROM [core].[AuctionCreditPolicy] AS [acp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ServiceOffer] AS [acp_so] ON [acp].[ServiceOfferID] = [acp_so].[ServiceOfferID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [acp_so_s] ON [acp_so].[ServiceID] = [acp_so_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModelEntry] AS [acp_so_bme] ON [acp_so].[BusinessModelEntryID] = [acp_so_bme].[BusinessModelEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [acp_so_pc] ON [acp_so].[PaymentConfigurationID] = [acp_so_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentAccessPolicy] AS [acp_so_cap] ON [acp_so].[ContentAccessPolicyID] = [acp_so_cap].[ContentAccessPolicyID] ";
				sqlCmdText += "WHERE [acp].[AuctionCreditPolicyID] = @AuctionCreditPolicyID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@AuctionCreditPolicyID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "loadinternal", "notfound"), "AuctionCreditPolicy could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				AuctionCreditPolicyTable acpTable = new AuctionCreditPolicyTable(query);
				ServiceOfferTable acp_soTable = (this.Depth > 0) ? new ServiceOfferTable(query) : null;
				ServiceTable acp_so_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				BusinessModelEntryTable acp_so_bmeTable = (this.Depth > 1) ? new BusinessModelEntryTable(query) : null;
				PaymentConfigurationTable acp_so_pcTable = (this.Depth > 1) ? new PaymentConfigurationTable(query) : null;
				ContentAccessPolicyTable acp_so_capTable = (this.Depth > 1) ? new ContentAccessPolicyTable(query) : null;

        
				Service acp_so_sObject = (this.Depth > 1) ? acp_so_sTable.CreateInstance() : null;
				BusinessModelEntry acp_so_bmeObject = (this.Depth > 1) ? acp_so_bmeTable.CreateInstance() : null;
				PaymentConfiguration acp_so_pcObject = (this.Depth > 1) ? acp_so_pcTable.CreateInstance() : null;
				ContentAccessPolicy acp_so_capObject = (this.Depth > 1) ? acp_so_capTable.CreateInstance() : null;
				ServiceOffer acp_soObject = (this.Depth > 0) ? acp_soTable.CreateInstance(acp_so_sObject, acp_so_bmeObject, acp_so_pcObject, acp_so_capObject) : null;
				AuctionCreditPolicy acpObject = acpTable.CreateInstance(acp_soObject);
				sqlReader.Close();

				return acpObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "loadinternal", "exception"), "AuctionCreditPolicy could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "AuctionCreditPolicy", "Exception while loading AuctionCreditPolicy object from database. See inner exception for details.", ex);
      }
    }

    public AuctionCreditPolicy Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							AuctionCreditPolicyTable.GetColumnNames("[acp]") + 
							(this.Depth > 0 ? "," + ServiceOfferTable.GetColumnNames("[acp_so]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[acp_so_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelEntryTable.GetColumnNames("[acp_so_bme]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentConfigurationTable.GetColumnNames("[acp_so_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentAccessPolicyTable.GetColumnNames("[acp_so_cap]") : string.Empty) +  
					" FROM [core].[AuctionCreditPolicy] AS [acp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ServiceOffer] AS [acp_so] ON [acp].[ServiceOfferID] = [acp_so].[ServiceOfferID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [acp_so_s] ON [acp_so].[ServiceID] = [acp_so_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModelEntry] AS [acp_so_bme] ON [acp_so].[BusinessModelEntryID] = [acp_so_bme].[BusinessModelEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [acp_so_pc] ON [acp_so].[PaymentConfigurationID] = [acp_so_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentAccessPolicy] AS [acp_so_cap] ON [acp_so].[ContentAccessPolicyID] = [acp_so_cap].[ContentAccessPolicyID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "customload", "notfound"), "AuctionCreditPolicy could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				AuctionCreditPolicyTable acpTable = new AuctionCreditPolicyTable(query);
				ServiceOfferTable acp_soTable = (this.Depth > 0) ? new ServiceOfferTable(query) : null;
				ServiceTable acp_so_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				BusinessModelEntryTable acp_so_bmeTable = (this.Depth > 1) ? new BusinessModelEntryTable(query) : null;
				PaymentConfigurationTable acp_so_pcTable = (this.Depth > 1) ? new PaymentConfigurationTable(query) : null;
				ContentAccessPolicyTable acp_so_capTable = (this.Depth > 1) ? new ContentAccessPolicyTable(query) : null;

        
				Service acp_so_sObject = (this.Depth > 1) ? acp_so_sTable.CreateInstance() : null;
				BusinessModelEntry acp_so_bmeObject = (this.Depth > 1) ? acp_so_bmeTable.CreateInstance() : null;
				PaymentConfiguration acp_so_pcObject = (this.Depth > 1) ? acp_so_pcTable.CreateInstance() : null;
				ContentAccessPolicy acp_so_capObject = (this.Depth > 1) ? acp_so_capTable.CreateInstance() : null;
				ServiceOffer acp_soObject = (this.Depth > 0) ? acp_soTable.CreateInstance(acp_so_sObject, acp_so_bmeObject, acp_so_pcObject, acp_so_capObject) : null;
				AuctionCreditPolicy acpObject = acpTable.CreateInstance(acp_soObject);
				sqlReader.Close();

				return acpObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "customload", "exception"), "AuctionCreditPolicy could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "AuctionCreditPolicy", "Exception while loading (custom/single) AuctionCreditPolicy object from database. See inner exception for details.", ex);
      }
    }

    public List<AuctionCreditPolicy> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							AuctionCreditPolicyTable.GetColumnNames("[acp]") + 
							(this.Depth > 0 ? "," + ServiceOfferTable.GetColumnNames("[acp_so]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[acp_so_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelEntryTable.GetColumnNames("[acp_so_bme]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentConfigurationTable.GetColumnNames("[acp_so_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentAccessPolicyTable.GetColumnNames("[acp_so_cap]") : string.Empty) +  
					" FROM [core].[AuctionCreditPolicy] AS [acp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ServiceOffer] AS [acp_so] ON [acp].[ServiceOfferID] = [acp_so].[ServiceOfferID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [acp_so_s] ON [acp_so].[ServiceID] = [acp_so_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModelEntry] AS [acp_so_bme] ON [acp_so].[BusinessModelEntryID] = [acp_so_bme].[BusinessModelEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [acp_so_pc] ON [acp_so].[PaymentConfigurationID] = [acp_so_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentAccessPolicy] AS [acp_so_cap] ON [acp_so].[ContentAccessPolicyID] = [acp_so_cap].[ContentAccessPolicyID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "customloadmany", "notfound"), "AuctionCreditPolicy list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<AuctionCreditPolicy>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				AuctionCreditPolicyTable acpTable = new AuctionCreditPolicyTable(query);
				ServiceOfferTable acp_soTable = (this.Depth > 0) ? new ServiceOfferTable(query) : null;
				ServiceTable acp_so_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				BusinessModelEntryTable acp_so_bmeTable = (this.Depth > 1) ? new BusinessModelEntryTable(query) : null;
				PaymentConfigurationTable acp_so_pcTable = (this.Depth > 1) ? new PaymentConfigurationTable(query) : null;
				ContentAccessPolicyTable acp_so_capTable = (this.Depth > 1) ? new ContentAccessPolicyTable(query) : null;

        List<AuctionCreditPolicy> result = new List<AuctionCreditPolicy>();
        do
        {
          
					Service acp_so_sObject = (this.Depth > 1) ? acp_so_sTable.CreateInstance() : null;
					BusinessModelEntry acp_so_bmeObject = (this.Depth > 1) ? acp_so_bmeTable.CreateInstance() : null;
					PaymentConfiguration acp_so_pcObject = (this.Depth > 1) ? acp_so_pcTable.CreateInstance() : null;
					ContentAccessPolicy acp_so_capObject = (this.Depth > 1) ? acp_so_capTable.CreateInstance() : null;
					ServiceOffer acp_soObject = (this.Depth > 0) ? acp_soTable.CreateInstance(acp_so_sObject, acp_so_bmeObject, acp_so_pcObject, acp_so_capObject) : null;
					AuctionCreditPolicy acpObject = (this.Depth > -1) ? acpTable.CreateInstance(acp_soObject) : null;
					result.Add(acpObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "customloadmany", "exception"), "AuctionCreditPolicy list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "AuctionCreditPolicy", "Exception while loading (custom/many) AuctionCreditPolicy object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, AuctionCreditPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[AuctionCreditPolicy] ([ServiceOfferID],[Amount]) VALUES(@ServiceOfferID,@Amount); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceOfferID", data.ServiceOffer.ID);
				sqlCmd.Parameters.AddWithValue("@Amount", data.Amount).SqlDbType = SqlDbType.Int;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "insert", "noprimarykey"), "AuctionCreditPolicy could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "AuctionCreditPolicy", "Exception while inserting AuctionCreditPolicy object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "insert", "exception"), "AuctionCreditPolicy could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "AuctionCreditPolicy", "Exception while inserting AuctionCreditPolicy object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, AuctionCreditPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[AuctionCreditPolicy] SET " +
												"[ServiceOfferID] = @ServiceOfferID, " + 
												"[Amount] = @Amount, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [AuctionCreditPolicyID] = @AuctionCreditPolicyID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceOfferID", data.ServiceOffer.ID);
				sqlCmd.Parameters.AddWithValue("@Amount", data.Amount).SqlDbType = SqlDbType.Int;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@AuctionCreditPolicyID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "update", "norecord"), "AuctionCreditPolicy could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "AuctionCreditPolicy", "Exception while updating AuctionCreditPolicy object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "update", "morerecords"), "AuctionCreditPolicy was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "AuctionCreditPolicy", "Exception while updating AuctionCreditPolicy object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "update", "exception"), "AuctionCreditPolicy could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "AuctionCreditPolicy", "Exception while updating AuctionCreditPolicy object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, AuctionCreditPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[AuctionCreditPolicy] WHERE AuctionCreditPolicyID = @AuctionCreditPolicyID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@AuctionCreditPolicyID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "delete", "norecord"), "AuctionCreditPolicy could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "AuctionCreditPolicy", "Exception while deleting AuctionCreditPolicy object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("acp", "delete", "exception"), "AuctionCreditPolicy could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "AuctionCreditPolicy", "Exception while deleting AuctionCreditPolicy object from database. See inner exception for details.", ex);
      }
    }
  }
}

