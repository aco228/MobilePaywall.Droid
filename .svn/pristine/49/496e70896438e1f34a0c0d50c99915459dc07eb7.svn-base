using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class CategoryDetailTable : TableBase<CategoryDetail>
  {
    public static string GetColumnNames()
    {
      return TableBase<CategoryDetail>.GetColumnNames(string.Empty, CategoryDetailTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<CategoryDetail>.GetColumnNames(tablePrefix, CategoryDetailTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription CategoryDetailID = new ColumnDescription("CategoryDetailID", 0, typeof(int));
			public static readonly ColumnDescription CategoryID = new ColumnDescription("CategoryID", 1, typeof(int));
			public static readonly ColumnDescription LanguageID = new ColumnDescription("LanguageID", 2, typeof(int));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 3, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 4, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				CategoryDetailID,
				CategoryID,
				LanguageID,
				Title,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public CategoryDetailTable(SqlQuery query) : base(query) { }
    public CategoryDetailTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int CategoryDetailID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CategoryDetailID)); } }
		public int CategoryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CategoryID)); } }
		
		public int? LanguageID 
		{
			get
			{
				int index = this.GetIndex(Columns.LanguageID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public string Title { get { return this.Reader.GetString(this.GetIndex(Columns.Title)); } }
		public string Description { get { return this.Reader.GetString(this.GetIndex(Columns.Description)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public CategoryDetail CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new CategoryDetail(this.CategoryDetailID,new Category(this.CategoryID), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Title,this.Description,this.Updated,this.Created); 
		}
		public CategoryDetail CreateInstance(Category category)  
		{ 
			if (!this.HasData) return null;
			return new CategoryDetail(this.CategoryDetailID,category ?? new Category(this.CategoryID), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Title,this.Description,this.Updated,this.Created); 
		}
		public CategoryDetail CreateInstance(Language language)  
		{ 
			if (!this.HasData) return null;
			return new CategoryDetail(this.CategoryDetailID,new Category(this.CategoryID), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Title,this.Description,this.Updated,this.Created); 
		}
		public CategoryDetail CreateInstance(Category category, Language language)  
		{ 
			if (!this.HasData) return null;
			return new CategoryDetail(this.CategoryDetailID,category ?? new Category(this.CategoryID), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Title,this.Description,this.Updated,this.Created); 
		}
		

  }
}

