using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ServiceContentStorageMapManager : IServiceContentStorageMapManager
  {

      
      public List<ServiceContentStorageMap> Load(Service service)
      {
          using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
              return this.Load(connection, service);
      }

      public List<ServiceContentStorageMap> Load(IConnectionInfo connection, Service service)
      {
          ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
          if (sqlConnection != null)
              return this.Load(sqlConnection, service);
          using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
              return this.Load(sqlConnection, service);
      }

      public List<ServiceContentStorageMap> Load(ISqlConnectionInfo connection, Service service)
      {
          SqlQueryParameters parameters = new SqlQueryParameters();
          parameters.Where = "[scsm].ServiceID = @ServiceID";
          parameters.Arguments.Add("ServiceID", service.ID);
          return this.LoadMany(connection, parameters);
      }


      
      


      public List<ServiceContentStorageMap> Load(ContentStorage contentStorage)
      {
          using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
              return this.Load(connection, contentStorage);
      }

      public List<ServiceContentStorageMap> Load(IConnectionInfo connection, ContentStorage contentStorage)
      {
          ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
          if (sqlConnection != null)
              return this.Load(sqlConnection, contentStorage);
          using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
              return this.Load(sqlConnection, contentStorage);
      }

      public List<ServiceContentStorageMap> Load(ISqlConnectionInfo connection, ContentStorage contentStorage)
      {
          SqlQueryParameters parameters = new SqlQueryParameters();
          parameters.Where = "[scsm].ContentStorageID = @ContentStorageID";
          parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
          return this.LoadMany(connection, parameters);
      }



      


      public ServiceContentStorageMap Load(Service service, ContentStorage contentStorage)
      {
          using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
              return this.Load(connection, service, contentStorage);
      }

      public ServiceContentStorageMap Load(IConnectionInfo connection, Service service, ContentStorage contentStorage)
      {
          ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
          if (sqlConnection != null)
              return this.Load(sqlConnection, service, contentStorage);
          using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
              return this.Load(sqlConnection, service, contentStorage);
      }

      public ServiceContentStorageMap Load(ISqlConnectionInfo connection, Service service, ContentStorage contentStorage)
      {
          SqlQueryParameters parameters = new SqlQueryParameters();
          parameters.Where = "[scsm].ContentStorageID = @ContentStorageID AND [scsm].ServiceID = @ServiceID";
          parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
          parameters.Arguments.Add("ServiceID", service.ID);
          return this.Load(connection, parameters);
      }



  }
}

