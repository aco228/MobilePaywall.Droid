using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MobilePaywall.Importer
{
	public  class ImportRow
	{

		public static readonly int COLUMN_CONTENT_KEY = 0;
		public static readonly int COLUMN_CONTENT_GROUP = 1;
		public static readonly int COLUMN_CONTENT_TYPE = 2;
		public static readonly int COLUMN_CONTENT_STORAGE = 3;
		public static readonly int COLUMN_CATEGORIES = 4;
		public static readonly int COLUMN_SERVICE_NAME = 5;
		public static readonly int COLUMN_LANGUAGE_TWO_LETTERS = 6;
		public static readonly int COLUMN_TITLE = 7;
		public static readonly int COLUMN_DESCRIPTION = 8;
		public static readonly int COLUMN_RATING = 9;
		public static readonly int COLUMN_HTML_TITLE = 10;
		public static readonly int COLUMN_META_DESCRIPTION = 11;
		public static readonly int COLUMN_META_KEYWORDS = 12;
		public static readonly int COLUMNS_TOTAL = 13;


		public int LineNumber { get { return this._lineNum; } }

		public string ContentKey { get; set; }
		public int ContentGroupID { get; set; }
		public string ContentType { get; set; }
		public int ContentStorageID { get; set; }
		public string Categories { get; set; }
		public string ServiceName { get; set; }
		public string LanguageTwoLetters { get; set; }
		public string Title { get; set; }
		public string Description { get; set; }
		public decimal Rating { get; set; }
		public string HtmlTitle { get; set; }
		public string MetaDescription { get; set; }
		public string MetaKeywords { get; set; }

		private int _lineNum { get; set; }
		private string _erroMessage = string.Empty;
		private bool _isValid = true;

		public bool IsValid { get { return this._isValid; } }
		public string ErroMessage { get { return this._erroMessage; } }
		public string[] CategoriesArray
		{
			get 
			{
				return this.Categories.Split(',');
			}
		}


		public ImportRow(string line, int lineNum)
		{
			this._lineNum = lineNum;
			this.ParseInformations(line);
		}

		private void ParseInformations(string line)
		{
			string[] info = line.Split(';');
			if (info.Length != COLUMNS_TOTAL)
			{
				this._isValid = false;
				this._erroMessage = "Some of the informations are missing";
			}
			for (int i = 0; i < info.Length; i++)
			{
				if (i == COLUMN_CONTENT_KEY) this.ContentKey = info[i];
				else if (i == COLUMN_CONTENT_GROUP)
				{
					int contentGroupID = -1;
					if (!Int32.TryParse(info[i], out contentGroupID))
					{
						this._isValid = false;
						this._erroMessage = "Invalid Content Group ID value!";
					}
					this.ContentGroupID = contentGroupID;
				}
				else if (i == COLUMN_CONTENT_TYPE) this.ContentType = info[i];
				else if (i == COLUMN_CONTENT_STORAGE)
				{
					int contentStorageID = -1;
					if(!Int32.TryParse(info[i], out contentStorageID))
					{
						this._isValid = false;
						this._erroMessage = "Invalid Content Storage ID value!";
					}
					this.ContentStorageID = contentStorageID;
				}
				else if (i == COLUMN_CATEGORIES) this.Categories = info[i];
				else if (i == COLUMN_SERVICE_NAME) this.ServiceName = info[i];
				else if (i == COLUMN_LANGUAGE_TWO_LETTERS) this.LanguageTwoLetters = info[i];
				else if (i == COLUMN_TITLE) this.Title = info[i];
				else if (i == COLUMN_DESCRIPTION) this.Description = info[i];
				else if (i == COLUMN_RATING)
				{
					decimal _rating;
					if (!decimal.TryParse(info[i], NumberStyles.AllowDecimalPoint, System.Globalization.CultureInfo.InvariantCulture, out _rating))
					{
						this._isValid = false;
						this._erroMessage = "Invalid Rating value!";
					}
					this.Rating = _rating;
				}
				else if (i == COLUMN_HTML_TITLE) this.HtmlTitle = info[i];
				else if (i == COLUMN_META_DESCRIPTION) this.MetaDescription = info[i];
				else if (i == COLUMN_META_KEYWORDS) this.MetaKeywords = info[i];
			}

      if(this._isValid)
			  Revalidate();

		}


		public void Revalidate()
		{
			this._isValid = true;
			this._erroMessage = String.Empty;

      #region ContentKey

      if (!String.IsNullOrWhiteSpace(this.ContentKey))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid ContentKey value";
      }

      #endregion

      #region ContentGroup

      if (this.ContentGroupID != -1)
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid ContentGroup value";
      }

      #endregion

      #region ContentType

      if (!String.IsNullOrWhiteSpace(this.ContentType))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid ContentType value";
      }

      #endregion

      #region ContentStorage

      if (this.ContentStorageID != -1)
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid ContentStorage value";
      }

      #endregion

      #region Categories

      if (!String.IsNullOrWhiteSpace(this.Categories))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid Categories value";
      }

      #endregion

      #region ServiceName

      if (!String.IsNullOrWhiteSpace(this.ServiceName))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid ServiceName value";
      }

      #endregion

      #region LanguageTwoLetters

      if (!String.IsNullOrWhiteSpace(this.LanguageTwoLetters))
      {
        if (this.LanguageTwoLetters.Length != 2)
        {
          this._isValid = false;
          this._erroMessage = "Error with LanguageTwoLetters; Only 2 letters string allowed!";
        }
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid LanguageTwoLetters value";
      }

      #endregion

      #region Title

      if (!String.IsNullOrWhiteSpace(this.Title))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid Title value";
      }

      #endregion

      #region Description

      if (!String.IsNullOrWhiteSpace(this.Description))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid Description value";
      }

      #endregion

      #region Rating

      if (this.Rating != null)
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid Rating value";
      }

      #endregion

      #region HtmlTitle

      if (!String.IsNullOrWhiteSpace(this.HtmlTitle))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid HtmlTitle value";
      }

      #endregion

      #region MetaDescription

      if (!String.IsNullOrWhiteSpace(this.MetaDescription))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid MetaDescription value";
      }

      #endregion

      #region MetaKeywords

      if (!String.IsNullOrWhiteSpace(this.MetaKeywords))
      {
        // TODO validate value
      }
      else
      {
        this._isValid = false;
        this._erroMessage = "Invalid MetaKeywords value";
      }

      #endregion 
      

			// .... TODO validate other fields

		}


		public override string ToString()
		{
			return String.Format("{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12}",
				this.ContentKey,
				this.ContentGroupID,
				this.ContentType,
				this.ContentStorageID,
				this.Categories,
				this.ServiceName,
				this.LanguageTwoLetters,
				this.Title,
				this.Description,
				this.Rating,
				this.HtmlTitle,
				this.MetaDescription,
				this.MetaKeywords);
		}

	}
}
