using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IThumbnailConversionProfileEntryManager : IDataManager<ThumbnailConversionProfileEntry> 
  {
	

  }

  public partial class ThumbnailConversionProfileEntry : MobilePaywallObject<IThumbnailConversionProfileEntryManager> 
  {
		private ThumbnailConversionProfile _thumbnailConversionProfile;
		private VisualMediaDimensions _visualMediaDimensions;
		private ImageFormat _imageFormat;
		

		public ThumbnailConversionProfile ThumbnailConversionProfile 
		{
			get
			{
				if (this._thumbnailConversionProfile != null &&
						this._thumbnailConversionProfile.IsEmpty)
					if (this.ConnectionContext != null)
						this._thumbnailConversionProfile = ThumbnailConversionProfile.CreateManager().LazyLoad(this.ConnectionContext, this._thumbnailConversionProfile.ID) as ThumbnailConversionProfile;
					else
						this._thumbnailConversionProfile = ThumbnailConversionProfile.CreateManager().LazyLoad(this._thumbnailConversionProfile.ID) as ThumbnailConversionProfile;
				return this._thumbnailConversionProfile;
			}
			set { _thumbnailConversionProfile = value; }
		}

		public VisualMediaDimensions VisualMediaDimensions 
		{
			get
			{
				if (this._visualMediaDimensions != null &&
						this._visualMediaDimensions.IsEmpty)
					if (this.ConnectionContext != null)
						this._visualMediaDimensions = VisualMediaDimensions.CreateManager().LazyLoad(this.ConnectionContext, this._visualMediaDimensions.ID) as VisualMediaDimensions;
					else
						this._visualMediaDimensions = VisualMediaDimensions.CreateManager().LazyLoad(this._visualMediaDimensions.ID) as VisualMediaDimensions;
				return this._visualMediaDimensions;
			}
			set { _visualMediaDimensions = value; }
		}

		public ImageFormat ImageFormat 
		{
			get
			{
				if (this._imageFormat != null &&
						this._imageFormat.IsEmpty)
					if (this.ConnectionContext != null)
						this._imageFormat = ImageFormat.CreateManager().LazyLoad(this.ConnectionContext, this._imageFormat.ID) as ImageFormat;
					else
						this._imageFormat = ImageFormat.CreateManager().LazyLoad(this._imageFormat.ID) as ImageFormat;
				return this._imageFormat;
			}
			set { _imageFormat = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ThumbnailConversionProfileEntry()
    { 
    }

    public ThumbnailConversionProfileEntry(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ThumbnailConversionProfileEntry(int id,  ThumbnailConversionProfile thumbnailConversionProfile, VisualMediaDimensions visualMediaDimensions, ImageFormat imageFormat, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._thumbnailConversionProfile = thumbnailConversionProfile;
			this._visualMediaDimensions = visualMediaDimensions;
			this._imageFormat = imageFormat;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ThumbnailConversionProfileEntry(-1,  this.ThumbnailConversionProfile, this.VisualMediaDimensions, this.ImageFormat, DateTime.Now, DateTime.Now);
    }
  }
}

