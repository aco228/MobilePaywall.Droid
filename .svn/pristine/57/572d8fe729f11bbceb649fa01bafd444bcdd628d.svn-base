using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(QualityAssuranceReportScreenshot))] 
  public partial class QualityAssuranceReportScreenshotManager : MobilePaywall.Data.Sql.SqlManagerBase<QualityAssuranceReportScreenshot>, IQualityAssuranceReportScreenshotManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override QualityAssuranceReportScreenshot LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							QualityAssuranceReportScreenshotTable.GetColumnNames("[qars]") + 
							(this.Depth > 0 ? "," + QualityAssuranceReportTable.GetColumnNames("[qars_qar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[qars_qar_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[qars_qar_mo]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTable.GetColumnNames("[qars_qar_c]") : string.Empty) + 
					" FROM [merchant].[QualityAssuranceReportScreenshot] AS [qars] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[QualityAssuranceReport] AS [qars_qar] ON [qars].[QualityAssuranceReportID] = [qars_qar].[QualityAssuranceReportID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [qars_qar_s] ON [qars_qar].[ServiceID] = [qars_qar_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[MobileOperator] AS [qars_qar_mo] ON [qars_qar].[MobileOperatorID] = [qars_qar_mo].[MobileOperatorID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [qars_qar_c] ON [qars_qar].[CreatorID] = [qars_qar_c].[ClientID] ";
				sqlCmdText += "WHERE [qars].[QualityAssuranceReportScreenshotID] = @QualityAssuranceReportScreenshotID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@QualityAssuranceReportScreenshotID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "loadinternal", "notfound"), "QualityAssuranceReportScreenshot could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				QualityAssuranceReportScreenshotTable qarsTable = new QualityAssuranceReportScreenshotTable(query);
				QualityAssuranceReportTable qars_qarTable = (this.Depth > 0) ? new QualityAssuranceReportTable(query) : null;
				ServiceTable qars_qar_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				MobileOperatorTable qars_qar_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ClientTable qars_qar_cTable = (this.Depth > 1) ? new ClientTable(query) : null;

        
				Service qars_qar_sObject = (this.Depth > 1) ? qars_qar_sTable.CreateInstance() : null;
				MobileOperator qars_qar_moObject = (this.Depth > 1) ? qars_qar_moTable.CreateInstance() : null;
				Client qars_qar_cObject = (this.Depth > 1) ? qars_qar_cTable.CreateInstance() : null;
				QualityAssuranceReport qars_qarObject = (this.Depth > 0) ? qars_qarTable.CreateInstance(qars_qar_sObject, qars_qar_moObject, qars_qar_cObject) : null;
				QualityAssuranceReportScreenshot qarsObject = qarsTable.CreateInstance(qars_qarObject);
				sqlReader.Close();

				return qarsObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "loadinternal", "exception"), "QualityAssuranceReportScreenshot could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "QualityAssuranceReportScreenshot", "Exception while loading QualityAssuranceReportScreenshot object from database. See inner exception for details.", ex);
      }
    }

    public QualityAssuranceReportScreenshot Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							QualityAssuranceReportScreenshotTable.GetColumnNames("[qars]") + 
							(this.Depth > 0 ? "," + QualityAssuranceReportTable.GetColumnNames("[qars_qar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[qars_qar_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[qars_qar_mo]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTable.GetColumnNames("[qars_qar_c]") : string.Empty) +  
					" FROM [merchant].[QualityAssuranceReportScreenshot] AS [qars] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[QualityAssuranceReport] AS [qars_qar] ON [qars].[QualityAssuranceReportID] = [qars_qar].[QualityAssuranceReportID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [qars_qar_s] ON [qars_qar].[ServiceID] = [qars_qar_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[MobileOperator] AS [qars_qar_mo] ON [qars_qar].[MobileOperatorID] = [qars_qar_mo].[MobileOperatorID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [qars_qar_c] ON [qars_qar].[CreatorID] = [qars_qar_c].[ClientID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "customload", "notfound"), "QualityAssuranceReportScreenshot could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				QualityAssuranceReportScreenshotTable qarsTable = new QualityAssuranceReportScreenshotTable(query);
				QualityAssuranceReportTable qars_qarTable = (this.Depth > 0) ? new QualityAssuranceReportTable(query) : null;
				ServiceTable qars_qar_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				MobileOperatorTable qars_qar_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ClientTable qars_qar_cTable = (this.Depth > 1) ? new ClientTable(query) : null;

        
				Service qars_qar_sObject = (this.Depth > 1) ? qars_qar_sTable.CreateInstance() : null;
				MobileOperator qars_qar_moObject = (this.Depth > 1) ? qars_qar_moTable.CreateInstance() : null;
				Client qars_qar_cObject = (this.Depth > 1) ? qars_qar_cTable.CreateInstance() : null;
				QualityAssuranceReport qars_qarObject = (this.Depth > 0) ? qars_qarTable.CreateInstance(qars_qar_sObject, qars_qar_moObject, qars_qar_cObject) : null;
				QualityAssuranceReportScreenshot qarsObject = qarsTable.CreateInstance(qars_qarObject);
				sqlReader.Close();

				return qarsObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "customload", "exception"), "QualityAssuranceReportScreenshot could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "QualityAssuranceReportScreenshot", "Exception while loading (custom/single) QualityAssuranceReportScreenshot object from database. See inner exception for details.", ex);
      }
    }

    public List<QualityAssuranceReportScreenshot> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							QualityAssuranceReportScreenshotTable.GetColumnNames("[qars]") + 
							(this.Depth > 0 ? "," + QualityAssuranceReportTable.GetColumnNames("[qars_qar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[qars_qar_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[qars_qar_mo]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTable.GetColumnNames("[qars_qar_c]") : string.Empty) +  
					" FROM [merchant].[QualityAssuranceReportScreenshot] AS [qars] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [merchant].[QualityAssuranceReport] AS [qars_qar] ON [qars].[QualityAssuranceReportID] = [qars_qar].[QualityAssuranceReportID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [qars_qar_s] ON [qars_qar].[ServiceID] = [qars_qar_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[MobileOperator] AS [qars_qar_mo] ON [qars_qar].[MobileOperatorID] = [qars_qar_mo].[MobileOperatorID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [qars_qar_c] ON [qars_qar].[CreatorID] = [qars_qar_c].[ClientID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "customloadmany", "notfound"), "QualityAssuranceReportScreenshot list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<QualityAssuranceReportScreenshot>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				QualityAssuranceReportScreenshotTable qarsTable = new QualityAssuranceReportScreenshotTable(query);
				QualityAssuranceReportTable qars_qarTable = (this.Depth > 0) ? new QualityAssuranceReportTable(query) : null;
				ServiceTable qars_qar_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				MobileOperatorTable qars_qar_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;
				ClientTable qars_qar_cTable = (this.Depth > 1) ? new ClientTable(query) : null;

        List<QualityAssuranceReportScreenshot> result = new List<QualityAssuranceReportScreenshot>();
        do
        {
          
					Service qars_qar_sObject = (this.Depth > 1) ? qars_qar_sTable.CreateInstance() : null;
					MobileOperator qars_qar_moObject = (this.Depth > 1) ? qars_qar_moTable.CreateInstance() : null;
					Client qars_qar_cObject = (this.Depth > 1) ? qars_qar_cTable.CreateInstance() : null;
					QualityAssuranceReport qars_qarObject = (this.Depth > 0) ? qars_qarTable.CreateInstance(qars_qar_sObject, qars_qar_moObject, qars_qar_cObject) : null;
					QualityAssuranceReportScreenshot qarsObject = (this.Depth > -1) ? qarsTable.CreateInstance(qars_qarObject) : null;
					result.Add(qarsObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "customloadmany", "exception"), "QualityAssuranceReportScreenshot list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "QualityAssuranceReportScreenshot", "Exception while loading (custom/many) QualityAssuranceReportScreenshot object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, QualityAssuranceReportScreenshot data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [merchant].[QualityAssuranceReportScreenshot] ([QualityAssuranceReportID],[Title],[Url],[Remark],[HasError],[Data]) VALUES(@QualityAssuranceReportID,@Title,@Url,@Remark,@HasError,@Data); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@QualityAssuranceReportID", data.QualityAssuranceReport.ID);
				sqlCmd.Parameters.AddWithValue("@Title", data.Title).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Url", data.Url).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Remark", !string.IsNullOrEmpty(data.Remark) ? (object)data.Remark : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@HasError", data.HasError).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.VarBinary;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "insert", "noprimarykey"), "QualityAssuranceReportScreenshot could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "QualityAssuranceReportScreenshot", "Exception while inserting QualityAssuranceReportScreenshot object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "insert", "exception"), "QualityAssuranceReportScreenshot could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "QualityAssuranceReportScreenshot", "Exception while inserting QualityAssuranceReportScreenshot object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, QualityAssuranceReportScreenshot data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [merchant].[QualityAssuranceReportScreenshot] SET " +
												"[QualityAssuranceReportID] = @QualityAssuranceReportID, " + 
												"[Title] = @Title, " + 
												"[Url] = @Url, " + 
												"[Remark] = @Remark, " + 
												"[HasError] = @HasError, " + 
												"[Data] = @Data, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [QualityAssuranceReportScreenshotID] = @QualityAssuranceReportScreenshotID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@QualityAssuranceReportID", data.QualityAssuranceReport.ID);
				sqlCmd.Parameters.AddWithValue("@Title", data.Title).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Url", data.Url).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Remark", !string.IsNullOrEmpty(data.Remark) ? (object)data.Remark : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@HasError", data.HasError).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.VarBinary;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@QualityAssuranceReportScreenshotID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "update", "norecord"), "QualityAssuranceReportScreenshot could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "QualityAssuranceReportScreenshot", "Exception while updating QualityAssuranceReportScreenshot object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "update", "morerecords"), "QualityAssuranceReportScreenshot was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "QualityAssuranceReportScreenshot", "Exception while updating QualityAssuranceReportScreenshot object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "update", "exception"), "QualityAssuranceReportScreenshot could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "QualityAssuranceReportScreenshot", "Exception while updating QualityAssuranceReportScreenshot object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, QualityAssuranceReportScreenshot data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [merchant].[QualityAssuranceReportScreenshot] WHERE QualityAssuranceReportScreenshotID = @QualityAssuranceReportScreenshotID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@QualityAssuranceReportScreenshotID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "delete", "norecord"), "QualityAssuranceReportScreenshot could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "QualityAssuranceReportScreenshot", "Exception while deleting QualityAssuranceReportScreenshot object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("qars", "delete", "exception"), "QualityAssuranceReportScreenshot could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "QualityAssuranceReportScreenshot", "Exception while deleting QualityAssuranceReportScreenshot object from database. See inner exception for details.", ex);
      }
    }
  }
}

