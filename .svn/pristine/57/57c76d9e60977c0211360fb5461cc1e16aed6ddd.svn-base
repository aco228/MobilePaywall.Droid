using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class DeamonTaskResultTable : TableBase<DeamonTaskResult>
  {
    public static string GetColumnNames()
    {
      return TableBase<DeamonTaskResult>.GetColumnNames(string.Empty, DeamonTaskResultTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<DeamonTaskResult>.GetColumnNames(tablePrefix, DeamonTaskResultTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription DeamonTaskResultID = new ColumnDescription("DeamonTaskResultID", 0, typeof(int));
			public static readonly ColumnDescription DeamonTaskID = new ColumnDescription("DeamonTaskID", 1, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 2, typeof(string));
			public static readonly ColumnDescription Started = new ColumnDescription("Started", 3, typeof(DateTime));
			public static readonly ColumnDescription Ended = new ColumnDescription("Ended", 4, typeof(DateTime));
			public static readonly ColumnDescription HasFatal = new ColumnDescription("HasFatal", 5, typeof(bool));
			public static readonly ColumnDescription IsSuccessful = new ColumnDescription("IsSuccessful", 6, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				DeamonTaskResultID,
				DeamonTaskID,
				Data,
				Started,
				Ended,
				HasFatal,
				IsSuccessful,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public DeamonTaskResultTable(SqlQuery query) : base(query) { }
    public DeamonTaskResultTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int DeamonTaskResultID { get { return this.Reader.GetInt32(this.GetIndex(Columns.DeamonTaskResultID)); } }
		public int DeamonTaskID { get { return this.Reader.GetInt32(this.GetIndex(Columns.DeamonTaskID)); } }
		public string Data { get { return this.Reader.GetString(this.GetIndex(Columns.Data)); } }
		public DateTime Started { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Started)); } }
		
		public DateTime? Ended 
		{
			get
			{
				int index = this.GetIndex(Columns.Ended);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		public bool HasFatal { get { return this.Reader.GetBoolean(this.GetIndex(Columns.HasFatal)); } }
		public bool IsSuccessful { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsSuccessful)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public DeamonTaskResult CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new DeamonTaskResult(this.DeamonTaskResultID,new DeamonTask(this.DeamonTaskID), this.Data,this.Started,this.Ended,this.HasFatal,this.IsSuccessful,this.Updated,this.Created); 
		}
		public DeamonTaskResult CreateInstance(DeamonTask deamonTask)  
		{ 
			if (!this.HasData) return null;
			return new DeamonTaskResult(this.DeamonTaskResultID,deamonTask ?? new DeamonTask(this.DeamonTaskID), this.Data,this.Started,this.Ended,this.HasFatal,this.IsSuccessful,this.Updated,this.Created); 
		}
		

  }
}

