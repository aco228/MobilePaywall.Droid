using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IServicePriceManager : IDataManager<ServicePrice> 
  {
	

  }

  public partial class ServicePrice : MobilePaywallObject<IServicePriceManager> 
  {
		private Service _service;
		private ServiceOffer _serviceOffer;
		private MobileOperator _mobileOperator;
		private Currency _currency;
		private decimal _gross = 0;
		private decimal? _payout = 0;
		private DateTime _validFrom = DateTime.MinValue;
		private DateTime? _validTo = DateTime.MinValue;
		

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public ServiceOffer ServiceOffer 
		{
			get
			{
				if (this._serviceOffer != null &&
						this._serviceOffer.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this.ConnectionContext, this._serviceOffer.ID) as ServiceOffer;
					else
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this._serviceOffer.ID) as ServiceOffer;
				return this._serviceOffer;
			}
			set { _serviceOffer = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public Currency Currency 
		{
			get
			{
				if (this._currency != null &&
						this._currency.IsEmpty)
					if (this.ConnectionContext != null)
						this._currency = Currency.CreateManager().LazyLoad(this.ConnectionContext, this._currency.ID) as Currency;
					else
						this._currency = Currency.CreateManager().LazyLoad(this._currency.ID) as Currency;
				return this._currency;
			}
			set { _currency = value; }
		}

		public decimal Gross { get { return this._gross; } set { this._gross = value;} }
		public decimal? Payout { get { return this._payout; } set { this._payout = value;} }
		public DateTime ValidFrom { get { return this._validFrom; } set { this._validFrom = value;} }
		public DateTime? ValidTo { get { return this._validTo; } set { this._validTo = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ServicePrice()
    { 
    }

    public ServicePrice(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ServicePrice(int id,  Service service, ServiceOffer serviceOffer, MobileOperator mobileOperator, Currency currency, decimal gross, decimal? payout, DateTime validFrom, DateTime? validTo, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._service = service;
			this._serviceOffer = serviceOffer;
			this._mobileOperator = mobileOperator;
			this._currency = currency;
			this._gross = gross;
			this._payout = payout;
			this._validFrom = validFrom;
			this._validTo = validTo;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ServicePrice(-1,  this.Service, this.ServiceOffer, this.MobileOperator, this.Currency,this.Gross,this.Payout,this.ValidFrom,this.ValidTo, DateTime.Now, DateTime.Now);
    }
  }
}

