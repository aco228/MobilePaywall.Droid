using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class CustomPageTable : TableBase<CustomPage>
  {
    public static string GetColumnNames()
    {
      return TableBase<CustomPage>.GetColumnNames(string.Empty, CustomPageTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<CustomPage>.GetColumnNames(tablePrefix, CustomPageTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription CustomPageID = new ColumnDescription("CustomPageID", 0, typeof(int));
			public static readonly ColumnDescription CountryID = new ColumnDescription("CountryID", 1, typeof(int));
			public static readonly ColumnDescription RouteID = new ColumnDescription("RouteID", 2, typeof(int));
			public static readonly ColumnDescription OverridePage = new ColumnDescription("OverridePage", 3, typeof(string));
			public static readonly ColumnDescription ContextValidationFilter = new ColumnDescription("ContextValidationFilter", 4, typeof(bool));
			public static readonly ColumnDescription AuthenticationFilter = new ColumnDescription("AuthenticationFilter", 5, typeof(bool));
			public static readonly ColumnDescription AgeVerificationFilter = new ColumnDescription("AgeVerificationFilter", 6, typeof(bool));
			public static readonly ColumnDescription RestrictedAccessFilter = new ColumnDescription("RestrictedAccessFilter", 7, typeof(bool));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 8, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 9, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 10, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 11, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				CustomPageID,
				CountryID,
				RouteID,
				OverridePage,
				ContextValidationFilter,
				AuthenticationFilter,
				AgeVerificationFilter,
				RestrictedAccessFilter,
				Title,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public CustomPageTable(SqlQuery query) : base(query) { }
    public CustomPageTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int CustomPageID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomPageID)); } }
		public int CountryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CountryID)); } }
		
		public int? RouteID 
		{
			get
			{
				int index = this.GetIndex(Columns.RouteID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public string OverridePage 
		{
			get
			{
				int index = this.GetIndex(Columns.OverridePage);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public bool? ContextValidationFilter 
		{
			get
			{
				int index = this.GetIndex(Columns.ContextValidationFilter);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		
		public bool? AuthenticationFilter 
		{
			get
			{
				int index = this.GetIndex(Columns.AuthenticationFilter);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		
		public bool? AgeVerificationFilter 
		{
			get
			{
				int index = this.GetIndex(Columns.AgeVerificationFilter);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		
		public bool? RestrictedAccessFilter 
		{
			get
			{
				int index = this.GetIndex(Columns.RestrictedAccessFilter);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		public string Title { get { return this.Reader.GetString(this.GetIndex(Columns.Title)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public CustomPage CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new CustomPage(this.CustomPageID,new Country(this.CountryID), (RouteID.HasValue ? new Route(this.RouteID.Value) : null), this.OverridePage,this.ContextValidationFilter,this.AuthenticationFilter,this.AgeVerificationFilter,this.RestrictedAccessFilter,this.Title,this.Description,this.Updated,this.Created); 
		}
		public CustomPage CreateInstance(Country country)  
		{ 
			if (!this.HasData) return null;
			return new CustomPage(this.CustomPageID,country ?? new Country(this.CountryID), (RouteID.HasValue ? new Route(this.RouteID.Value) : null), this.OverridePage,this.ContextValidationFilter,this.AuthenticationFilter,this.AgeVerificationFilter,this.RestrictedAccessFilter,this.Title,this.Description,this.Updated,this.Created); 
		}
		public CustomPage CreateInstance(Route route)  
		{ 
			if (!this.HasData) return null;
			return new CustomPage(this.CustomPageID,new Country(this.CountryID), route ?? (this.RouteID.HasValue ? new Route(this.RouteID.Value) : null), this.OverridePage,this.ContextValidationFilter,this.AuthenticationFilter,this.AgeVerificationFilter,this.RestrictedAccessFilter,this.Title,this.Description,this.Updated,this.Created); 
		}
		public CustomPage CreateInstance(Country country, Route route)  
		{ 
			if (!this.HasData) return null;
			return new CustomPage(this.CustomPageID,country ?? new Country(this.CountryID), route ?? (this.RouteID.HasValue ? new Route(this.RouteID.Value) : null), this.OverridePage,this.ContextValidationFilter,this.AuthenticationFilter,this.AgeVerificationFilter,this.RestrictedAccessFilter,this.Title,this.Description,this.Updated,this.Created); 
		}
		

  }
}

