using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.TrckdPaywall.Data.Sql
{
  public class ActionTable : TableBase<Action>
  {
    public static string GetColumnNames()
    {
      return TableBase<Action>.GetColumnNames(string.Empty, ActionTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Action>.GetColumnNames(tablePrefix, ActionTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ActionID = new ColumnDescription("ActionID", 0, typeof(int));
			public static readonly ColumnDescription UserSessionID = new ColumnDescription("UserSessionID", 1, typeof(int));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 2, typeof(int));
			public static readonly ColumnDescription TransactionID = new ColumnDescription("TransactionID", 3, typeof(int));
			public static readonly ColumnDescription ActionTypeID = new ColumnDescription("ActionTypeID", 4, typeof(int));
			public static readonly ColumnDescription ActionStatusID = new ColumnDescription("ActionStatusID", 5, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 6, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ActionID,
				UserSessionID,
				PaymentID,
				TransactionID,
				ActionTypeID,
				ActionStatusID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ActionTable(SqlQuery query) : base(query) { }
    public ActionTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ActionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ActionID)); } }
		public int UserSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserSessionID)); } }
		public int PaymentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentID)); } }
		public int TransactionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TransactionID)); } }
		public int ActionTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ActionTypeID)); } }
		public int ActionStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ActionStatusID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Action CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,new UserSession(this.UserSessionID), new Payment(this.PaymentID), new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,new UserSession(this.UserSessionID), new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(UserSession userSession)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,userSession ?? new UserSession(this.UserSessionID), new Payment(this.PaymentID), new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(Payment payment, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(UserSession userSession, Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,userSession ?? new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(UserSession userSession, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,userSession ?? new UserSession(this.UserSessionID), new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		public Action CreateInstance(UserSession userSession, Payment payment, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new Action(this.ActionID,userSession ?? new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ActionType)this.ActionTypeID,(ActionStatus)this.ActionStatusID,this.Updated,this.Created); 
		}
		

  }
}

