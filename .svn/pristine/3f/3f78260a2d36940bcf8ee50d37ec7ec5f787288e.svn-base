using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Senti.Localization;

namespace MobilePaywall.Localization
{
  public class ContentLocalizationGroup : ILocalizationGroup 
  {
    public static readonly ContentLocalizationGroup Empty = new ContentLocalizationGroup();

    private MobilePaywallLocalization _localization = null;

    protected bool IsEmpty { get { return this._localization == null; } }
    protected MobilePaywallLocalization Localization { get { return this._localization; } }

    private string _download = null;
		private string _stream = null;
		private string _errNotFound = null;
    private string _quizResult = null;
		

    public string Download { get { return this._download ?? ((this.Localization.HasFallback && this.Localization.Fallback.Content != null) ? this.Localization.Fallback.Content.Download : string.Empty); } }
		public string Stream { get { return this._stream ?? ((this.Localization.HasFallback && this.Localization.Fallback.Content != null) ? this.Localization.Fallback.Content.Stream : string.Empty); } }
		public string ErrNotFound { get { return this._errNotFound ?? ((this.Localization.HasFallback && this.Localization.Fallback.Content != null) ? this.Localization.Fallback.Content.ErrNotFound : string.Empty); } }
    public string QuizResult { get { return this._quizResult ?? ((this.Localization.HasFallback && this.Localization.Fallback.Content != null) ? this.Localization.Fallback.Content.QuizResult : string.Empty); } }

    private ContentLocalizationGroup()
    {
      this._download = string.Empty;
				this._stream = string.Empty;
				this._errNotFound = string.Empty;
        this._quizResult = string.Empty;
				
    }

    public ContentLocalizationGroup(MobilePaywallLocalization localization)
    {
      this._localization = localization;
    }

    public string GetValue(string key)
    {
      switch (key)
      {
        case "Download":
					return this.Download;
				case "Stream":
          return this.Stream;
        case "ErrNotFound":
          return this.ErrNotFound;
        case "QuizResult":
          return this.QuizResult;
				
        default:
          return null;
      }
    }

    public bool AssignValue(string key, string value)
    {
      switch (key)
      {
        case "Download":
					this._download = value;
					return true;
				case "Stream":
					this._stream = value;
          return true;
        case "ErrNotFound":
          this._errNotFound = value;
          return true;
        case "QuizResult":
          this._quizResult = value;
          return true;
				
        default:
          return false;
      }
    }
  }
}
