using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAutomationGroupManager : IDataManager<AutomationGroup> 
  {
	

  }

  public partial class AutomationGroup : MobilePaywallObject<IAutomationGroupManager> 
  {
		private Country _country;
		private string _name = String.Empty;
		private string _externalCleanOffer = String.Empty;
		private int _rotationTime = -1;
		private string _startTime = String.Empty;
		private string _endTime = String.Empty;
		private bool _autoStart = false;
		private bool _isActive = false;
		private string _description = String.Empty;
		

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public string Name{ get {return this._name; } set { this._name = value;} }
		public string ExternalCleanOffer{ get {return this._externalCleanOffer; } set { this._externalCleanOffer = value;} }
		public int RotationTime{ get {return this._rotationTime; } set { this._rotationTime = value;} }
		public string StartTime{ get {return this._startTime; } set { this._startTime = value;} }
		public string EndTime{ get {return this._endTime; } set { this._endTime = value;} }
		public bool AutoStart {get {return this._autoStart; } set { this._autoStart = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return true;} }

    public override bool IsUpdatable { get { return true;} }

    public AutomationGroup()
    { 
    }

    public AutomationGroup(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public AutomationGroup(int id,  Country country, string name, string externalCleanOffer, int rotationTime, string startTime, string endTime, bool autoStart, bool isActive, string description, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._country = country;
			this._name = name;
			this._externalCleanOffer = externalCleanOffer;
			this._rotationTime = rotationTime;
			this._startTime = startTime;
			this._endTime = endTime;
			this._autoStart = autoStart;
			this._isActive = isActive;
			this._description = description;
			
    }

    public override object Clone(bool deepClone)
    {
      return new AutomationGroup(-1,  this.Country,this.Name,this.ExternalCleanOffer,this.RotationTime,this.StartTime,this.EndTime,this.AutoStart,this.IsActive,this.Description, DateTime.Now, DateTime.Now);
    }
  }
}

