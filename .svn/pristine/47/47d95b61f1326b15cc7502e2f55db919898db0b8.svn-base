using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ICustomPageManager : IDataManager<CustomPage> 
  {
	

  }

  public partial class CustomPage : MobilePaywallObject<ICustomPageManager> 
  {
		private Country _country;
		private Route _route;
		private string _overridePage = String.Empty;
		private bool? _contextValidationFilter = false;
		private bool? _authenticationFilter = false;
		private bool? _ageVerificationFilter = false;
		private bool? _restrictedAccessFilter = false;
		private string _title = String.Empty;
		private string _description = String.Empty;
		

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public Route Route 
		{
			get
			{
				if (this._route != null &&
						this._route.IsEmpty)
					if (this.ConnectionContext != null)
						this._route = Route.CreateManager().LazyLoad(this.ConnectionContext, this._route.ID) as Route;
					else
						this._route = Route.CreateManager().LazyLoad(this._route.ID) as Route;
				return this._route;
			}
			set { _route = value; }
		}

		public string OverridePage{ get {return this._overridePage; } set { this._overridePage = value;} }
		public bool? ContextValidationFilter {get {return this._contextValidationFilter; } set { this._contextValidationFilter = value;} }
		public bool? AuthenticationFilter {get {return this._authenticationFilter; } set { this._authenticationFilter = value;} }
		public bool? AgeVerificationFilter {get {return this._ageVerificationFilter; } set { this._ageVerificationFilter = value;} }
		public bool? RestrictedAccessFilter {get {return this._restrictedAccessFilter; } set { this._restrictedAccessFilter = value;} }
		public string Title{ get {return this._title; } set { this._title = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		

    public override bool IsInsertable { get { return true;} }

  //  public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public CustomPage()
    { 
    }

    public CustomPage(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public CustomPage(int id,  Country country, Route route, string overridePage, bool? contextValidationFilter, bool? authenticationFilter, bool? ageVerificationFilter, bool? restrictedAccessFilter, string title, string description, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._country = country;
			this._route = route;
			this._overridePage = overridePage;
			this._contextValidationFilter = contextValidationFilter;
			this._authenticationFilter = authenticationFilter;
			this._ageVerificationFilter = ageVerificationFilter;
			this._restrictedAccessFilter = restrictedAccessFilter;
			this._title = title;
			this._description = description;
			
    }

    public override object Clone(bool deepClone)
    {
      return new CustomPage(-1,  this.Country, this.Route,this.OverridePage,this.ContextValidationFilter,this.AuthenticationFilter,this.AgeVerificationFilter,this.RestrictedAccessFilter,this.Title,this.Description, DateTime.Now, DateTime.Now);
    }
  }
}

