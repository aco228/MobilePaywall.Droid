using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IVideoSceneManager : IDataManager<VideoScene> 
  {
	

  }

  public partial class VideoScene : MobilePaywallObject<IVideoSceneManager> 
  {
		private VideoContent _videoContent;
		private VideoContentData _videoContentData;
		private ContentThumbnail _contentThumbnail;
		private int _sortIndex = -1;
		

		public VideoContent VideoContent 
		{
			get
			{
				if (this._videoContent != null &&
						this._videoContent.IsEmpty)
					if (this.ConnectionContext != null)
						this._videoContent = VideoContent.CreateManager().LazyLoad(this.ConnectionContext, this._videoContent.ID) as VideoContent;
					else
						this._videoContent = VideoContent.CreateManager().LazyLoad(this._videoContent.ID) as VideoContent;
				return this._videoContent;
			}
			set { _videoContent = value; }
		}

		public VideoContentData VideoContentData 
		{
			get
			{
				if (this._videoContentData != null &&
						this._videoContentData.IsEmpty)
					if (this.ConnectionContext != null)
						this._videoContentData = VideoContentData.CreateManager().LazyLoad(this.ConnectionContext, this._videoContentData.ID) as VideoContentData;
					else
						this._videoContentData = VideoContentData.CreateManager().LazyLoad(this._videoContentData.ID) as VideoContentData;
				return this._videoContentData;
			}
			set { _videoContentData = value; }
		}

		public ContentThumbnail ContentThumbnail 
		{
			get
			{
				if (this._contentThumbnail != null &&
						this._contentThumbnail.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentThumbnail = ContentThumbnail.CreateManager().LazyLoad(this.ConnectionContext, this._contentThumbnail.ID) as ContentThumbnail;
					else
						this._contentThumbnail = ContentThumbnail.CreateManager().LazyLoad(this._contentThumbnail.ID) as ContentThumbnail;
				return this._contentThumbnail;
			}
			set { _contentThumbnail = value; }
		}

		public int SortIndex{ get {return this._sortIndex; } set { this._sortIndex = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public VideoScene()
    { 
    }

    public VideoScene(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public VideoScene(int id,  VideoContent videoContent, VideoContentData videoContentData, ContentThumbnail contentThumbnail, int sortIndex, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._videoContent = videoContent;
			this._videoContentData = videoContentData;
			this._contentThumbnail = contentThumbnail;
			this._sortIndex = sortIndex;
			
    }

    public override object Clone(bool deepClone)
    {
      return new VideoScene(-1,  this.VideoContent, this.VideoContentData, this.ContentThumbnail,this.SortIndex, DateTime.Now, DateTime.Now);
    }
  }
}

