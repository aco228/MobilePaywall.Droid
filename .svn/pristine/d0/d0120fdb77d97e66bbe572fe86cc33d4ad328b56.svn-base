@model TemplateConfigurationModel
@{
  Layout = "~/Views/Template/_Layout/_Layout.cshtml";
  string[] serviceStatuses = new string[] { "", "Online", "Offline", "Updating", "Free" };
}

<link href="~/Content/Template/configuration.css" rel="stylesheet" />

<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content">
    <h3 class="heading_a">Service configuration</h3>

    <div class="uk-grid" data-uk-grid-margin="">
      <div>


        <label for="settings_time_format" class="uk-form-label">Service status</label>
        <select id="selectServiceStatus" name="settings_time_format" data-md-selectize>
          @for (int i = 1; i < serviceStatuses.Length; i++)
          {
            string selected = serviceStatuses[i] == PaywallHttpContext.Current.Service.ServiceData.ServiceStatus.ToString() ? "selected=\"selected\"" : "";
            <option value="@i" @selected>@serviceStatuses[i]</option>
          }
        </select>
      </div>
    </div>

    <div class="uk-grid">
      <div class="uk-width-medium-1-6">
        <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateServiceStatus" inuse="false">Update</a>
      </div>
    </div>

  </div>
</div>

<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content" style="overflow:hidden">
    <div id="lookupConfigurationManager" style="width:50%;float:left">
      <h3 class="heading_a">Update Configuration Managers</h3>
      <div class="uk-grid" data-uk-grid-margin="">
        <div class="form-group">
          <label for="settings_time_format">LookupConfigurationManager</label>
          <select name="settings_time_format" class="form-control" id="selectServiceLookupManagerType">
            @foreach (LookupManagerType lmt in Model.LookupManagerTypes)
            {
              string selected = lmt.ID == Model.DefaultLookupManagerType.ID ? "selected" : "";
              <option value="@lmt.ID" @selected>@lmt.Name</option>
            }
          </select>
        </div>
      </div>

      <div class="uk-grid">
        <div class="uk-width-medium-1-6">
          <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateServiceLookupManagerConfiguration" inuse="false">Update</a>
        </div>
      </div>

    </div>

    <div id="lookupConfigurationManager" style="width:50%;float:left">
      <h3 class="heading_a" style="color:white">.</h3>
      <div class="uk-grid" data-uk-grid-margin="">
        <div class="form-group">
          <label for="settings_time_format">PaymentConfigurationManager</label>
          <select name="settings_time_format" class="form-control" id="selectServicePaymentManagerType">
            @foreach (PaymentManagerType pmt in Model.PaymentManagerTypes)
            {
              string selected = pmt.ID == Model.DefaultPaymentManagerType.ID ? "selected" : "";
              <option value="@pmt.ID" @selected>@pmt.Name</option>
            }
          </select>
        </div>
      </div>


    </div>

  </div>
</div>







<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content" style="overflow:hidden">
    <div id="leftUserSessionType" style="width:50%;float:left">
      <h3 class="heading_a">Update Data From Service</h3>

      <div class="uk-grid" data-uk-grid-margin="">
        <div>

          <label for="settings_time_format" class="uk-form-label">User Session Type</label>
          <select id="selectUserSessionType" style="width: 150%;" name="settings_time_format" class="form-control">

            @for (int i = 0; i < Model.UserSessionType.Count; i++)
            {
              string selected = Model.UserSessionType[i].ID.ToString() == PaywallHttpContext.Current.Service.ServiceData.UserSessionType.ID.ToString() ? "selected" : "";
              <option value="@Model.UserSessionType[i].ID" @selected>@Model.UserSessionType[i].Name.ToString()</option>
            }
          </select>
        </div>
      </div>

      <div class="uk-grid">
        <div class="uk-width-medium-1-6">
          <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateUserSession" inuse="false">Update</a>
        </div>
      </div>
    </div>

    <div id="rightUserServiceType" style="width:50%;float:left">
      <h3 class="heading_a" style="color:white">.</h3>

      <div class="uk-grid" data-uk-grid-margin="">
        <div class="form-group">
          <label for="settings_time_format">Service Type</label>
          <select name="settings_time_format" class="form-control" id="selectServiceType">
            @foreach (ServiceType st in Model.ServiceType)
            {
              string selected = st.ID == Model.ServiceTypeID ? "selected" : "";
              <option value="@st.ID" @selected>@st.Name</option>
            }
          </select>
        </div>
      </div>
    </div>



  </div>
</div>

<div class="md-card" id="serviceConfiguration">
  <div class="templateForContentGroup" hidden>
    <div class="form-group serviceGroupsClass" contentgroupid="">
      <label class="groupLabel contentGroupLabel" for="settings_time_format"></label>
      <h3 class="contentGroupName"></h3>
      <span aria-hidden="true" class="numOfContents" style="position: absolute;top: 6px;right: 25px;"></span>
      <a href="#" class="md-btn btnUpdateServiceContentGroup delete removeContentGroupFromService"><span aria-hidden="true">&times;</span></a>
    </div>
  </div>
</div>

<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content" style="overflow: hidden;">
    <div class="addContentGroup" style="width:50%;float:left">
      <h3 class="heading_a">Content group</h3>

      <div class="uk-grid" data-uk-grid-margin="">
        <div style="width:500px;" class="form-group">

          @if (Model.ServiceContentGroups != null)
          {
            <div class="form-group">
              <label for="settings_time_format">Content group type</label>
              <select name="settings_time_format" class="form-control" id="selectContentGroupType">
                @foreach (ContentGroupType cgt in Model.ContentGroupType)
                {
                  string selected = cgt.ID == Model.ContentGroupTypeID ? "selected" : "";
                  <option value="@cgt.ID" @selected>@cgt.Name</option>
                }
              </select>
            </div>


            <div class="form-group">

              <label for="settings_time_format" class="groupLabel">Content groups</label>
              <select name="settings_time_format" class="form-control" id="selectContentGroup">
                @foreach (ContentGroup cg in Model.ContentGroups)
                {
                  <option contentgroupid="@cg.ContentGroupType.ID" value="@cg.ID">@cg.Name</option>
                }
              </select>
            </div>

          }
          else
          {
            <label for="settings_time_format" class="uk-form-label">Initial ServiceContentGroup entry is not set. Please contact system administrator</label>
          }

        </div>
      </div>


      <div class="uk-grid">
        <div class="uk-width-medium-1-6">
          <a class="md-btn md-btn-flat md-btn-flat-primary btnUpdateServiceContentGroup" href="#" inuse="false">Add</a>
        </div>
      </div>
    </div>
    <div class="serviceContentGroups" style="width:50%;float:left">
      @if (Model.ServiceContentGroups != null)
      {
        int a = 0;
        foreach (ServiceContentGroupMap serviceContentGroups in Model.ServiceContentGroups)
        {
          <div class="form-group serviceGroupsClass" contentgroupid="@serviceContentGroups.ContentGroup.ID">
            <label class="groupLabel contentGroupLabel" for="settings_time_format">@serviceContentGroups.ContentGroup.ContentGroupType.Name</label>
            <h3 class="contentGroupName">@serviceContentGroups.ContentGroup.Name</h3>
            <span aria-hidden="true" class="numOfContents" style="position: absolute;top: 6px;right: 25px;">@Model.NumberOfContents(serviceContentGroups.ContentGroup.ID)</span>
            <a href="#" class="md-btn btnUpdateServiceContentGroup delete removeContentGroupFromService"><span aria-hidden="true">&times;</span></a>
          </div>
          a += Model.NumberOfContents(serviceContentGroups.ContentGroup.ID);
        }
        <span aria-hidden="true" class="totalContent" style="float:right;top: 6px;right: 25px;">@a</span>
      }
      else
      {
        <label for="settings_time_format" class="uk-form-label">Initial ServiceContentGroup entry is not set. Please contact system administrator</label>
      }
    </div>
  </div>
</div>

<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content" style="overflow: hidden;">
    <div id="leftProducts" style="width:50%;float:left">
      <h3 class="heading_a">Update Product and Merchant</h3>

      <div class="uk-grid" data-uk-grid-margin="">
        <div>

          <label for="settings_time_format" class="uk-form-label">Product</label>
          <select name="settings_time_format" class="form-control" id="selectProduct">
            @foreach (Product product in Model.Products)
            {
              string selected = product.ID == Model.ProductID ? "selected" : "";
              <option value="@product.ID" @selected>@product.Name</option>
            }
          </select>

        </div>
      </div>

      <div class="uk-grid">
        <div class="uk-width-medium-1-6">
          <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateServiceMerchant" inuse="false">Update</a>
        </div>
      </div>
    </div>

    <div id="rightMerchants" style="width:50%;float:left">
      <h3 class="heading_a" style="color:white">.</h3>
      <div class="uk-grid" data-uk-grid-margin="">
        <div class="form-group">
          <label for="settings_time_format">Service Merchant</label>
          <select name="settings_time_format" class="form-control" id="selectServiceMerchant">
            @foreach (Merchant me in Model.Merchants)
            {
              string selected = me.ID == Model.MerchantID ? "selected" : "";
              <option productid="@me.Product.ID" value="@me.ID" @selected>@me.Name</option>
            }
          </select>
        </div>
      </div>
    </div>

  </div>
</div>


<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content">
    <h3 class="heading_a">Update LOG level</h3>

    <div class="uk-grid" data-uk-grid-margin="">
      <div class="form-group">
        <label for="settings_time_format">Log</label>
        <select name="settings_time_format" class="form-control" id="selectLogLevel">
          <option value="all">ALL</option>
          <option value="debug">DEBUG</option>
          <option value="error">ERROR</option>
          <option value="fatal">FATAL</option>
        </select>
        <br>
        <label>Log traffic</label>
        <input type="checkbox" id="logEverythinhCheckbox" @Html.Raw(PaywallHttpApplication.LogEverything ? "checked" : "") />
      </div>
    </div>


    <div class="uk-grid">
      <div class="uk-width-medium-1-6">
        <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateLogLevel" inuse="false">Update</a>
      </div>
    </div>

  </div>
</div>






<div class="md-card" id="serviceTempalte">
  <div class="md-card-content">
    <h3 class="heading_a">Update service template</h3>

    <div class="uk-grid" data-uk-grid-margin="">
      <div style="width:500px;">

        <label for="settings_time_format" class="uk-form-label">Templates</label>
        <select id="selectTemplate" name="settings_time_format" data-md-selectize>
          @foreach (Template t in Model.Templates)
          {
            string selected = t.ID == Model.TempalteID ? "selected" : "";
            <option value="@t.ID" @selected>@t.Name</option>
          }
        </select>

      </div>
    </div>


    <div class="uk-grid">
      <div class="uk-width-medium-1-6">
        <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateServiceTemplate" inuse="false">Update</a>
      </div>
    </div>

  </div>
</div>


<div class="md-card" id="servicePaymentInterface">
  <div class="md-card-content">
    <h3 class="heading_a">Update service payment Interface</h3>

    <div class="uk-grid" data-uk-grid-margin="">
      <div style="width:500px;">
        @foreach (ServiceLookupMethodMap slmm in Model.ServiceLookupMethodMaps)
        {
          <div class="servicePaymentInterfaceBtnClosest" slmm="@slmm.ID">
            <label for="settings_time_format" class="uk-form-label">Payment Configuration for : @slmm.Description</label>
            <select class="form-control selectPaymentInterface" >
              @foreach (PaymentInterface pi in Model.PaymentInterfaces)
              {
                string selected = pi.ID == slmm.PaymentConfiguration.PaymentInterface.ID ? "selected" : "";
                <option value="@pi.ID" @selected>@pi.Name</option>
              }
            </select>
            <div class="uk-grid">
              <div class="uk-width-medium-1-6">
                <a class="md-btn md-btn-flat md-btn-flat-primary btnUpdateServicePaymentInterface" href="#" inuse="false">Update</a>
              </div>
            </div>
          </div>
        }
      </div>
    </div>

  </div>
</div>



<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content">
    <h3 class="heading_a">Update service behavior model</h3>

    <div class="form-group">
      <label for="serviceBehaviorModel">Behavior model</label>
      <input value="@Model.BehaviorModel.ExternalBehaviorModelGuid" type="text" class="form-control" id="serviceBehaviorModel">
    </div>


    <div class="uk-grid">
      <div class="uk-width-medium-1-6">
        <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnUpdateServiceBM" inuse="false">Update</a>
      </div>
    </div>

  </div>
</div>

<div class="md-card" id="serviceConfiguration">
  <div class="md-card-content">
    <h3 class="heading_a">Restart application pool</h3>

    <div class="uk-grid">
      <div class="uk-width-medium-1-6">
        <a class="md-btn md-btn-flat md-btn-flat-primary" href="#" id="btnRestartApplicationPool" inuse="false">Restart</a>
      </div>
    </div>

  </div>
</div>

<script>

  var currentStatus = '@PaywallHttpContext.Current.Service.ServiceData.ServiceStatus.ToString()';

  document.addEventListener("DOMContentLoaded", function () {
    onUpdateServiceManagerConfiguration();
    onUpdateUserSessionType();
    onUpdateServiceBM();
    onUpdateServiceStatus();
    onUpdateServiceMerchant();
    onUpdateServiceType();
    onUpdateServiceContentGroup();
    onUpdateServiceTemplate();
    onRestartApplicationPool();
    onChangeSelectList();
    onUpdateLogLevel();
    onUpdateServicePaymentInterface();
    $('#selectContentGroupType').change(onChangeSelectList);
    $('#selectProduct').change(onChangeProductSelectList);
  });


  function onChangeProductSelectList() {

    if ($('#selectProduct').data('options') == undefined) {
      $('#selectProduct').data('options', $('#selectServiceMerchant option').clone());
    }
    id = $('#selectProduct').val();

    var options = $('#selectProduct').data('options').filter("[productid=" + id + "]");
    $('#selectServiceMerchant').html(options);
  }


  function onChangeSelectList() {

    if ($('#selectContentGroupType').data('options') == undefined) {
      $('#selectContentGroupType').data('options', $('#selectContentGroup option').clone());
    }
    id = $('#selectContentGroupType').val();

    var options = $('#selectContentGroupType').data('options').filter("[contentgroupid=" + id + "]");
    $('#selectContentGroup').html(options);
  }


  // SUMMARY: Change template for service
  function onUpdateServicePaymentInterface() {
    $('.btnUpdateServicePaymentInterface').click(function () {
      if ($(this).attr('inuse') == 'true') return;

      var btn = $(this);
      var parent = btn.closest('.servicePaymentInterfaceBtnClosest');
      visual.Confirm('Are you sure you want to change payment interface for this service?', 'Yes', 'No', function () {
        var paymentInterfaceID = parent.find('.selectPaymentInterface option:selected').attr('value');
        var serviceLookupMethodMapID = parent.attr('slmm');
        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiChangePaymentInterface', { paymentInterfaceID: paymentInterfaceID, serviceLookupMethodMapID: serviceLookupMethodMapID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });
      });

    });
  }


  function onUpdateServiceManagerConfiguration() {
    $('#btnUpdateServiceLookupManagerConfiguration').on('click', function () {
      if ($(this).attr('inuse') == 'true') return;
      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var lookupManagerType = $('#selectServiceLookupManagerType').val();
        var paymentManagerType = $('#selectServicePaymentManagerType').val();
        console.log(lookupManagerType + ": " + paymentManagerType);
        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiUpdateServiceManagerConfiguration', { lookupManagerType: lookupManagerType, paymentManagerType: paymentManagerType }, function (response) {
          console.log(response);
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });

      });
    });
  }




  function onUpdateServiceBM() {
    $('#btnUpdateServiceBM').click(function () {
      if ($(this).attr('inuse') == 'true') return;
      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var behaviorModel = $('#serviceBehaviorModel').val();
        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiChangeBehaviorModel', { behaviorModel: behaviorModel }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });
      });
    });
  }

  function onUpdateServiceMerchant() {
    $('#btnUpdateServiceMerchant').click(function () {
      if ($(this).attr('inuse') == 'true') return;
      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var serviceMerchantID = $('#selectServiceMerchant').val();
        var productID = $('#selectProduct').val();
        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiChangeMerchant', { productID: productID, merchantID: serviceMerchantID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });
      });
    });
  }



  function onUpdateServiceType() {
    $('#btnUpdateServiceType').click(function () {
      if ($(this).attr('inuse') == 'true') return;
      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var serviceTypeID = $('#selectServiceType').val();

        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiChangeServiceType', { serviceTypeID: serviceTypeID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });
      });
    });
  }

  function onUpdateUserSessionType() {

    $('#btnUpdateUserSession').on('click', function () {

      if ($(this).attr('inuse') == 'true') return;

      var btn = $(this);
      var paretn = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var ko = parent.find('#selectUserSessionType');
        var serviceTypeID = $('#selectServiceType').val();
        var userSessionTypeID = $('#selectUserSessionType').val();
        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiUpdateUserSessionType', { userSessionTypeID: userSessionTypeID, serviceTypeID: serviceTypeID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });

      });
    });
  }


  function onUpdateServiceStatus() {
    $('#btnUpdateServiceStatus').click(function () {
      if ($(this).attr('inuse') == 'true') return;

      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');

      visual.Confirm('Are you sure you want to make this change?', 'Yes', 'No', function () {
        var serviceStatusID = parent.find('#selectServiceStatus').find(":selected").attr('value');

        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiUpdateServiceStatus', { serviceStatus: serviceStatusID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });

      });
    });
  }

  function onUpdateServiceContentGroup() {
    var select = $('#selectContentGroup');
    $('body').on('click', '.btnUpdateServiceContentGroup', function () {
      if ($(this).attr('inuse') == 'true') return;

      var btn = $(this);
      var parent = btn.closest('#serviceConfiguration');
      var isDelete = btn.hasClass("delete") ? "1" : "0";
      var ContentGroupType = "";
      var ContentGroupName = "";
      var contentGroupID = -1;
      if (isDelete == "1") {
        contentGroupID = btn.closest(".form-group").attr("contentGroupID");
      }
      else {
        contentGroupID = select.find(":selected").attr('value');
        ContentGroupType = $("#selectContentGroupType").find(":selected").text();
        ContentGroupName = select.find(":selected").text();
      }

      visual.Confirm('Are you sure you want to change content group?', 'Yes', 'No', function () {
        // var contentGroupID = select.find('option[selected=selected]').attr('value');

        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiUpdateServiceContentGroupMap', { contentGroupID: contentGroupID, isDelete: isDelete }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          if (response.status) {
            if (isDelete == "1") {
              btn.closest(".form-group").remove();
              var total = parseInt($(".totalContent").text());
              total -= response.numOfContents;
              $(".totalContent").text(total);
            }
            else {
              var template = $(".templateForContentGroup");
              template.find(".serviceGroupsClass").attr("contentgroupid", contentGroupID);
              template.find(".groupLabel").text(ContentGroupType);
              template.find(".contentGroupName").text(ContentGroupName);
              template.find(".numOfContents").text(response.numOfContents);
              var total = parseInt($(".totalContent").text());
              total += response.numOfContents;
              $(".totalContent").text(total);
              $(".serviceGroupsClass").last().after(template.html());
            }
          }
          visual.Alert(response.message);
        });
      });

    });
  }


  // SUMMARY: Change template for service
  function onUpdateServiceTemplate() {
    var select = $('#selectTemplate');
    $('#btnUpdateServiceTemplate').click(function () {
      if ($(this).attr('inuse') == 'true') return;

      var btn = $(this);
      var parent = btn.closest('#serviceTempalte');

      visual.Confirm('Are you sure you want to change template for this service?', 'Yes', 'No', function () {
        var templateID = select.find('option[selected=selected]').attr('value');

        var tmplText = btn.text();
        btn.attr('inuse', 'true');
        btn.text('...');

        template.call('ApiChangeTemplate', { template: templateID }, function (response) {
          btn.attr('inuse', 'false');
          btn.text(tmplText);
          visual.Alert(response.message);
        });
      });

    });
  }

  function onRestartApplicationPool() {
    $('#btnRestartApplicationPool').click(function () {
      var btn = $(this);
      visual.Confirm('Are you sure you want to restart application pool for this service?', 'Yes', 'No', function () {
        template.call('ApiApplicationRestart', {}, function (response) {
          visual.Alert(response.message, 'Close', function () {
            if (response.status) window.location.reload();
          });
        });
      });
    });
  }

  function onUpdateLogLevel() {
    var currentLevel = '@Model.LogLevel';
    $('#selectLogLevel').find('option[value=' + currentLevel + ']').prop('selected', true);

    $('#btnUpdateLogLevel').click(function () {
      var btn = $(this);
      visual.Confirm("Are you sure you want to change log4net log level?", 'Yes', 'No', function () {
        var logLevel = $('#selectLogLevel option:selected').attr('value');
        var logEverything = $('#logEverythinhCheckbox').is(':checked') ? '1' : '0';
        template.call('ApiChangeLogLevel', { logLevel: logLevel, logEverything: logEverything }, function (response) {
          visual.Alert(response.message);
        });
      });
    });
  }

</script>