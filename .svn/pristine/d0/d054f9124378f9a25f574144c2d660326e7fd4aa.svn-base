using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentStorageManager : IDataManager<ContentStorage> 
  {
	

  }

  public partial class ContentStorage : MobilePaywallObject<IContentStorageManager> 
  {
		private ContentStorageType _contentStorageType;
		private Instance _instance;
		private string _name = String.Empty;
		

		public ContentStorageType ContentStorageType 
		{
			get
			{
				if (this._contentStorageType != null &&
						this._contentStorageType.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentStorageType = ContentStorageType.CreateManager().LazyLoad(this.ConnectionContext, this._contentStorageType.ID) as ContentStorageType;
					else
						this._contentStorageType = ContentStorageType.CreateManager().LazyLoad(this._contentStorageType.ID) as ContentStorageType;
				return this._contentStorageType;
			}
			set { _contentStorageType = value; }
		}

		public Instance Instance 
		{
			get
			{
				if (this._instance != null &&
						this._instance.IsEmpty)
					if (this.ConnectionContext != null)
						this._instance = Instance.CreateManager().LazyLoad(this.ConnectionContext, this._instance.ID) as Instance;
					else
						this._instance = Instance.CreateManager().LazyLoad(this._instance.ID) as Instance;
				return this._instance;
			}
			set { _instance = value; }
		}

		public string Name{ get {return this._name; } set { this._name = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentStorage()
    { 
    }

    public ContentStorage(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentStorage(int id,  ContentStorageType contentStorageType, Instance instance, string name, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._contentStorageType = contentStorageType;
			this._instance = instance;
			this._name = name;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentStorage(-1,  this.ContentStorageType, this.Instance,this.Name, DateTime.Now, DateTime.Now);
    }
  }
}

