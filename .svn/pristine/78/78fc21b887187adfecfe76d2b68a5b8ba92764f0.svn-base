using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

namespace MobilePaywall.Data.Sql
{
	public partial class ServiceManager : IServiceManager
	{
		public List<Service> Load()
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection);
		}

		public List<Service> Load(IConnectionInfo connection)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection);
		}

		public List<Service> Load(ISqlConnectionInfo connection)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			return this.LoadMany(connection, parameters);
		}


		public Service Load(Guid serviceGuid)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, serviceGuid);
		}

		public Service Load(IConnectionInfo connection, Guid serviceGuid)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, serviceGuid);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, serviceGuid);
		}

		public Service Load(ISqlConnectionInfo connection, Guid serviceGuid)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].ServiceGuid=@ServiceGuid";
			parameters.Arguments.Add("ServiceGuid", serviceGuid);
			return this.Load(connection, parameters);
		}

		public List<Service> Load(Instance instance)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance);
		}

		public List<Service> Load(IConnectionInfo connection, Instance instance)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance);
		}

		public List<Service> Load(ISqlConnectionInfo connection, Instance instance)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s_a].InstanceID = @InstanceID";
			parameters.Arguments.Add("InstanceID", instance.ID);
			return this.LoadMany(connection, parameters);
		}

		public List<Service> Load(Application application)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, application);
		}

		public List<Service> Load(IConnectionInfo connection, Application application)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, application);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, application);
		}

		public List<Service> Load(ISqlConnectionInfo connection, Application application)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].ApplicationID = @ApplicationID";
			parameters.Arguments.Add("ApplicationID", application.ID);
			return this.LoadMany(connection, parameters);
		}

		public List<Service> Load(Product product)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, product);
		}

		public List<Service> Load(IConnectionInfo connection, Product product)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, product);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, product);
		}

		public List<Service> Load(ISqlConnectionInfo connection, Product product)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].ProductID=@ProductID";
			parameters.Arguments.Add("ProductID", product.ID);
			return this.LoadMany(connection, parameters);
		}

		public Service Load(string name)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, name);
		}

		public Service Load(IConnectionInfo connection, string name)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, name);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, name);
		}

		public Service Load(ISqlConnectionInfo connection, string name)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].Name = @Name";
			parameters.Arguments.Add("Name", name);
			return this.Load(connection, parameters);
		}

		public List<Service> Load(ServiceStatus serviceStatus)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, serviceStatus);
		}

		public List<Service> Load(IConnectionInfo connection, ServiceStatus serviceStatus)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, serviceStatus);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, serviceStatus);
		}

		public List<Service> Load(ISqlConnectionInfo connection, ServiceStatus serviceStatus)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].ServiceStatusID=@ServiceStatusID";
			parameters.Arguments.Add("ServiceStatusID", serviceStatus);
			return this.LoadMany(connection, parameters);
		}

		public List<Service> Load(ServiceType serviceType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, serviceType);
		}

		public List<Service> Load(IConnectionInfo connection, ServiceType serviceType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, serviceType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, serviceType);
		}

		public List<Service> Load(ISqlConnectionInfo connection, ServiceType serviceType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].ServiceTypeID=@ServiceTypeID";
			parameters.Arguments.Add("ServiceTypeID", serviceType.ID);
			return this.LoadMany(connection, parameters);
		}

		public List<Service> Load(Merchant merchant)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, merchant);
		}

		public List<Service> Load(IConnectionInfo connection, Merchant merchant)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, merchant);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, merchant);
		}

		public List<Service> Load(ISqlConnectionInfo connection, Merchant merchant)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[s].MerchantID=@MerchantID";
			parameters.Arguments.Add("MerchantID", merchant.ID);
			return this.LoadMany(connection, parameters);
		}


    public List<Service> Load(Country country)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, country);
    }

    public List<Service> Load(IConnectionInfo connection, Country country)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, country);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, country);
    }

    public List<Service> Load(ISqlConnectionInfo connection, Country country)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[s].FallbackCountryID=@CountryID";
      parameters.Arguments.Add("CountryID", country.ID);
      return this.LoadMany(connection, parameters);
    }


    public List<Service> Load(Application application, Merchant merchant, Product product)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, application, merchant, product);
    }

    public List<Service> Load(IConnectionInfo connection, Application application, Merchant merchant, Product product)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, application, merchant, product);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, application, merchant, product);
    }

    public List<Service> Load(ISqlConnectionInfo connection, Application application, Merchant merchant, Product product)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();

      int whereParams = 0;
      parameters.Where = "";

      if (application != null)
      {
        parameters.Where = string.Format(" [s].ApplicationID={0} ", application.ID);
        whereParams++;
      }

      if (merchant != null)
      {
        parameters.Where += string.Format(" {0} [s].MerchantID={1} ", (whereParams > 0 ? "AND" : ""), merchant.ID);
        whereParams++;
      }

      if (product != null)
      {
        parameters.Where += string.Format(" {0} [s].ProductID={1} ", (whereParams > 0 ? "AND" : ""), product.ID);
        whereParams++;
      }

      if (string.IsNullOrEmpty(parameters.Where))
        return null;

      return this.LoadMany(connection, parameters);
    }


    public List<Service> Load(Product product, Merchant merchant)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, product, merchant);
    }

    public List<Service> Load(IConnectionInfo connection, Product product, Merchant merchant)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, product, merchant);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, product, merchant);
    }

    public List<Service> Load(ISqlConnectionInfo connection, Product product, Merchant merchant)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[s].ProductID=@ProductID AND [s].MerchantID=@MerchantID";
      parameters.Arguments.Add("ProductID", product.ID);
      parameters.Arguments.Add("MerchantID", merchant.ID);
      return this.LoadMany(connection, parameters);
    }

	}

}

