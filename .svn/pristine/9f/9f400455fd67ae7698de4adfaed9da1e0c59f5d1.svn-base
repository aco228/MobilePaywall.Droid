using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IShortMessageProviderManager : IDataManager<ShortMessageProvider> 
  {
	

  }

  public partial class ShortMessageProvider : MobilePaywallObject<IShortMessageProviderManager> 
  {
		private ShortMessageProviderType _shortMessageProviderType;
		private ShortMessageProviderConfiguration _shortMessageProviderConfiguration;
		private string _name = String.Empty;
		private string _description = String.Empty;
		

		public ShortMessageProviderType ShortMessageProviderType 
		{
			get
			{
				if (this._shortMessageProviderType != null &&
						this._shortMessageProviderType.IsEmpty)
					if (this.ConnectionContext != null)
						this._shortMessageProviderType = ShortMessageProviderType.CreateManager().LazyLoad(this.ConnectionContext, this._shortMessageProviderType.ID) as ShortMessageProviderType;
					else
						this._shortMessageProviderType = ShortMessageProviderType.CreateManager().LazyLoad(this._shortMessageProviderType.ID) as ShortMessageProviderType;
				return this._shortMessageProviderType;
			}
			set { _shortMessageProviderType = value; }
		}

		public ShortMessageProviderConfiguration ShortMessageProviderConfiguration 
		{
			get
			{
				if (this._shortMessageProviderConfiguration != null &&
						this._shortMessageProviderConfiguration.IsEmpty)
					if (this.ConnectionContext != null)
						this._shortMessageProviderConfiguration = ShortMessageProviderConfiguration.CreateManager().LazyLoad(this.ConnectionContext, this._shortMessageProviderConfiguration.ID) as ShortMessageProviderConfiguration;
					else
						this._shortMessageProviderConfiguration = ShortMessageProviderConfiguration.CreateManager().LazyLoad(this._shortMessageProviderConfiguration.ID) as ShortMessageProviderConfiguration;
				return this._shortMessageProviderConfiguration;
			}
			set { _shortMessageProviderConfiguration = value; }
		}

		public string Name{ get {return this._name; } set { this._name = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ShortMessageProvider()
    { 
    }

    public ShortMessageProvider(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ShortMessageProvider(int id,  ShortMessageProviderType shortMessageProviderType, ShortMessageProviderConfiguration shortMessageProviderConfiguration, string name, string description, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._shortMessageProviderType = shortMessageProviderType;
			this._shortMessageProviderConfiguration = shortMessageProviderConfiguration;
			this._name = name;
			this._description = description;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ShortMessageProvider(-1,  this.ShortMessageProviderType, this.ShortMessageProviderConfiguration,this.Name,this.Description, DateTime.Now, DateTime.Now);
    }
  }
}

