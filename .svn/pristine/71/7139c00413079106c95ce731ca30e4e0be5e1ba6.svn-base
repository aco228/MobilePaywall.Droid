using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAutomationManager : IDataManager<Automation> 
  {
	

  }

  public partial class Automation : MobilePaywallObject<IAutomationManager> 
  {
		private string _name = String.Empty;
		private Service _service;
		private AutomationGroup _automationGroup;
		private MobileOperator _mobileOperator;
		private int _limit = -1;
		private string _externalOfferName = String.Empty;
		private bool _isActive = false;
		private int _index = -1;
		private string _comment = String.Empty;
		

		public string Name{ get {return this._name; } set { this._name = value;} }
		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public AutomationGroup AutomationGroup 
		{
			get
			{
				if (this._automationGroup != null &&
						this._automationGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._automationGroup = AutomationGroup.CreateManager().LazyLoad(this.ConnectionContext, this._automationGroup.ID) as AutomationGroup;
					else
						this._automationGroup = AutomationGroup.CreateManager().LazyLoad(this._automationGroup.ID) as AutomationGroup;
				return this._automationGroup;
			}
			set { _automationGroup = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public int Limit{ get {return this._limit; } set { this._limit = value;} }
		public string ExternalOfferName{ get {return this._externalOfferName; } set { this._externalOfferName = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		public int Index{ get {return this._index; } set { this._index = value;} }
		public string Comment{ get {return this._comment; } set { this._comment = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return true;} }

    public override bool IsUpdatable { get { return true;} }

    public Automation()
    { 
    }

    public Automation(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Automation(int id,  string name, Service service, AutomationGroup automationGroup, MobileOperator mobileOperator, int limit, string externalOfferName, bool isActive, int index, string comment, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._name = name;
			this._service = service;
			this._automationGroup = automationGroup;
			this._mobileOperator = mobileOperator;
			this._limit = limit;
			this._externalOfferName = externalOfferName;
			this._isActive = isActive;
			this._index = index;
			this._comment = comment;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Automation(-1, this.Name, this.Service, this.AutomationGroup, this.MobileOperator,this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment, DateTime.Now, DateTime.Now);
    }
  }
}

