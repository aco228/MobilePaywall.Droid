using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(UserSessionHeaders))] 
  public partial class UserSessionHeadersManager : MobilePaywall.Data.Sql.SqlManagerBase<UserSessionHeaders>, IUserSessionHeadersManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override UserSessionHeaders LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							UserSessionHeadersTable.GetColumnNames("[ush]") + 
							(this.Depth > 0 ? "," + UserSessionTable.GetColumnNames("[ush_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[ush_us_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[ush_us_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + DomainTable.GetColumnNames("[ush_us_d]") : string.Empty) + 
							(this.Depth > 1 ? "," + CustomerTable.GetColumnNames("[ush_us_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[ush_us_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[ush_us_mo]") : string.Empty) + 
					" FROM [core].[UserSessionHeaders] AS [ush] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [ush_us] ON [ush].[UserSessionID] = [ush_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [ush_us_ust] ON [ush_us].[UserSessionTypeID] = [ush_us_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [ush_us_s] ON [ush_us].[ServiceID] = [ush_us_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Domain] AS [ush_us_d] ON [ush_us].[DomainID] = [ush_us_d].[DomainID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Customer] AS [ush_us_c] ON [ush_us].[CustomerID] = [ush_us_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [c1] ON [ush_us].[CountryID] = [c1].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [ush_us_l] ON [ush_us].[LanguageID] = [ush_us_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [ush_us_mo] ON [ush_us].[MobileOperatorID] = [ush_us_mo].[MobileOperatorID] ";
				sqlCmdText += "WHERE [ush].[UserSessionHeadersID] = @UserSessionHeadersID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@UserSessionHeadersID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "loadinternal", "notfound"), "UserSessionHeaders could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				UserSessionHeadersTable ushTable = new UserSessionHeadersTable(query);
				UserSessionTable ush_usTable = (this.Depth > 0) ? new UserSessionTable(query) : null;
				UserSessionTypeTable ush_us_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				ServiceTable ush_us_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				DomainTable ush_us_dTable = (this.Depth > 1) ? new DomainTable(query) : null;
				CustomerTable ush_us_cTable = (this.Depth > 1) ? new CustomerTable(query) : null;
				CountryTable c1Table = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable ush_us_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				MobileOperatorTable ush_us_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				UserSessionType ush_us_ustObject = (this.Depth > 1) ? ush_us_ustTable.CreateInstance() : null;
				Service ush_us_sObject = (this.Depth > 1) ? ush_us_sTable.CreateInstance() : null;
				Domain ush_us_dObject = (this.Depth > 1) ? ush_us_dTable.CreateInstance() : null;
				Customer ush_us_cObject = (this.Depth > 1) ? ush_us_cTable.CreateInstance() : null;
				Country c1Object = (this.Depth > 1) ? c1Table.CreateInstance() : null;
				Language ush_us_lObject = (this.Depth > 1) ? ush_us_lTable.CreateInstance() : null;
				MobileOperator ush_us_moObject = (this.Depth > 1) ? ush_us_moTable.CreateInstance() : null;
				UserSession ush_usObject = (this.Depth > 0) ? ush_usTable.CreateInstance(ush_us_ustObject, ush_us_sObject, ush_us_dObject, ush_us_cObject, c1Object, ush_us_lObject, ush_us_moObject) : null;
				UserSessionHeaders ushObject = ushTable.CreateInstance(ush_usObject);
				sqlReader.Close();

				return ushObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "loadinternal", "exception"), "UserSessionHeaders could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "UserSessionHeaders", "Exception while loading UserSessionHeaders object from database. See inner exception for details.", ex);
      }
    }

    public UserSessionHeaders Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							UserSessionHeadersTable.GetColumnNames("[ush]") + 
							(this.Depth > 0 ? "," + UserSessionTable.GetColumnNames("[ush_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[ush_us_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[ush_us_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + DomainTable.GetColumnNames("[ush_us_d]") : string.Empty) + 
							(this.Depth > 1 ? "," + CustomerTable.GetColumnNames("[ush_us_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[ush_us_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[ush_us_mo]") : string.Empty) +  
					" FROM [core].[UserSessionHeaders] AS [ush] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [ush_us] ON [ush].[UserSessionID] = [ush_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [ush_us_ust] ON [ush_us].[UserSessionTypeID] = [ush_us_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [ush_us_s] ON [ush_us].[ServiceID] = [ush_us_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Domain] AS [ush_us_d] ON [ush_us].[DomainID] = [ush_us_d].[DomainID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Customer] AS [ush_us_c] ON [ush_us].[CustomerID] = [ush_us_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [c1] ON [ush_us].[CountryID] = [c1].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [ush_us_l] ON [ush_us].[LanguageID] = [ush_us_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [ush_us_mo] ON [ush_us].[MobileOperatorID] = [ush_us_mo].[MobileOperatorID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "customload", "notfound"), "UserSessionHeaders could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				UserSessionHeadersTable ushTable = new UserSessionHeadersTable(query);
				UserSessionTable ush_usTable = (this.Depth > 0) ? new UserSessionTable(query) : null;
				UserSessionTypeTable ush_us_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				ServiceTable ush_us_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				DomainTable ush_us_dTable = (this.Depth > 1) ? new DomainTable(query) : null;
				CustomerTable ush_us_cTable = (this.Depth > 1) ? new CustomerTable(query) : null;
				CountryTable c1Table = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable ush_us_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				MobileOperatorTable ush_us_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				UserSessionType ush_us_ustObject = (this.Depth > 1) ? ush_us_ustTable.CreateInstance() : null;
				Service ush_us_sObject = (this.Depth > 1) ? ush_us_sTable.CreateInstance() : null;
				Domain ush_us_dObject = (this.Depth > 1) ? ush_us_dTable.CreateInstance() : null;
				Customer ush_us_cObject = (this.Depth > 1) ? ush_us_cTable.CreateInstance() : null;
				Country c1Object = (this.Depth > 1) ? c1Table.CreateInstance() : null;
				Language ush_us_lObject = (this.Depth > 1) ? ush_us_lTable.CreateInstance() : null;
				MobileOperator ush_us_moObject = (this.Depth > 1) ? ush_us_moTable.CreateInstance() : null;
				UserSession ush_usObject = (this.Depth > 0) ? ush_usTable.CreateInstance(ush_us_ustObject, ush_us_sObject, ush_us_dObject, ush_us_cObject, c1Object, ush_us_lObject, ush_us_moObject) : null;
				UserSessionHeaders ushObject = ushTable.CreateInstance(ush_usObject);
				sqlReader.Close();

				return ushObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "customload", "exception"), "UserSessionHeaders could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "UserSessionHeaders", "Exception while loading (custom/single) UserSessionHeaders object from database. See inner exception for details.", ex);
      }
    }

    public List<UserSessionHeaders> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							UserSessionHeadersTable.GetColumnNames("[ush]") + 
							(this.Depth > 0 ? "," + UserSessionTable.GetColumnNames("[ush_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[ush_us_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[ush_us_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + DomainTable.GetColumnNames("[ush_us_d]") : string.Empty) + 
							(this.Depth > 1 ? "," + CustomerTable.GetColumnNames("[ush_us_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[c1]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[ush_us_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[ush_us_mo]") : string.Empty) +  
					" FROM [core].[UserSessionHeaders] AS [ush] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [ush_us] ON [ush].[UserSessionID] = [ush_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [ush_us_ust] ON [ush_us].[UserSessionTypeID] = [ush_us_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [ush_us_s] ON [ush_us].[ServiceID] = [ush_us_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Domain] AS [ush_us_d] ON [ush_us].[DomainID] = [ush_us_d].[DomainID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Customer] AS [ush_us_c] ON [ush_us].[CustomerID] = [ush_us_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [c1] ON [ush_us].[CountryID] = [c1].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [ush_us_l] ON [ush_us].[LanguageID] = [ush_us_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [ush_us_mo] ON [ush_us].[MobileOperatorID] = [ush_us_mo].[MobileOperatorID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "customloadmany", "notfound"), "UserSessionHeaders list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<UserSessionHeaders>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				UserSessionHeadersTable ushTable = new UserSessionHeadersTable(query);
				UserSessionTable ush_usTable = (this.Depth > 0) ? new UserSessionTable(query) : null;
				UserSessionTypeTable ush_us_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				ServiceTable ush_us_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				DomainTable ush_us_dTable = (this.Depth > 1) ? new DomainTable(query) : null;
				CustomerTable ush_us_cTable = (this.Depth > 1) ? new CustomerTable(query) : null;
				CountryTable c1Table = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable ush_us_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				MobileOperatorTable ush_us_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        List<UserSessionHeaders> result = new List<UserSessionHeaders>();
        do
        {
          
					UserSessionType ush_us_ustObject = (this.Depth > 1) ? ush_us_ustTable.CreateInstance() : null;
					Service ush_us_sObject = (this.Depth > 1) ? ush_us_sTable.CreateInstance() : null;
					Domain ush_us_dObject = (this.Depth > 1) ? ush_us_dTable.CreateInstance() : null;
					Customer ush_us_cObject = (this.Depth > 1) ? ush_us_cTable.CreateInstance() : null;
					Country c1Object = (this.Depth > 1) ? c1Table.CreateInstance() : null;
					Language ush_us_lObject = (this.Depth > 1) ? ush_us_lTable.CreateInstance() : null;
					MobileOperator ush_us_moObject = (this.Depth > 1) ? ush_us_moTable.CreateInstance() : null;
					UserSession ush_usObject = (this.Depth > 0) ? ush_usTable.CreateInstance(ush_us_ustObject, ush_us_sObject, ush_us_dObject, ush_us_cObject, c1Object, ush_us_lObject, ush_us_moObject) : null;
					UserSessionHeaders ushObject = (this.Depth > -1) ? ushTable.CreateInstance(ush_usObject) : null;
					result.Add(ushObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "customloadmany", "exception"), "UserSessionHeaders list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "UserSessionHeaders", "Exception while loading (custom/many) UserSessionHeaders object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, UserSessionHeaders data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[UserSessionHeaders] ([UserSessionID],[Data]) VALUES(@UserSessionID,@Data); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@UserSessionID", data.UserSession.ID);
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "insert", "noprimarykey"), "UserSessionHeaders could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "UserSessionHeaders", "Exception while inserting UserSessionHeaders object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "insert", "exception"), "UserSessionHeaders could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "UserSessionHeaders", "Exception while inserting UserSessionHeaders object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, UserSessionHeaders data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[UserSessionHeaders] SET " +
												"[UserSessionID] = @UserSessionID, " + 
												"[Data] = @Data, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [UserSessionHeadersID] = @UserSessionHeadersID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@UserSessionID", data.UserSession.ID);
				sqlCmd.Parameters.AddWithValue("@Data", data.Data).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@UserSessionHeadersID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "update", "norecord"), "UserSessionHeaders could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "UserSessionHeaders", "Exception while updating UserSessionHeaders object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "update", "morerecords"), "UserSessionHeaders was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "UserSessionHeaders", "Exception while updating UserSessionHeaders object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "update", "exception"), "UserSessionHeaders could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "UserSessionHeaders", "Exception while updating UserSessionHeaders object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, UserSessionHeaders data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[UserSessionHeaders] WHERE UserSessionHeadersID = @UserSessionHeadersID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@UserSessionHeadersID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "delete", "norecord"), "UserSessionHeaders could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "UserSessionHeaders", "Exception while deleting UserSessionHeaders object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ush", "delete", "exception"), "UserSessionHeaders could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "UserSessionHeaders", "Exception while deleting UserSessionHeaders object from database. See inner exception for details.", ex);
      }
    }
  }
}

