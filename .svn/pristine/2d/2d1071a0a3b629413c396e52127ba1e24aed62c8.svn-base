using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
	public partial class ContentStorageManager : IContentStorageManager
	{
		public List<ContentStorage> Load()
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection);
		}

		public List<ContentStorage> Load(IConnectionInfo connection)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection);
		}

		public List<ContentStorage> Load(ISqlConnectionInfo connection)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			return this.LoadMany(connection, parameters);
		}


		public List<ContentStorage> Load(Instance instance)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance);
		}

		public List<ContentStorage> Load(IConnectionInfo connection, Instance instance)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance);
		}

		public List<ContentStorage> Load(ISqlConnectionInfo connection, Instance instance)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cs_i].InstanceID = @InstanceID";
			parameters.OrderBy = "[cs].ContentStorageID DESC";
			parameters.Arguments.Add("InstanceID", instance.ID);
			return this.LoadMany(connection, parameters);
		}



		public List<ContentStorage> Load(Instance instance, ContentStorageType contentStorageType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, instance, contentStorageType);
		}

		public List<ContentStorage> Load(IConnectionInfo connection, Instance instance, ContentStorageType contentStorageType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, instance, contentStorageType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, instance, contentStorageType);
		}

		public List<ContentStorage> Load(ISqlConnectionInfo connection, Instance instance, ContentStorageType contentStorageType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cs_i].InstanceID = @InstanceID AND [cs_cst].ContentStorageTypeID = @ContentStorageTypeID";
			parameters.OrderBy = "[cs].ContentStorageID DESC";
			parameters.Arguments.Add("InstanceID", instance.ID);
			parameters.Arguments.Add("ContentStorageTypeID", contentStorageType.ID);
			return this.LoadMany(connection, parameters);
		}


		
		

		public ContentStorage Load(string storageName)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, storageName);
		}

		public ContentStorage Load(IConnectionInfo connection, string storageName)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, storageName);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, storageName);
		}

		public ContentStorage Load(ISqlConnectionInfo connection, string storageName)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cs].Name = @Name";
			parameters.Arguments.Add("Name", storageName);
			return this.Load(connection, parameters);
		}




	}
}

