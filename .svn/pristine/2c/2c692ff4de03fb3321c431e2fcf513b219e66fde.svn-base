using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ITemplateServiceFlowEntryManager : IDataManager<TemplateServiceFlowEntry> 
  {
	

  }

  public partial class TemplateServiceFlowEntry : MobilePaywallObject<ITemplateServiceFlowEntryManager> 
  {
		private TemplateServiceFlow _templateServiceFlow;
		private int _order = -1;
		private string _title = String.Empty;
		private string _description = String.Empty;
		private string _imageUrl = String.Empty;
		

		public TemplateServiceFlow TemplateServiceFlow 
		{
			get
			{
				if (this._templateServiceFlow != null &&
						this._templateServiceFlow.IsEmpty)
					if (this.ConnectionContext != null)
						this._templateServiceFlow = TemplateServiceFlow.CreateManager().LazyLoad(this.ConnectionContext, this._templateServiceFlow.ID) as TemplateServiceFlow;
					else
						this._templateServiceFlow = TemplateServiceFlow.CreateManager().LazyLoad(this._templateServiceFlow.ID) as TemplateServiceFlow;
				return this._templateServiceFlow;
			}
			set { _templateServiceFlow = value; }
		}

		public int Order{ get {return this._order; } set { this._order = value;} }
		public string Title{ get {return this._title; } set { this._title = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		public string ImageUrl{ get {return this._imageUrl; } set { this._imageUrl = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public TemplateServiceFlowEntry()
    { 
    }

    public TemplateServiceFlowEntry(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public TemplateServiceFlowEntry(int id,  TemplateServiceFlow templateServiceFlow, int order, string title, string description, string imageUrl, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._templateServiceFlow = templateServiceFlow;
			this._order = order;
			this._title = title;
			this._description = description;
			this._imageUrl = imageUrl;
			
    }

    public override object Clone(bool deepClone)
    {
      return new TemplateServiceFlowEntry(-1,  this.TemplateServiceFlow,this.Order,this.Title,this.Description,this.ImageUrl, DateTime.Now, DateTime.Now);
    }
  }
}

