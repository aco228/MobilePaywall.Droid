@model Statistics
<!-- BEGIN TABLE -->
@{
  List<string> columns = new List<string>();
  int i = 0;

  if (Model.Split == Split.Year)
  {
    columns.Add("Year");
  }
  if (Model.Split == Split.Month)
  {
    columns.Add("Month");
  }
  if (Model.Split == Split.Week)
  {
    columns.Add("Week");
  }
  if (Model.Split == Split.Day)
  {
    columns.Add("Day");
  }
  if (Model.Split == Split.Hour)
  {
    columns.Add("Hour");
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Instance))
  {
    columns.Add("Instance");
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Merchant))
  {
    columns.Add("Merchant");
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Service))
  {
    columns.Add("Service");
    i++;
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Provider))
  {
    columns.Add("Provider");
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Country))
  {
    columns.Add("Country");
  }
  if (Statistics.IsGroupColumnIncluded(Model.Entries, Group.Operator))
  {
    columns.Add("Operator");
  }


  int totalTransactions = Model.Entries.Sum(x => x.Transactions);
  int totalSubsequents = Model.Entries.Sum(x => x.Subsequents);


  i += columns.Count + 8;
  if (Model.Split == Split.Hour)
  {
    i++;
  }
}
<table class="table table-striped table-bordered table-hover" id="statistics_table" data-currencydate="@(Model.QueryBuilder.To.ToString("yyyy-MM-dd"))">
  @{
    if (columns.Contains("Year"))
    {
      <col>
    }
    if (columns.Contains("Month"))
    {
      <col>
    }
    if (columns.Contains("Week"))
    {
      <col>
    }
    if (columns.Contains("Day"))
    {
      <col>
    }
    if (columns.Contains("Hour"))
    {
      <col>
      <col>
    }
    if (columns.Contains("Instance"))
    {
      <col>
    }
    if (columns.Contains("Merchant"))
    {
      <col>
    }
    if (columns.Contains("Service"))
    {
      <col>
      <col>
      <col>
      <col>
    }
    if (columns.Contains("Provider"))
    {
      <col>
    }
    if (columns.Contains("Country"))
    {
      <col>
    }
    if (columns.Contains("Operator"))
    {
      <col>
    }
  }
  <col>
  <col>
  <colgroup span="2"></colgroup>
  <colgroup span="2"></colgroup>
  <colgroup span="2"></colgroup>
  <thead>
    <tr>
      @{
        if (columns.Contains("Year"))
        {
          <th rowspan="2">
            Year
          </th>
        }
        if (columns.Contains("Month"))
        {
          <th rowspan="2">
            Month
          </th>
        }
        if (columns.Contains("Week"))
        {
          <th rowspan="2">
            Week
          </th>
        }
        if (columns.Contains("Day"))
        {
          <th rowspan="2">
            Day
          </th>
        }
        if (columns.Contains("Hour"))
        {
          <th rowspan="2">
            Date
          </th>
          <th rowspan="2">
            Hour
          </th>
        }
        if (columns.Contains("Instance"))
        {
          <th rowspan="2">
            Instance
          </th>
        }
        if (columns.Contains("Merchant"))
        {
          <th rowspan="2">
            Merchant
          </th>
        }
        if (columns.Contains("Service"))
        {
          <th rowspan="2">
            Service
          </th>
          <th rowspan="2">
            Offer Name
          </th>
        }
        if (columns.Contains("Provider"))
        {
          <th rowspan="2">
            Payment Provider
          </th>
        }
        if (columns.Contains("Country"))
        {
          <th rowspan="2">
            Country
          </th>
        }
        if (columns.Contains("Operator"))
        {
          <th rowspan="2">
            Operator
          </th>
        }
      }
      <th rowspan="2">
        Transactions
      </th>
      <th rowspan="2">
        Rebills
      </th>
      @if (columns.Contains("Service"))
      {
        <th rowspan="2">
          Gross Price
        </th>
        <th rowspan="2">
          Payout Price
        </th>
      }
      <th colspan="2" scope="colgroup">
        Transactions
      </th>
      <th colspan="2" scope="colgroup">
        Rebills
      </th>
      <th colspan="2" scope="colgroup">
        Total
      </th>
    </tr>
    <tr>
      <th scope="col">Gross</th>
      <th scope="col">Payout</th>
      <th scope="col">Gross</th>
      <th scope="col">Payout</th>
      <th scope="col">Gross</th>
      <th scope="col">Payout</th>
    </tr>
  </thead>
  <tbody>
    @{
      int index = 1;
      foreach (StatisticEntry entry in Model.Entries)
      {
        <tr>
          @if (columns.Contains("Year"))
          {
            <td>
              @if (entry.Date != null)
              {
                @entry.Date.Value.ToString("yyyy")
              }
            </td>
          }
          @if (columns.Contains("Month"))
          {
            <td>
              @if (entry.Date != null)
              {
                @entry.Date.Value.ToString("MMM-yyyy")
              }
            </td>
          }
          @if (columns.Contains("Week"))
          {
            <td>
              @if (entry.WeekRange != null)
              {
                @entry.WeekRange
              }
            </td>
          }
          @if (columns.Contains("Day"))
          {
            <td>
              @if (entry.Date != null)
              {
                @entry.Date.Value.ToString("dd-MMM-yyyy")
              }
            </td>
          }
          @if (columns.Contains("Hour"))
          {
            <td>
              @entry.Date.Value.ToString("dd-MMM-yyyy")
            </td>
            <td>
              @string.Format("{0}", entry.Date.Value.ToString("HH:mm"))
            </td>
          }

          @if (columns.Contains("Instance"))
          {
            <td>
              @entry.InstanceName
            </td>
          }

          @if (columns.Contains("Merchant"))
          {
            <td>
              @entry.MerchantName
            </td>
          }

          @if (columns.Contains("Service"))
          {
            <td>
              @entry.ServiceName
            </td>
            <td>
              @entry.ServiceOfferName
            </td>
          }

          @if (columns.Contains("Provider"))
          {
            <td>
              @entry.ProviderName
            </td>
          }

          @if (columns.Contains("Country"))
          {
            <td>
              @if (entry.CountryName != null)
              {
                @entry.CountryName
              }
            </td>
          }

          @if (columns.Contains("Operator"))
          {
            <td>
              @if (entry.OperatorName != null)
              {
                @entry.OperatorName
              }
            </td>
          }

          <td>
            @entry.Transactions
          </td>
          <td>
            @entry.Subsequents
          </td>
          @if (columns.Contains("Service"))
          {
            <td>
              <span data-toggle="tooltip" class="converted-price" data-price="@(entry.Gross != null ? entry.Gross : "")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
                @String.Format("{0} {1}", entry.Gross, !string.IsNullOrEmpty(entry.Gross) ? entry.CurrencySymbol : "")
              </span>
            </td>

            <td>
              <span data-toggle="tooltip" class="converted-price" data-price="@(entry.Payout != null ? entry.Payout : "")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
                @String.Format("{0} {1}", entry.Payout, !string.IsNullOrEmpty(entry.Payout) ? entry.CurrencySymbol : "")
              </span>
            </td>
          }
          <td>
            <span data-toggle="tooltip" class="converted-price convertedTotalGrossTrans" data-price="@(entry.GrossTransactions != 0 ? entry.GrossTransactions.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.GrossTransactions != 0 ? String.Format("{0:N} {1}", Math.Round(entry.GrossTransactions, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
          <td>
            <span data-toggle="tooltip" class="converted-price convertedTotalPayoutTrans" data-price="@(entry.PayoutTransactions != 0 ? entry.PayoutTransactions.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.PayoutTransactions != 0 ? String.Format("{0:N} {1}", Math.Round(entry.PayoutTransactions, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
          <td>
            <span data-toggle="tooltip" class="converted-price convertedTotalGrossSubs" data-price="@(entry.GrossSubsequents != 0 ? entry.GrossSubsequents.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.GrossSubsequents != 0 ? String.Format("{0:N} {1}", Math.Round(entry.GrossSubsequents, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
          <td>
            <span data-toggle="tooltip" class="converted-price convertedTotalPayoutSubs" data-price="@(entry.PayoutSubsequents != 0 ? entry.PayoutSubsequents.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.PayoutSubsequents != 0 ? String.Format("{0:N} {1}", Math.Round(entry.PayoutSubsequents, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
          <td>
            <span data-toggle="tooltip" class="converted-price convertedGrossTotal" data-price="@(entry.TotalGross != 0 ? entry.TotalGross.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.TotalGross != 0 ? String.Format("{0:N} {1}", Math.Round(entry.TotalGross, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
          <td>
            <span data-toggle="tooltip" class="converted-price convertedPayoutTotal" data-price="@(entry.TotalPayout != 0 ? entry.TotalPayout.ToString() : "0")" data-abbreviation="@(entry.CurrencyAbbreviation != null ? entry.CurrencyAbbreviation : "EUR")">
              @(entry.TotalPayout != 0 ? String.Format("{0:N} {1}", Math.Round(entry.TotalPayout, 2), entry.CurrencySymbol) : "0")
            </span>
          </td>
        </tr>

            index++;
      }
    }
  </tbody>
  <tfoot>
    <tr style="background: rgb(75, 119, 190) none repeat scroll 0 0; color: rgb(255, 255, 255); font-weight: 600;">
      @if (i > 0 && i - 8 > 0)
      {
        int t = i - 8;
        while (t > 0)
        {
          t = t - 1;
          @Html.Raw(Server.HtmlDecode("<td></td>"));
        }
      }
      <td>
        @totalTransactions
      </td>
      <td>
        @totalSubsequents
      </td>

      @if (columns.Contains("Service"))
      {
        <td></td>
        <td></td>
      }
      <td class="totalGrossTrans">
        @*  @totalGrossTransactions*@
      </td>
      <td class="totalPayoutTrans">
        @*@totalPayoutTransactions*@
      </td>
      <td class="totalGrossSubs">
        @*@totalGrossSubsequents*@
      </td>
      <td class="totalPayoutSubs">
        @*@totalPayoutSubsequents*@
      </td>
      <td class="grossTotal">
        @*@totalTGross*@
      </td>
      <td class="payoutTotal">
        @*@totalTPayout*@
      </td>
    </tr>
  </tfoot>
</table>

