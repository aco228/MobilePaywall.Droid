using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(Content))] 
  public partial class ContentManager : MobilePaywall.Data.Sql.SqlManagerBase<Content>, IContentManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override Content LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ContentTable.GetColumnNames("[c]") + 
							(this.Depth > 0 ? "," + ContentGroupTable.GetColumnNames("[c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cg_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTypeTable.GetColumnNames("[c_cg_cgt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentStorageTable.GetColumnNames("[c_cs]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTypeTable.GetColumnNames("[c_cs_cst]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cs_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + AgeRatingTable.GetColumnNames("[c_ar]") : string.Empty) + 
					" FROM [core].[Content] AS [c] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [c_cg] ON [c].[ContentGroupID] = [c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cg_i] ON [c_cg].[InstanceID] = [c_cg_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroupType] AS [c_cg_cgt] ON [c_cg].[ContentGroupTypeID] = [c_cg_cgt].[ContentGroupTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [c_ct] ON [c].[ContentTypeID] = [c_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [c_cs] ON [c].[ContentStorageID] = [c_cs].[ContentStorageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorageType] AS [c_cs_cst] ON [c_cs].[ContentStorageTypeID] = [c_cs_cst].[ContentStorageTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cs_i] ON [c_cs].[InstanceID] = [c_cs_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [c_ar] ON [c].[AgeRatingID] = [c_ar].[AgeRatingID] ";
				sqlCmdText += "WHERE [c].[ContentID] = @ContentID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "loadinternal", "notfound"), "Content could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentTable cTable = new ContentTable(query);
				ContentGroupTable c_cgTable = (this.Depth > 0) ? new ContentGroupTable(query) : null;
				InstanceTable c_cg_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ContentGroupTypeTable c_cg_cgtTable = (this.Depth > 1) ? new ContentGroupTypeTable(query) : null;
				ContentTypeTable c_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ContentStorageTable c_csTable = (this.Depth > 0) ? new ContentStorageTable(query) : null;
				ContentStorageTypeTable c_cs_cstTable = (this.Depth > 1) ? new ContentStorageTypeTable(query) : null;
				InstanceTable c_cs_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				AgeRatingTable c_arTable = (this.Depth > 0) ? new AgeRatingTable(query) : null;

        
				Instance c_cg_iObject = (this.Depth > 1) ? c_cg_iTable.CreateInstance() : null;
				ContentGroupType c_cg_cgtObject = (this.Depth > 1) ? c_cg_cgtTable.CreateInstance() : null;
				ContentGroup c_cgObject = (this.Depth > 0) ? c_cgTable.CreateInstance(c_cg_iObject, c_cg_cgtObject) : null;
				ContentType c_ctObject = (this.Depth > 0) ? c_ctTable.CreateInstance() : null;
				ContentStorageType c_cs_cstObject = (this.Depth > 1) ? c_cs_cstTable.CreateInstance() : null;
				Instance c_cs_iObject = (this.Depth > 1) ? c_cs_iTable.CreateInstance() : null;
				ContentStorage c_csObject = (this.Depth > 0) ? c_csTable.CreateInstance(c_cs_cstObject, c_cs_iObject) : null;
				AgeRating c_arObject = (this.Depth > 0) ? c_arTable.CreateInstance() : null;
				Content cObject = cTable.CreateInstance(c_cgObject, c_ctObject, c_csObject, c_arObject);
				sqlReader.Close();

				return cObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "loadinternal", "exception"), "Content could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Content", "Exception while loading Content object from database. See inner exception for details.", ex);
      }
    }

    public Content Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentTable.GetColumnNames("[c]") + 
							(this.Depth > 0 ? "," + ContentGroupTable.GetColumnNames("[c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cg_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTypeTable.GetColumnNames("[c_cg_cgt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentStorageTable.GetColumnNames("[c_cs]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTypeTable.GetColumnNames("[c_cs_cst]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cs_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + AgeRatingTable.GetColumnNames("[c_ar]") : string.Empty) +  
					" FROM [core].[Content] AS [c] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [c_cg] ON [c].[ContentGroupID] = [c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cg_i] ON [c_cg].[InstanceID] = [c_cg_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroupType] AS [c_cg_cgt] ON [c_cg].[ContentGroupTypeID] = [c_cg_cgt].[ContentGroupTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [c_ct] ON [c].[ContentTypeID] = [c_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [c_cs] ON [c].[ContentStorageID] = [c_cs].[ContentStorageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorageType] AS [c_cs_cst] ON [c_cs].[ContentStorageTypeID] = [c_cs_cst].[ContentStorageTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cs_i] ON [c_cs].[InstanceID] = [c_cs_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [c_ar] ON [c].[AgeRatingID] = [c_ar].[AgeRatingID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "customload", "notfound"), "Content could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentTable cTable = new ContentTable(query);
				ContentGroupTable c_cgTable = (this.Depth > 0) ? new ContentGroupTable(query) : null;
				InstanceTable c_cg_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ContentGroupTypeTable c_cg_cgtTable = (this.Depth > 1) ? new ContentGroupTypeTable(query) : null;
				ContentTypeTable c_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ContentStorageTable c_csTable = (this.Depth > 0) ? new ContentStorageTable(query) : null;
				ContentStorageTypeTable c_cs_cstTable = (this.Depth > 1) ? new ContentStorageTypeTable(query) : null;
				InstanceTable c_cs_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				AgeRatingTable c_arTable = (this.Depth > 0) ? new AgeRatingTable(query) : null;

        
				Instance c_cg_iObject = (this.Depth > 1) ? c_cg_iTable.CreateInstance() : null;
				ContentGroupType c_cg_cgtObject = (this.Depth > 1) ? c_cg_cgtTable.CreateInstance() : null;
				ContentGroup c_cgObject = (this.Depth > 0) ? c_cgTable.CreateInstance(c_cg_iObject, c_cg_cgtObject) : null;
				ContentType c_ctObject = (this.Depth > 0) ? c_ctTable.CreateInstance() : null;
				ContentStorageType c_cs_cstObject = (this.Depth > 1) ? c_cs_cstTable.CreateInstance() : null;
				Instance c_cs_iObject = (this.Depth > 1) ? c_cs_iTable.CreateInstance() : null;
				ContentStorage c_csObject = (this.Depth > 0) ? c_csTable.CreateInstance(c_cs_cstObject, c_cs_iObject) : null;
				AgeRating c_arObject = (this.Depth > 0) ? c_arTable.CreateInstance() : null;
				Content cObject = cTable.CreateInstance(c_cgObject, c_ctObject, c_csObject, c_arObject);
				sqlReader.Close();

				return cObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "customload", "exception"), "Content could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Content", "Exception while loading (custom/single) Content object from database. See inner exception for details.", ex);
      }
    }

    public List<Content> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentTable.GetColumnNames("[c]") + 
							(this.Depth > 0 ? "," + ContentGroupTable.GetColumnNames("[c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cg_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTypeTable.GetColumnNames("[c_cg_cgt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentStorageTable.GetColumnNames("[c_cs]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTypeTable.GetColumnNames("[c_cs_cst]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[c_cs_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + AgeRatingTable.GetColumnNames("[c_ar]") : string.Empty) +  
					" FROM [core].[Content] AS [c] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [c_cg] ON [c].[ContentGroupID] = [c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cg_i] ON [c_cg].[InstanceID] = [c_cg_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroupType] AS [c_cg_cgt] ON [c_cg].[ContentGroupTypeID] = [c_cg_cgt].[ContentGroupTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [c_ct] ON [c].[ContentTypeID] = [c_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [c_cs] ON [c].[ContentStorageID] = [c_cs].[ContentStorageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorageType] AS [c_cs_cst] ON [c_cs].[ContentStorageTypeID] = [c_cs_cst].[ContentStorageTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [c_cs_i] ON [c_cs].[InstanceID] = [c_cs_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [c_ar] ON [c].[AgeRatingID] = [c_ar].[AgeRatingID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "customloadmany", "notfound"), "Content list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<Content>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentTable cTable = new ContentTable(query);
				ContentGroupTable c_cgTable = (this.Depth > 0) ? new ContentGroupTable(query) : null;
				InstanceTable c_cg_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ContentGroupTypeTable c_cg_cgtTable = (this.Depth > 1) ? new ContentGroupTypeTable(query) : null;
				ContentTypeTable c_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ContentStorageTable c_csTable = (this.Depth > 0) ? new ContentStorageTable(query) : null;
				ContentStorageTypeTable c_cs_cstTable = (this.Depth > 1) ? new ContentStorageTypeTable(query) : null;
				InstanceTable c_cs_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				AgeRatingTable c_arTable = (this.Depth > 0) ? new AgeRatingTable(query) : null;

        List<Content> result = new List<Content>();
        do
        {
          
					Instance c_cg_iObject = (this.Depth > 1) ? c_cg_iTable.CreateInstance() : null;
					ContentGroupType c_cg_cgtObject = (this.Depth > 1) ? c_cg_cgtTable.CreateInstance() : null;
					ContentGroup c_cgObject = (this.Depth > 0) ? c_cgTable.CreateInstance(c_cg_iObject, c_cg_cgtObject) : null;
					ContentType c_ctObject = (this.Depth > 0) ? c_ctTable.CreateInstance() : null;
					ContentStorageType c_cs_cstObject = (this.Depth > 1) ? c_cs_cstTable.CreateInstance() : null;
					Instance c_cs_iObject = (this.Depth > 1) ? c_cs_iTable.CreateInstance() : null;
					ContentStorage c_csObject = (this.Depth > 0) ? c_csTable.CreateInstance(c_cs_cstObject, c_cs_iObject) : null;
					AgeRating c_arObject = (this.Depth > 0) ? c_arTable.CreateInstance() : null;
					Content cObject = (this.Depth > -1) ? cTable.CreateInstance(c_cgObject, c_ctObject, c_csObject, c_arObject) : null;
					result.Add(cObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "customloadmany", "exception"), "Content list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "Content", "Exception while loading (custom/many) Content object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, Content data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[Content] ([ContentGroupID],[ContentTypeID],[ContentStorageID],[AgeRatingID],[IsEnabled]) VALUES(@ContentGroupID,@ContentTypeID,@ContentStorageID,@AgeRatingID,@IsEnabled); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ContentGroupID", data.ContentGroup.ID);
				sqlCmd.Parameters.AddWithValue("@ContentTypeID", data.ContentType.ID);
				sqlCmd.Parameters.AddWithValue("@ContentStorageID", data.ContentStorage.ID);
				sqlCmd.Parameters.AddWithValue("@AgeRatingID", data.AgeRating.ID);
				sqlCmd.Parameters.AddWithValue("@IsEnabled", data.IsEnabled).SqlDbType = SqlDbType.Bit;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "insert", "noprimarykey"), "Content could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "Content", "Exception while inserting Content object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "insert", "exception"), "Content could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "Content", "Exception while inserting Content object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, Content data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[Content] SET " +
												"[ContentGroupID] = @ContentGroupID, " + 
												"[ContentTypeID] = @ContentTypeID, " + 
												"[ContentStorageID] = @ContentStorageID, " + 
												"[AgeRatingID] = @AgeRatingID, " + 
												"[IsEnabled] = @IsEnabled, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ContentID] = @ContentID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ContentGroupID", data.ContentGroup.ID);
				sqlCmd.Parameters.AddWithValue("@ContentTypeID", data.ContentType.ID);
				sqlCmd.Parameters.AddWithValue("@ContentStorageID", data.ContentStorage.ID);
				sqlCmd.Parameters.AddWithValue("@AgeRatingID", data.AgeRating.ID);
				sqlCmd.Parameters.AddWithValue("@IsEnabled", data.IsEnabled).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ContentID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "update", "norecord"), "Content could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "Content", "Exception while updating Content object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "update", "morerecords"), "Content was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "Content", "Exception while updating Content object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "update", "exception"), "Content could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "Content", "Exception while updating Content object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, Content data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[Content] WHERE ContentID = @ContentID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "delete", "norecord"), "Content could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "Content", "Exception while deleting Content object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("c", "delete", "exception"), "Content could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "Content", "Exception while deleting Content object from database. See inner exception for details.", ex);
      }
    }
  }
}

