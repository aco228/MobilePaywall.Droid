using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class TaskTable : TableBase<Task>
  {
    public static string GetColumnNames()
    {
      return TableBase<Task>.GetColumnNames(string.Empty, TaskTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Task>.GetColumnNames(tablePrefix, TaskTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription TaskID = new ColumnDescription("TaskID", 0, typeof(int));
			public static readonly ColumnDescription TaskTypeID = new ColumnDescription("TaskTypeID", 1, typeof(int));
			public static readonly ColumnDescription TaskStatusID = new ColumnDescription("TaskStatusID", 2, typeof(int));
			public static readonly ColumnDescription TaskActionID = new ColumnDescription("TaskActionID", 3, typeof(int));
			public static readonly ColumnDescription CreatorID = new ColumnDescription("CreatorID", 4, typeof(int));
			public static readonly ColumnDescription ResolverID = new ColumnDescription("ResolverID", 5, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 6, typeof(string));
			public static readonly ColumnDescription Note = new ColumnDescription("Note", 7, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 8, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 9, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				TaskID,
				TaskTypeID,
				TaskStatusID,
				TaskActionID,
				CreatorID,
				ResolverID,
				Data,
				Note,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public TaskTable(SqlQuery query) : base(query) { }
    public TaskTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int TaskID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TaskID)); } }
		public int TaskTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TaskTypeID)); } }
		public int TaskStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TaskStatusID)); } }
		public int TaskActionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TaskActionID)); } }
		public int CreatorID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CreatorID)); } }
		
		public int? ResolverID 
		{
			get
			{
				int index = this.GetIndex(Columns.ResolverID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public string Data { get { return this.Reader.GetString(this.GetIndex(Columns.Data)); } }
		
		public string Note 
		{
			get
			{
				int index = this.GetIndex(Columns.Note);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Task CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,new Client(this.CreatorID), (ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		public Task CreateInstance(Client creator)  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,creator ?? new Client(this.CreatorID), (ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		public Task CreateInstance(TaskType taskType)  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,taskType ?? new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,new Client(this.CreatorID), (ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		public Task CreateInstance(Client creator, Client resolver)  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,creator ?? new Client(this.CreatorID), resolver ?? (this.ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		public Task CreateInstance(TaskType taskType, Client creator)  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,taskType ?? new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,creator ?? new Client(this.CreatorID), (ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		public Task CreateInstance(TaskType taskType, Client creator, Client resolver)  
		{ 
			if (!this.HasData) return null;
			return new Task(this.TaskID,taskType ?? new TaskType(this.TaskTypeID), (TaskStatus)this.TaskStatusID,(TaskAction)this.TaskActionID,creator ?? new Client(this.CreatorID), resolver ?? (this.ResolverID.HasValue ? new Client(this.ResolverID.Value) : null), this.Data,this.Note,this.Updated,this.Created); 
		}
		

  }
}

