using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAndroidClientSessionManager : IDataManager<AndroidClientSession> 
  {
	

  }

  public partial class AndroidClientSession : MobilePaywallObject<IAndroidClientSessionManager> 
  {
		private AndroidDistribution _androidDistribution;
		private AndroidDistributionGroup _androidDistributionGroup;
		private string _androidUniqueID = String.Empty;
		private string _tokenID = String.Empty;
		private Country _country;
		private string _msisdn = String.Empty;
		private string _oSVersion = String.Empty;
		private string _versionSDK = String.Empty;
		private string _device = String.Empty;
		private string _company = String.Empty;
		private string _model = String.Empty;
		private string _product = String.Empty;
		private Guid? _fingerprintID;
		private string _referrer = String.Empty;
		private bool _hasSmsPermission = false;
		private DateTime _lastPing = DateTime.MinValue;
		

		public AndroidDistribution AndroidDistribution 
		{
			get
			{
				if (this._androidDistribution != null &&
						this._androidDistribution.IsEmpty)
					if (this.ConnectionContext != null)
						this._androidDistribution = AndroidDistribution.CreateManager().LazyLoad(this.ConnectionContext, this._androidDistribution.ID) as AndroidDistribution;
					else
						this._androidDistribution = AndroidDistribution.CreateManager().LazyLoad(this._androidDistribution.ID) as AndroidDistribution;
				return this._androidDistribution;
			}
			set { _androidDistribution = value; }
		}

		public AndroidDistributionGroup AndroidDistributionGroup 
		{
			get
			{
				if (this._androidDistributionGroup != null &&
						this._androidDistributionGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._androidDistributionGroup = AndroidDistributionGroup.CreateManager().LazyLoad(this.ConnectionContext, this._androidDistributionGroup.ID) as AndroidDistributionGroup;
					else
						this._androidDistributionGroup = AndroidDistributionGroup.CreateManager().LazyLoad(this._androidDistributionGroup.ID) as AndroidDistributionGroup;
				return this._androidDistributionGroup;
			}
			set { _androidDistributionGroup = value; }
		}

		public string AndroidUniqueID{ get {return this._androidUniqueID; } set { this._androidUniqueID = value;} }
		public string TokenID{ get {return this._tokenID; } set { this._tokenID = value;} }
		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public string Msisdn{ get {return this._msisdn; } set { this._msisdn = value;} }
		public string OSVersion{ get {return this._oSVersion; } set { this._oSVersion = value;} }
		public string VersionSDK{ get {return this._versionSDK; } set { this._versionSDK = value;} }
		public string Device{ get {return this._device; } set { this._device = value;} }
		public string Company{ get {return this._company; } set { this._company = value;} }
		public string Model{ get {return this._model; } set { this._model = value;} }
		public string Product{ get {return this._product; } set { this._product = value;} }
		public Guid? FingerprintID { get { return this._fingerprintID; } set { this._fingerprintID = value;}}
		public string Referrer{ get {return this._referrer; } set { this._referrer = value;} }
		public bool HasSmsPermission {get {return this._hasSmsPermission; } set { this._hasSmsPermission = value;} }
		public DateTime LastPing { get { return this._lastPing; } set { this._lastPing = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public AndroidClientSession()
    { 
    }

    public AndroidClientSession(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public AndroidClientSession(int id,  AndroidDistribution androidDistribution, AndroidDistributionGroup androidDistributionGroup, string androidUniqueID, string tokenID, Country country, string msisdn, string oSVersion, string versionSDK, string device, string company, string model, string product, Guid? fingerprintID, string referrer, bool hasSmsPermission, DateTime lastPing, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._androidDistribution = androidDistribution;
			this._androidDistributionGroup = androidDistributionGroup;
			this._androidUniqueID = androidUniqueID;
			this._tokenID = tokenID;
			this._country = country;
			this._msisdn = msisdn;
			this._oSVersion = oSVersion;
			this._versionSDK = versionSDK;
			this._device = device;
			this._company = company;
			this._model = model;
			this._product = product;
			this._fingerprintID = fingerprintID;
			this._referrer = referrer;
			this._hasSmsPermission = hasSmsPermission;
			this._lastPing = lastPing;
			
    }

    public override object Clone(bool deepClone)
    {
      return new AndroidClientSession(-1,  this.AndroidDistribution, this.AndroidDistributionGroup,this.AndroidUniqueID,this.TokenID, this.Country,this.Msisdn,this.OSVersion,this.VersionSDK,this.Device,this.Company,this.Model,this.Product,this.FingerprintID,this.Referrer,this.HasSmsPermission,this.LastPing, DateTime.Now, DateTime.Now);
    }
  }
}

