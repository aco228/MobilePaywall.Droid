using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(MsisdnBlacklist))] 
  public partial class MsisdnBlacklistManager : MobilePaywall.Data.Sql.SqlManagerBase<MsisdnBlacklist>, IMsisdnBlacklistManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override MsisdnBlacklist LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							MsisdnBlacklistTable.GetColumnNames("[mb]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[mb_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[mb_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[mb_m_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_m_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[mb_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[mb_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[mb_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[mb_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[mb_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[mb_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[mb_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[mb_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[mb_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[mb_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[mb_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_s_t]") : string.Empty) + 
					" FROM [core].[MsisdnBlacklist] AS [mb] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_i] ON [mb].[InstanceID] = [mb_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_m] ON [mb].[MerchantID] = [mb_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_m_i] ON [mb_m].[InstanceID] = [mb_m_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_m_t] ON [mb_m].[TemplateID] = [mb_m_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [mb_s] ON [mb].[ServiceID] = [mb_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [mb_s_a] ON [mb_s].[ApplicationID] = [mb_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [mb_s_p] ON [mb_s].[ProductID] = [mb_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_s_m] ON [mb_s].[MerchantID] = [mb_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [mb_s_st] ON [mb_s].[ServiceTypeID] = [mb_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [mb_s_ust] ON [mb_s].[UserSessionTypeID] = [mb_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [mb_s_c] ON [mb_s].[FallbackCountryID] = [mb_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [mb_s_l] ON [mb_s].[FallbackLanguageID] = [mb_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [mb_s_ar] ON [mb_s].[FallbackAgeRatingID] = [mb_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [mb_s_sc] ON [mb_s].[ServiceConfigurationID] = [mb_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [mb_s_bm] ON [mb_s].[BusinessModelID] = [mb_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_s_t] ON [mb_s].[TemplateID] = [mb_s_t].[TemplateID] ";
				sqlCmdText += "WHERE [mb].[MsisdnBlacklistID] = @MsisdnBlacklistID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@MsisdnBlacklistID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "loadinternal", "notfound"), "MsisdnBlacklist could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				MsisdnBlacklistTable mbTable = new MsisdnBlacklistTable(query);
				InstanceTable mb_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				MerchantTable mb_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable mb_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				TemplateTable mb_m_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ServiceTable mb_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable mb_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable mb_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable mb_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable mb_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable mb_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable mb_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable mb_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable mb_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable mb_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable mb_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable mb_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				Instance mb_iObject = (this.Depth > 0) ? mb_iTable.CreateInstance() : null;
				Instance mb_m_iObject = (this.Depth > 1) ? mb_m_iTable.CreateInstance() : null;
				Template mb_m_tObject = (this.Depth > 1) ? mb_m_tTable.CreateInstance() : null;
				Merchant mb_mObject = (this.Depth > 0) ? mb_mTable.CreateInstance(mb_m_iObject, mb_m_tObject) : null;
				Application mb_s_aObject = (this.Depth > 1) ? mb_s_aTable.CreateInstance() : null;
				Product mb_s_pObject = (this.Depth > 1) ? mb_s_pTable.CreateInstance() : null;
				Merchant mb_s_mObject = (this.Depth > 1) ? mb_s_mTable.CreateInstance() : null;
				ServiceType mb_s_stObject = (this.Depth > 1) ? mb_s_stTable.CreateInstance() : null;
				UserSessionType mb_s_ustObject = (this.Depth > 1) ? mb_s_ustTable.CreateInstance() : null;
				Country mb_s_cObject = (this.Depth > 1) ? mb_s_cTable.CreateInstance() : null;
				Language mb_s_lObject = (this.Depth > 1) ? mb_s_lTable.CreateInstance() : null;
				AgeRating mb_s_arObject = (this.Depth > 1) ? mb_s_arTable.CreateInstance() : null;
				ServiceConfiguration mb_s_scObject = (this.Depth > 1) ? mb_s_scTable.CreateInstance() : null;
				BusinessModel mb_s_bmObject = (this.Depth > 1) ? mb_s_bmTable.CreateInstance() : null;
				Template mb_s_tObject = (this.Depth > 1) ? mb_s_tTable.CreateInstance() : null;
				Service mb_sObject = (this.Depth > 0) ? mb_sTable.CreateInstance(mb_s_aObject, mb_s_pObject, mb_s_mObject, mb_s_stObject, mb_s_ustObject, mb_s_cObject, mb_s_lObject, mb_s_arObject, mb_s_scObject, mb_s_bmObject, mb_s_tObject) : null;
				MsisdnBlacklist mbObject = mbTable.CreateInstance(mb_iObject, mb_mObject, mb_sObject);
				sqlReader.Close();

				return mbObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "loadinternal", "exception"), "MsisdnBlacklist could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "MsisdnBlacklist", "Exception while loading MsisdnBlacklist object from database. See inner exception for details.", ex);
      }
    }

    public MsisdnBlacklist Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							MsisdnBlacklistTable.GetColumnNames("[mb]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[mb_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[mb_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[mb_m_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_m_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[mb_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[mb_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[mb_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[mb_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[mb_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[mb_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[mb_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[mb_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[mb_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[mb_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[mb_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_s_t]") : string.Empty) +  
					" FROM [core].[MsisdnBlacklist] AS [mb] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_i] ON [mb].[InstanceID] = [mb_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_m] ON [mb].[MerchantID] = [mb_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_m_i] ON [mb_m].[InstanceID] = [mb_m_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_m_t] ON [mb_m].[TemplateID] = [mb_m_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [mb_s] ON [mb].[ServiceID] = [mb_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [mb_s_a] ON [mb_s].[ApplicationID] = [mb_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [mb_s_p] ON [mb_s].[ProductID] = [mb_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_s_m] ON [mb_s].[MerchantID] = [mb_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [mb_s_st] ON [mb_s].[ServiceTypeID] = [mb_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [mb_s_ust] ON [mb_s].[UserSessionTypeID] = [mb_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [mb_s_c] ON [mb_s].[FallbackCountryID] = [mb_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [mb_s_l] ON [mb_s].[FallbackLanguageID] = [mb_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [mb_s_ar] ON [mb_s].[FallbackAgeRatingID] = [mb_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [mb_s_sc] ON [mb_s].[ServiceConfigurationID] = [mb_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [mb_s_bm] ON [mb_s].[BusinessModelID] = [mb_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_s_t] ON [mb_s].[TemplateID] = [mb_s_t].[TemplateID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "customload", "notfound"), "MsisdnBlacklist could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				MsisdnBlacklistTable mbTable = new MsisdnBlacklistTable(query);
				InstanceTable mb_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				MerchantTable mb_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable mb_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				TemplateTable mb_m_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ServiceTable mb_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable mb_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable mb_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable mb_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable mb_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable mb_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable mb_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable mb_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable mb_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable mb_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable mb_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable mb_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				Instance mb_iObject = (this.Depth > 0) ? mb_iTable.CreateInstance() : null;
				Instance mb_m_iObject = (this.Depth > 1) ? mb_m_iTable.CreateInstance() : null;
				Template mb_m_tObject = (this.Depth > 1) ? mb_m_tTable.CreateInstance() : null;
				Merchant mb_mObject = (this.Depth > 0) ? mb_mTable.CreateInstance(mb_m_iObject, mb_m_tObject) : null;
				Application mb_s_aObject = (this.Depth > 1) ? mb_s_aTable.CreateInstance() : null;
				Product mb_s_pObject = (this.Depth > 1) ? mb_s_pTable.CreateInstance() : null;
				Merchant mb_s_mObject = (this.Depth > 1) ? mb_s_mTable.CreateInstance() : null;
				ServiceType mb_s_stObject = (this.Depth > 1) ? mb_s_stTable.CreateInstance() : null;
				UserSessionType mb_s_ustObject = (this.Depth > 1) ? mb_s_ustTable.CreateInstance() : null;
				Country mb_s_cObject = (this.Depth > 1) ? mb_s_cTable.CreateInstance() : null;
				Language mb_s_lObject = (this.Depth > 1) ? mb_s_lTable.CreateInstance() : null;
				AgeRating mb_s_arObject = (this.Depth > 1) ? mb_s_arTable.CreateInstance() : null;
				ServiceConfiguration mb_s_scObject = (this.Depth > 1) ? mb_s_scTable.CreateInstance() : null;
				BusinessModel mb_s_bmObject = (this.Depth > 1) ? mb_s_bmTable.CreateInstance() : null;
				Template mb_s_tObject = (this.Depth > 1) ? mb_s_tTable.CreateInstance() : null;
				Service mb_sObject = (this.Depth > 0) ? mb_sTable.CreateInstance(mb_s_aObject, mb_s_pObject, mb_s_mObject, mb_s_stObject, mb_s_ustObject, mb_s_cObject, mb_s_lObject, mb_s_arObject, mb_s_scObject, mb_s_bmObject, mb_s_tObject) : null;
				MsisdnBlacklist mbObject = mbTable.CreateInstance(mb_iObject, mb_mObject, mb_sObject);
				sqlReader.Close();

				return mbObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "customload", "exception"), "MsisdnBlacklist could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "MsisdnBlacklist", "Exception while loading (custom/single) MsisdnBlacklist object from database. See inner exception for details.", ex);
      }
    }

    public List<MsisdnBlacklist> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							MsisdnBlacklistTable.GetColumnNames("[mb]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[mb_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[mb_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[mb_m_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_m_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[mb_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[mb_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[mb_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[mb_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[mb_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[mb_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[mb_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[mb_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[mb_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[mb_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[mb_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[mb_s_t]") : string.Empty) +  
					" FROM [core].[MsisdnBlacklist] AS [mb] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_i] ON [mb].[InstanceID] = [mb_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_m] ON [mb].[MerchantID] = [mb_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [mb_m_i] ON [mb_m].[InstanceID] = [mb_m_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_m_t] ON [mb_m].[TemplateID] = [mb_m_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [mb_s] ON [mb].[ServiceID] = [mb_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [mb_s_a] ON [mb_s].[ApplicationID] = [mb_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [mb_s_p] ON [mb_s].[ProductID] = [mb_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [mb_s_m] ON [mb_s].[MerchantID] = [mb_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [mb_s_st] ON [mb_s].[ServiceTypeID] = [mb_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [mb_s_ust] ON [mb_s].[UserSessionTypeID] = [mb_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [mb_s_c] ON [mb_s].[FallbackCountryID] = [mb_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [mb_s_l] ON [mb_s].[FallbackLanguageID] = [mb_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[AgeRating] AS [mb_s_ar] ON [mb_s].[FallbackAgeRatingID] = [mb_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [mb_s_sc] ON [mb_s].[ServiceConfigurationID] = [mb_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [mb_s_bm] ON [mb_s].[BusinessModelID] = [mb_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [mb_s_t] ON [mb_s].[TemplateID] = [mb_s_t].[TemplateID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "customloadmany", "notfound"), "MsisdnBlacklist list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<MsisdnBlacklist>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				MsisdnBlacklistTable mbTable = new MsisdnBlacklistTable(query);
				InstanceTable mb_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				MerchantTable mb_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable mb_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				TemplateTable mb_m_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				ServiceTable mb_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable mb_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable mb_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable mb_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable mb_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable mb_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable mb_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable mb_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable mb_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable mb_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable mb_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable mb_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        List<MsisdnBlacklist> result = new List<MsisdnBlacklist>();
        do
        {
          
					Instance mb_iObject = (this.Depth > 0) ? mb_iTable.CreateInstance() : null;
					Instance mb_m_iObject = (this.Depth > 1) ? mb_m_iTable.CreateInstance() : null;
					Template mb_m_tObject = (this.Depth > 1) ? mb_m_tTable.CreateInstance() : null;
					Merchant mb_mObject = (this.Depth > 0) ? mb_mTable.CreateInstance(mb_m_iObject, mb_m_tObject) : null;
					Application mb_s_aObject = (this.Depth > 1) ? mb_s_aTable.CreateInstance() : null;
					Product mb_s_pObject = (this.Depth > 1) ? mb_s_pTable.CreateInstance() : null;
					Merchant mb_s_mObject = (this.Depth > 1) ? mb_s_mTable.CreateInstance() : null;
					ServiceType mb_s_stObject = (this.Depth > 1) ? mb_s_stTable.CreateInstance() : null;
					UserSessionType mb_s_ustObject = (this.Depth > 1) ? mb_s_ustTable.CreateInstance() : null;
					Country mb_s_cObject = (this.Depth > 1) ? mb_s_cTable.CreateInstance() : null;
					Language mb_s_lObject = (this.Depth > 1) ? mb_s_lTable.CreateInstance() : null;
					AgeRating mb_s_arObject = (this.Depth > 1) ? mb_s_arTable.CreateInstance() : null;
					ServiceConfiguration mb_s_scObject = (this.Depth > 1) ? mb_s_scTable.CreateInstance() : null;
					BusinessModel mb_s_bmObject = (this.Depth > 1) ? mb_s_bmTable.CreateInstance() : null;
					Template mb_s_tObject = (this.Depth > 1) ? mb_s_tTable.CreateInstance() : null;
					Service mb_sObject = (this.Depth > 0) ? mb_sTable.CreateInstance(mb_s_aObject, mb_s_pObject, mb_s_mObject, mb_s_stObject, mb_s_ustObject, mb_s_cObject, mb_s_lObject, mb_s_arObject, mb_s_scObject, mb_s_bmObject, mb_s_tObject) : null;
					MsisdnBlacklist mbObject = (this.Depth > -1) ? mbTable.CreateInstance(mb_iObject, mb_mObject, mb_sObject) : null;
					result.Add(mbObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "customloadmany", "exception"), "MsisdnBlacklist list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "MsisdnBlacklist", "Exception while loading (custom/many) MsisdnBlacklist object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, MsisdnBlacklist data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[MsisdnBlacklist] ([InstanceID],[MerchantID],[ServiceID],[Msisdn],[Description],[IsActive]) VALUES(@InstanceID,@MerchantID,@ServiceID,@Msisdn,@Description,@IsActive); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance == null ? DBNull.Value : (object)data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@MerchantID", data.Merchant == null ? DBNull.Value : (object)data.Merchant.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@Msisdn", data.Msisdn).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@IsActive", data.IsActive).SqlDbType = SqlDbType.Bit;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "insert", "noprimarykey"), "MsisdnBlacklist could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "MsisdnBlacklist", "Exception while inserting MsisdnBlacklist object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "insert", "exception"), "MsisdnBlacklist could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "MsisdnBlacklist", "Exception while inserting MsisdnBlacklist object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, MsisdnBlacklist data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[MsisdnBlacklist] SET " +
												"[InstanceID] = @InstanceID, " + 
												"[MerchantID] = @MerchantID, " + 
												"[ServiceID] = @ServiceID, " + 
												"[Msisdn] = @Msisdn, " + 
												"[Description] = @Description, " + 
												"[IsActive] = @IsActive, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [MsisdnBlacklistID] = @MsisdnBlacklistID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance == null ? DBNull.Value : (object)data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@MerchantID", data.Merchant == null ? DBNull.Value : (object)data.Merchant.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@Msisdn", data.Msisdn).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@IsActive", data.IsActive).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@MsisdnBlacklistID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "update", "norecord"), "MsisdnBlacklist could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "MsisdnBlacklist", "Exception while updating MsisdnBlacklist object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "update", "morerecords"), "MsisdnBlacklist was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "MsisdnBlacklist", "Exception while updating MsisdnBlacklist object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "update", "exception"), "MsisdnBlacklist could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "MsisdnBlacklist", "Exception while updating MsisdnBlacklist object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, MsisdnBlacklist data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[MsisdnBlacklist] WHERE MsisdnBlacklistID = @MsisdnBlacklistID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@MsisdnBlacklistID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "delete", "norecord"), "MsisdnBlacklist could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "MsisdnBlacklist", "Exception while deleting MsisdnBlacklist object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("mb", "delete", "exception"), "MsisdnBlacklist could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "MsisdnBlacklist", "Exception while deleting MsisdnBlacklist object from database. See inner exception for details.", ex);
      }
    }
  }
}

