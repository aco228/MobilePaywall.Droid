using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class VideoContentDetailManager : IVideoContentDetailManager
  {

    public List<VideoContentDetail> Load(VideoContent videoContent)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, videoContent);
    }

    public List<VideoContentDetail> Load(IConnectionInfo connection, VideoContent videoContent)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, videoContent);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, videoContent);
    }

    public List<VideoContentDetail> Load(ISqlConnectionInfo connection, VideoContent videoContent)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].VideoContentID = @VideoContentID";
      parameters.Arguments.Add("VideoContentID", videoContent.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<VideoContentDetail> Load(Service service)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service);
    }

    public List<VideoContentDetail> Load(IConnectionInfo connection, Service service)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service);
    }

    public List<VideoContentDetail> Load(ISqlConnectionInfo connection, Service service)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].ServiceID = @ServiceID";
      parameters.Arguments.Add("ServiceID", service.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<VideoContentDetail> Load(Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service, language);
    }

    public List<VideoContentDetail> Load(IConnectionInfo connection, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service, language);
    }

    public List<VideoContentDetail> Load(ISqlConnectionInfo connection, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].ServiceID = @ServiceID AND [vcd].LanguageID = @LanguageID";
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.LoadMany(connection, parameters);
    }

    public VideoContentDetail Load(VideoContent videoContent, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, videoContent, language);
    }

    public VideoContentDetail Load(IConnectionInfo connection, VideoContent videoContent, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, videoContent, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, videoContent, language);
    }

    public VideoContentDetail Load(ISqlConnectionInfo connection, VideoContent videoContent, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].VideoContentID = @VideoContentID AND [vcd].LanguageID = @LanguageID";
      parameters.Arguments.Add("VideoContentID", videoContent.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.Load(connection, parameters);
    }

    public T Load<T>(VideoContent videoContent, Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load<T>(connection, videoContent, service, language);
    }

    public T Load<T>(IConnectionInfo connection, VideoContent videoContent, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load<T>(sqlConnection, videoContent, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load<T>(sqlConnection, videoContent, service, language);
    }

    public T Load<T>(ISqlConnectionInfo connection, VideoContent videoContent, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd_vc].VideoContentID = @VideoContentID AND ([vcd_s].ServiceID = @ServiceID OR [vcd_s].ServiceID IS NULL) AND ([vcd_l].LanguageID = @LanguageID OR [vcd_l].LanguageID IS NULL)";
      parameters.Arguments.Add("VideoContentID", videoContent.ID);
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      if (typeof(T).Equals(typeof(List<VideoContentDetail>)))
        return (T)Convert.ChangeType(this.LoadMany(connection, parameters), typeof(T));
      else
        return (T)Convert.ChangeType(this.Load(connection, parameters), typeof(T));
    }



  }
}

