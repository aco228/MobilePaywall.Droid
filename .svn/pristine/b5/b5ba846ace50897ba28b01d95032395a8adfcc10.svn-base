using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class AndroidContentDataTable : TableBase<AndroidContentData>
  {
    public static string GetColumnNames()
    {
      return TableBase<AndroidContentData>.GetColumnNames(string.Empty, AndroidContentDataTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<AndroidContentData>.GetColumnNames(tablePrefix, AndroidContentDataTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription AndroidContentDataID = new ColumnDescription("AndroidContentDataID", 0, typeof(int));
			public static readonly ColumnDescription AndroidContentID = new ColumnDescription("AndroidContentID", 1, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 2, typeof(byte[]));
			public static readonly ColumnDescription Size = new ColumnDescription("Size", 3, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				AndroidContentDataID,
				AndroidContentID,
				Data,
				Size,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public AndroidContentDataTable(SqlQuery query) : base(query) { }
    public AndroidContentDataTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int AndroidContentDataID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AndroidContentDataID)); } }
		public int AndroidContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AndroidContentID)); } }
		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public int Size { get { return this.Reader.GetInt32(this.GetIndex(Columns.Size)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public AndroidContentData CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new AndroidContentData(this.AndroidContentDataID,new AndroidContent(this.AndroidContentID), this.Data,this.Size,this.Updated,this.Created); 
		}
		public AndroidContentData CreateInstance(AndroidContent androidContent)  
		{ 
			if (!this.HasData) return null;
			return new AndroidContentData(this.AndroidContentDataID,androidContent ?? new AndroidContent(this.AndroidContentID), this.Data,this.Size,this.Updated,this.Created); 
		}
		

  }
}

