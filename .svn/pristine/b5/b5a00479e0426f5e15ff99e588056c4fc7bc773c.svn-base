using Cashflow.Client;
using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Cashflow.Message.Mobile;
using MobilePaywall.Service.Callback.Log;
using MobilePaywall.Data;
using Cashflow.Message;

namespace MobilePaywall.Service.Callback.Handlers._Specific.GR
{
	public class GRVeooNotificationHandler : NotificationHandlerBase
	{

		#region #logging#
		private static ILog _log = null;

		protected static ILog Log
		{
			get
			{
				if (GRVeooNotificationHandler._log == null)
					GRVeooNotificationHandler._log = log4net.LogManager.GetLogger(typeof(GRVeooNotificationHandler));
				return GRVeooNotificationHandler._log;
			}
		}
		#endregion


		protected override void ProcessSendSms(SendSmsNotification notification)
		{
			CallbackLog CLog = new CallbackLog(notification, Log);
			if (CLog.UserSession == null || !CLog.UserSession.Service.FallbackCountry.TwoLetterIsoCode.Equals("GR"))
			{
				Log.Error(CLog.ErrorMessage + " refID: " + notification.ReferenceID);
				return;
			}

			if (notification.Status.Code != Cashflow.Message.MessageStatusCode.Success)
				return;

			CLog.UserSession.Storage.PutString("SmsID", notification.SmsID.ToString());
			if (CLog.UserSession.Customer == null)
			{
				Log.Error("GRVeoo: User session does not contain Customer. USID:" + CLog.UserSessionID);
				return;
			}

			CLog.UserSession.Customer.Storage.PutString("SmsID", notification.SmsID.ToString());

      /*
        STEP 3 INITIATE
      */

      System.Threading.Thread.Sleep(new Random().Next(30000, 60000));

      UserHttpRequest uhr = new UserHttpRequest(-1, Guid.NewGuid(), CLog.UserSession, null, "-nil-", DateTime.Now, DateTime.Now); uhr.Insert();
      PaymentRequest pr = new PaymentRequest(-1, Guid.NewGuid(), PaymentType.Subscription, PaymentRequestStatus.Initialized, CLog.UserSession.LastLookupSession,
        CLog.UserSession.Customer, CLog.UserSession, CLog.UserSession.Service.DefaultServiceOffer, CLog.UserSession.Service.DefaultServiceOffer.BusinessModelEntry, null, uhr, "-nil-", DateTime.Now, DateTime.Now);
      pr.Insert();
      
      CLog.UserSession.Customer.Storage.PutInt("PaymentRequestID", pr.ID);

      SmsArguments smsArguments = new SmsArguments();
      smsArguments.Operator = CLog.UserSession.MobileOperator.ExternalMobileOperatorID.ToString();
      smsArguments.Msisdn = CLog.UserSession.Customer.Msisdn;
      smsArguments.Username = CLog.UserSession.Customer.Username;
      smsArguments.Password = CLog.UserSession.Customer.Storage.GetString("password");
      smsArguments.PreviousSmsId = CLog.UserSession.Customer.Storage.GetString("SmsID");

      InitiateSubscriptionResponse initiateSubscriptionResponse = CashflowClientPaywallManager.GetInitiateSubscriptionResponse(CLog.UserSession, string.Empty, smsArguments);

      switch (initiateSubscriptionResponse.Status.Code)
      {
        case MessageStatusCode.Pending:
        case MessageStatusCode.Success:
          pr.ExternalPaymentRequestGuid = initiateSubscriptionResponse.SubscriptionRequestID;
          pr.PaymentRequestStatus = PaymentRequestStatus.Complete;
          pr.Update();

          Payment p = new Payment(-1, Guid.NewGuid(), PaymentType.Subscription, null, PaymentStatus.Initialized, pr, CLog.UserSession.Customer, CLog.UserSession.Service.DefaultServiceOffer, CLog.UserSession.Service.DefaultServiceOffer.BusinessModelEntry, DateTime.Now, DateTime.Now); p.Insert();

          SetupSubscriptionResponse setupSubscriptionResponse = this.GetSetup(CLog.UserSession, pr);
          if (setupSubscriptionResponse.Status.Code != MessageStatusCode.Success && setupSubscriptionResponse.Status.Code != MessageStatusCode.Redirect)
          {
            CLog.Error("GreeceVeo::Setup. SetupSubscriptionResponse. Setup is not successfull");
            p.PaymentStatus = PaymentStatus.Failed;
            p.Update();
            return;
          }

          CLog.UserSession.Customer.Storage.PutBool("PinConfirmed", true);
          p.PaymentStatus = PaymentStatus.Successful;
          p.Update();
          PaymentContentAccessPolicyMap pcapm = new PaymentContentAccessPolicyMap(-1, p, null, CLog.UserSession.Service.DefaultServiceOffer.ContentAccessPolicy, null, true, true, DateTime.Now, DateTime.Now.AddMinutes(15), DateTime.Now, DateTime.Now); pcapm.Insert();

          CLog.Error("initiateSubscriptionResponse is OK");
          return;
        default:
          pr.PaymentRequestStatus = PaymentRequestStatus.Failure;
          pr.Update();
          CLog.Error("initiateSubscriptionResponse is FAILURE");
          return;
      }


    }

    private SetupSubscriptionResponse GetSetup(UserSession us, PaymentRequest paymentRequest)
    {

      SetupSubscriptionRequest setupSubscriptionRequest = new SetupSubscriptionRequest(RequestMode.Synchronous,
        us.Guid.ToString(),
        us.Service.DefaultServiceOffer.PaymentConfiguration.PaymentCredentials.Username,
        us.Service.DefaultServiceOffer.PaymentConfiguration.PaymentCredentials.Password,
        paymentRequest.ExternalPaymentRequestGuid.Value,
        paymentRequest.ExternalPaymentRequestGuid.ToString(),
        null);

      return CashflowClientPaywallManager.GetSubscriptionClient(us.Service).SetupSubscription(setupSubscriptionRequest);
    }


  }
}