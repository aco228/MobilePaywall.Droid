using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ShortMessageProviderTable : TableBase<ShortMessageProvider>
  {
    public static string GetColumnNames()
    {
      return TableBase<ShortMessageProvider>.GetColumnNames(string.Empty, ShortMessageProviderTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ShortMessageProvider>.GetColumnNames(tablePrefix, ShortMessageProviderTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ShortMessageProviderID = new ColumnDescription("ShortMessageProviderID", 0, typeof(int));
			public static readonly ColumnDescription ShortMessageProviderTypeID = new ColumnDescription("ShortMessageProviderTypeID", 1, typeof(int));
			public static readonly ColumnDescription ShortMessageProviderConfigurationID = new ColumnDescription("ShortMessageProviderConfigurationID", 2, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 3, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 4, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ShortMessageProviderID,
				ShortMessageProviderTypeID,
				ShortMessageProviderConfigurationID,
				Name,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ShortMessageProviderTable(SqlQuery query) : base(query) { }
    public ShortMessageProviderTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ShortMessageProviderID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageProviderID)); } }
		public int ShortMessageProviderTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageProviderTypeID)); } }
		public int ShortMessageProviderConfigurationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageProviderConfigurationID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ShortMessageProvider CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageProvider(this.ShortMessageProviderID,new ShortMessageProviderType(this.ShortMessageProviderTypeID), new ShortMessageProviderConfiguration(this.ShortMessageProviderConfigurationID), this.Name,this.Description,this.Updated,this.Created); 
		}
		public ShortMessageProvider CreateInstance(ShortMessageProviderConfiguration shortMessageProviderConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageProvider(this.ShortMessageProviderID,new ShortMessageProviderType(this.ShortMessageProviderTypeID), shortMessageProviderConfiguration ?? new ShortMessageProviderConfiguration(this.ShortMessageProviderConfigurationID), this.Name,this.Description,this.Updated,this.Created); 
		}
		public ShortMessageProvider CreateInstance(ShortMessageProviderType shortMessageProviderType)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageProvider(this.ShortMessageProviderID,shortMessageProviderType ?? new ShortMessageProviderType(this.ShortMessageProviderTypeID), new ShortMessageProviderConfiguration(this.ShortMessageProviderConfigurationID), this.Name,this.Description,this.Updated,this.Created); 
		}
		public ShortMessageProvider CreateInstance(ShortMessageProviderType shortMessageProviderType, ShortMessageProviderConfiguration shortMessageProviderConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageProvider(this.ShortMessageProviderID,shortMessageProviderType ?? new ShortMessageProviderType(this.ShortMessageProviderTypeID), shortMessageProviderConfiguration ?? new ShortMessageProviderConfiguration(this.ShortMessageProviderConfigurationID), this.Name,this.Description,this.Updated,this.Created); 
		}
		

  }
}

