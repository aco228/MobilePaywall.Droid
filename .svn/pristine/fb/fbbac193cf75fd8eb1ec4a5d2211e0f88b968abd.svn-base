using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentCategoryMapManager : IDataManager<ContentCategoryMap> 
  {
	

  }

  public partial class ContentCategoryMap : MobilePaywallObject<IContentCategoryMapManager> 
  {
		private Content _content;
		private Category _category;
		private bool _isEnabled = false;
		

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public Category Category 
		{
			get
			{
				if (this._category != null &&
						this._category.IsEmpty)
					if (this.ConnectionContext != null)
						this._category = Category.CreateManager().LazyLoad(this.ConnectionContext, this._category.ID) as Category;
					else
						this._category = Category.CreateManager().LazyLoad(this._category.ID) as Category;
				return this._category;
			}
			set { _category = value; }
		}

		public bool IsEnabled {get {return this._isEnabled; } set { this._isEnabled = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentCategoryMap()
    { 
    }

    public ContentCategoryMap(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentCategoryMap(int id,  Content content, Category category, bool isEnabled, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._content = content;
			this._category = category;
			this._isEnabled = isEnabled;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentCategoryMap(-1,  this.Content, this.Category,this.IsEnabled, DateTime.Now, DateTime.Now);
    }
  }
}

