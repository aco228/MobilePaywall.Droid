using System;
using System.Web.Mvc;

using MobilePaywall.Data;
using MobilePaywall.Web.Localization;
using MobilePaywall.Web.Models;

using Senti.Diagnostics.Log;

using log4net;
using MobilePaywall.Web.Log;
using MobilePaywall.Web.Controllers;

namespace MobilePaywall.Web.Filters
{
  [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = false)]
  public class ContextValidationAttribute : PaywallActionFilterAttributeBase
  {

    #region #logging#
    private static ILog _log = null;

    protected static ILog Log
    {
      get
      {
        if (ContextValidationAttribute._log == null)
          ContextValidationAttribute._log = LogManager.GetLogger(typeof(ContextValidationAttribute));
        return ContextValidationAttribute._log;
      }
    }
    #endregion

    public override void OnActionExecuting(ActionExecutingContext filterContext)
    {
      base.OnActionExecuting(filterContext);
			
      if (!this.Required)
        return;
      
      #region # Custom page Override #

      if (FilterBypass.CheckIfFitlerIsDisabled(PaywallHttpContext.Current.Service, FilterBypassType.ContextValidationAttribute))
        return;
      
      if ((filterContext.Controller as CustomPageController) != null)
      {
        int _customPageID = -1;
        
        string cpdID = filterContext.ActionParameters["id"] != null ? filterContext.ActionParameters["id"].ToString() : "";
        if (!Int32.TryParse(cpdID, out _customPageID))
          return;

        Data.CustomPage customPage = Data.CustomPage.CreateManager().Load(_customPageID);
        if (customPage == null)
          return;

        if (!customPage.ContextValidationFilter.HasValue || !customPage.ContextValidationFilter.Value)
          return;
      }

      #endregion

      string sessionID = this.PaywallContext.Session.SessionData.Guid.ToString();
			

      switch (this.PaywallContext.Service.ServiceData.ServiceStatus)
      {
        case ServiceStatus.Offline:
          #region # /Template/ServiceError.cshtml # 
            ViewResult offlineView = new ViewResult();
            offlineView.ViewName = "~/Views/Template/ServiceError.cshtml";
            offlineView.ViewBag.Message = "Service is offline";
            filterContext.Result = offlineView;
            return; 
          #endregion
        case ServiceStatus.Updating:
          #region # /Template/ServiceError.cshtml #
            ViewResult updateView = new ViewResult();
            updateView.ViewName = "~/Views/Template/ServiceError.cshtml";
            updateView.ViewBag.Message = "Service is updating...";
            filterContext.Result = updateView;
            return;
          #endregion
        case ServiceStatus.Free:
          //INFO: Free mode is for testing. If service is in free mode that means that you will have access to all pages.
          Log.Debug(new LogMessageBuilder(new PaywallLogErrorCode("paywall.web.core", "contextvalidaton", "onactionexecuting"), "Service is in free mode."));
          return;
        default:
          break;
      }

      #region # Custom Implementation #

      //#region # (T-Pay)#
      //if (PaywallContext.Service.PaymentProvider.ID == 21)
      //  return;
      //#endregion

      //#region # (CY && GR) Amaze #

      //if ((PaywallContext.Service.ServiceData.FallbackCountry.TwoLetterIsoCode.Equals("CY") || PaywallContext.Service.ServiceData.FallbackCountry.TwoLetterIsoCode.Equals("GR")) && 
      //  this.PaywallContext.Service.PaymentProvider.ID == 16)
      //  return;

      //#endregion

      //#region # TH Alterco #

      //if (PaywallContext.Service.ServiceData.FallbackCountry.TwoLetterIsoCode.Equals("TH") && this.PaywallContext.Service.PaymentProvider.ID == 13)
      //  return;

      //#endregion
      
      #endregion

      if (this.PaywallContext.HttpContext.Request.QueryString["cskip"] != null)
      {
        this.PaywallContext.Session.SessionData.Country = this.PaywallContext.Service.ServiceData.FallbackCountry;
        this.PaywallContext.Session.SessionData.Update();
        return;
      }
      
      if (this.Configuration != null && this.Configuration.Country != null && this.Configuration.Country.ID == PaywallContext.Session.SessionData.Country.ID)
        return;
      
      PLog.Error("Configuration does not exist.");
        
      ErrorViewModel model = new ErrorViewModel(this.PaywallContext, ErrorCode.Service, Translations.Web.Error.ErrTitle, Translations.Web.Error.ErrCountry);
      ViewResult view = new ViewResult();
      view.ViewData.Model = model;
      view.ViewName = "UnsupportedCountry";
      view.ViewBag.OriginalUrl = filterContext.HttpContext.Request.RawUrl;
      filterContext.Result = view;
      return;
    }
  }
}