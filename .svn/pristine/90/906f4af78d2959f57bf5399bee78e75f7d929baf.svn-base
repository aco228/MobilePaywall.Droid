using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class QualityAssuranceReportScreenshotTable : TableBase<QualityAssuranceReportScreenshot>
  {
    public static string GetColumnNames()
    {
      return TableBase<QualityAssuranceReportScreenshot>.GetColumnNames(string.Empty, QualityAssuranceReportScreenshotTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<QualityAssuranceReportScreenshot>.GetColumnNames(tablePrefix, QualityAssuranceReportScreenshotTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription QualityAssuranceReportScreenshotID = new ColumnDescription("QualityAssuranceReportScreenshotID", 0, typeof(int));
			public static readonly ColumnDescription QualityAssuranceReportID = new ColumnDescription("QualityAssuranceReportID", 1, typeof(int));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 2, typeof(string));
			public static readonly ColumnDescription Url = new ColumnDescription("Url", 3, typeof(string));
			public static readonly ColumnDescription Remark = new ColumnDescription("Remark", 4, typeof(string));
			public static readonly ColumnDescription HasError = new ColumnDescription("HasError", 5, typeof(bool));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 6, typeof(byte[]));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				QualityAssuranceReportScreenshotID,
				QualityAssuranceReportID,
				Title,
				Url,
				Remark,
				HasError,
				Data,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public QualityAssuranceReportScreenshotTable(SqlQuery query) : base(query) { }
    public QualityAssuranceReportScreenshotTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int QualityAssuranceReportScreenshotID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QualityAssuranceReportScreenshotID)); } }
		public int QualityAssuranceReportID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QualityAssuranceReportID)); } }
		public string Title { get { return this.Reader.GetString(this.GetIndex(Columns.Title)); } }
		public string Url { get { return this.Reader.GetString(this.GetIndex(Columns.Url)); } }
		
		public string Remark 
		{
			get
			{
				int index = this.GetIndex(Columns.Remark);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public bool HasError { get { return this.Reader.GetBoolean(this.GetIndex(Columns.HasError)); } }
		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public QualityAssuranceReportScreenshot CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReportScreenshot(this.QualityAssuranceReportScreenshotID,new QualityAssuranceReport(this.QualityAssuranceReportID), this.Title,this.Url,this.Remark,this.HasError,this.Data,this.Updated,this.Created); 
		}
		public QualityAssuranceReportScreenshot CreateInstance(QualityAssuranceReport qualityAssuranceReport)  
		{ 
			if (!this.HasData) return null;
			return new QualityAssuranceReportScreenshot(this.QualityAssuranceReportScreenshotID,qualityAssuranceReport ?? new QualityAssuranceReport(this.QualityAssuranceReportID), this.Title,this.Url,this.Remark,this.HasError,this.Data,this.Updated,this.Created); 
		}
		

  }
}

