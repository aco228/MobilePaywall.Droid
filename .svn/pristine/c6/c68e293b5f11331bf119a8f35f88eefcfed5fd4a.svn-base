using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IMsisdnBlacklistManager : IDataManager<MsisdnBlacklist> 
  {
	

  }

  public partial class MsisdnBlacklist : MobilePaywallObject<IMsisdnBlacklistManager> 
  {
		private Instance _instance;
		private Merchant _merchant;
		private Service _service;
		private string _msisdn = String.Empty;
		private string _description = String.Empty;
		private bool _isActive = false;
		

		public Instance Instance 
		{
			get
			{
				if (this._instance != null &&
						this._instance.IsEmpty)
					if (this.ConnectionContext != null)
						this._instance = Instance.CreateManager().LazyLoad(this.ConnectionContext, this._instance.ID) as Instance;
					else
						this._instance = Instance.CreateManager().LazyLoad(this._instance.ID) as Instance;
				return this._instance;
			}
			set { _instance = value; }
		}

		public Merchant Merchant 
		{
			get
			{
				if (this._merchant != null &&
						this._merchant.IsEmpty)
					if (this.ConnectionContext != null)
						this._merchant = Merchant.CreateManager().LazyLoad(this.ConnectionContext, this._merchant.ID) as Merchant;
					else
						this._merchant = Merchant.CreateManager().LazyLoad(this._merchant.ID) as Merchant;
				return this._merchant;
			}
			set { _merchant = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public string Msisdn{ get {return this._msisdn; } set { this._msisdn = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public MsisdnBlacklist()
    { 
    }

    public MsisdnBlacklist(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public MsisdnBlacklist(int id,  Instance instance, Merchant merchant, Service service, string msisdn, string description, bool isActive, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._instance = instance;
			this._merchant = merchant;
			this._service = service;
			this._msisdn = msisdn;
			this._description = description;
			this._isActive = isActive;
			
    }

    public override object Clone(bool deepClone)
    {
      return new MsisdnBlacklist(-1,  this.Instance, this.Merchant, this.Service,this.Msisdn,this.Description,this.IsActive, DateTime.Now, DateTime.Now);
    }
  }
}

