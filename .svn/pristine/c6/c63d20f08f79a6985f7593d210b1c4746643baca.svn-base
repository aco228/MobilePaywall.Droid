using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ServiceLookupMethodMapTable : TableBase<ServiceLookupMethodMap>
  {
    public static string GetColumnNames()
    {
      return TableBase<ServiceLookupMethodMap>.GetColumnNames(string.Empty, ServiceLookupMethodMapTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ServiceLookupMethodMap>.GetColumnNames(tablePrefix, ServiceLookupMethodMapTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ServiceLookupMethodMapID = new ColumnDescription("ServiceLookupMethodMapID", 0, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 1, typeof(int));
			public static readonly ColumnDescription CountryID = new ColumnDescription("CountryID", 2, typeof(int));
			public static readonly ColumnDescription LookupMethodID = new ColumnDescription("LookupMethodID", 3, typeof(int));
			public static readonly ColumnDescription PaymentConfigurationID = new ColumnDescription("PaymentConfigurationID", 4, typeof(int));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 5, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 6, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ServiceLookupMethodMapID,
				ServiceID,
				CountryID,
				LookupMethodID,
				PaymentConfigurationID,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ServiceLookupMethodMapTable(SqlQuery query) : base(query) { }
    public ServiceLookupMethodMapTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ServiceLookupMethodMapID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceLookupMethodMapID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		
		public int? CountryID 
		{
			get
			{
				int index = this.GetIndex(Columns.CountryID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public int LookupMethodID { get { return this.Reader.GetInt32(this.GetIndex(Columns.LookupMethodID)); } }
		public int PaymentConfigurationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentConfigurationID)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ServiceLookupMethodMap CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,new Service(this.ServiceID), (CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Country country)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,new Service(this.ServiceID), country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(PaymentConfiguration paymentConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,new Service(this.ServiceID), (CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,paymentConfiguration ?? new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,service ?? new Service(this.ServiceID), (CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Country country, PaymentConfiguration paymentConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,new Service(this.ServiceID), country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,paymentConfiguration ?? new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Service service, Country country)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,service ?? new Service(this.ServiceID), country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Service service, PaymentConfiguration paymentConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,service ?? new Service(this.ServiceID), (CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,paymentConfiguration ?? new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		public ServiceLookupMethodMap CreateInstance(Service service, Country country, PaymentConfiguration paymentConfiguration)  
		{ 
			if (!this.HasData) return null;
			return new ServiceLookupMethodMap(this.ServiceLookupMethodMapID,service ?? new Service(this.ServiceID), country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (LookupMethod)this.LookupMethodID,paymentConfiguration ?? new PaymentConfiguration(this.PaymentConfigurationID), this.Description,this.Updated,this.Created); 
		}
		

  }
}

