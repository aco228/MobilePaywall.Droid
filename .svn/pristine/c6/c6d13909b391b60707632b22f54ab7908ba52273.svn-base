using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
	public class GeoDatabaseDownloadHistoryTable : TableBase<GeoDatabaseDownloadHistory>
	{
		public static string GetColumnNames()
		{
			return TableBase<GeoDatabaseDownloadHistory>.GetColumnNames(string.Empty, GeoDatabaseDownloadHistoryTable.Columns.Item);
		}

		public static string GetColumnNames(string tablePrefix)
		{
			return TableBase<GeoDatabaseDownloadHistory>.GetColumnNames(tablePrefix, GeoDatabaseDownloadHistoryTable.Columns.Item);
		}

		public class Columns
		{

			public static readonly ColumnDescription GeoDatabaseDownloadHistoryID = new ColumnDescription("GeoDatabaseDownloadHistoryID", 0, typeof(int));
			public static readonly ColumnDescription MD5Hash = new ColumnDescription("MD5Hash", 1, typeof(string));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 2, typeof(byte[]));
			public static readonly ColumnDescription GeoDatabaseDownloadHistoryStatusID = new ColumnDescription("GeoDatabaseDownloadHistoryStatusID", 3, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));


			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				GeoDatabaseDownloadHistoryID,
				MD5Hash,
				Data,
				GeoDatabaseDownloadHistoryStatusID,
				Updated,
				Created
			};
		}

		public override int ColumnCount
		{
			get { return Columns.Item.Length; }
		}

		public GeoDatabaseDownloadHistoryTable(SqlQuery query) : base(query) { }
		public GeoDatabaseDownloadHistoryTable(SqlQuery query, ColumnSelectMode selectMode,
													 params ColumnDescription[] columns)
			: base(query, selectMode, columns) { }

		public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int GeoDatabaseDownloadHistoryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.GeoDatabaseDownloadHistoryID)); } }
		public string MD5Hash { get { return this.Reader.GetString(this.GetIndex(Columns.MD5Hash)); } }

		public byte[] Data
		{
			get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len];
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public int GeoDatabaseDownloadHistoryStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.GeoDatabaseDownloadHistoryStatusID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }


		public GeoDatabaseDownloadHistory CreateInstance()
		{
			if (!this.HasData) return null;
			return new GeoDatabaseDownloadHistory(this.GeoDatabaseDownloadHistoryID, this.MD5Hash, this.Data, (GeoDatabaseDownloadHistoryStatus)this.GeoDatabaseDownloadHistoryStatusID, this.Updated, this.Created);
		}


	}
}

