using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
	public partial class ApplicationRouteSetMapManager : IApplicationRouteSetMapManager
	{


		public List<ApplicationRouteSetMap> Load(Application application)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, application);
		}

		public List<ApplicationRouteSetMap> Load(IConnectionInfo connection, Application application)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, application);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, application);
		}

		public List<ApplicationRouteSetMap> Load(ISqlConnectionInfo connection, Application application)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[arsm].ApplicationID = @ApplicationID";
			parameters.Arguments.Add("ApplicationID", application.ID);
			return this.LoadMany(connection, parameters);
		}



		public List<ApplicationRouteSetMap> Load(Application application, Service service)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, application, service);
		}

		public List<ApplicationRouteSetMap> Load(IConnectionInfo connection, Application application, Service service)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, application, service);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, application, service);
		}

		public List<ApplicationRouteSetMap> Load(ISqlConnectionInfo connection, Application application, Service service)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[arsm].ApplicationID = @ApplicationID AND [arsm].ServiceID = @ServiceID";
			parameters.Arguments.Add("ApplicationID", application.ID);
			parameters.Arguments.Add("ServiceID", service.ID);
			return this.LoadMany(connection, parameters);
		}


    public ApplicationRouteSetMap Load(Application application, RouteSet routeSet)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, application, routeSet);
    }

    public ApplicationRouteSetMap Load(IConnectionInfo connection, Application application, RouteSet routeSet)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, application, routeSet);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, application, routeSet);
    }

    public ApplicationRouteSetMap Load(ISqlConnectionInfo connection, Application application, RouteSet routeSet)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[arsm].ApplicationID=@ApplicationID AND [arsm].RouteSetID=@RouteSetID";
      parameters.Arguments.Add("ApplicationID", application.ID);
      parameters.Arguments.Add("RouteSetID", routeSet.ID);
      return this.Load(connection, parameters);
    }
	}
}

