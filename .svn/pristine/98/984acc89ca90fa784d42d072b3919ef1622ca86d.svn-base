using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class AutomationGroupTable : TableBase<AutomationGroup>
  {
    public static string GetColumnNames()
    {
      return TableBase<AutomationGroup>.GetColumnNames(string.Empty, AutomationGroupTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<AutomationGroup>.GetColumnNames(tablePrefix, AutomationGroupTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription AutomationGroupID = new ColumnDescription("AutomationGroupID", 0, typeof(int));
			public static readonly ColumnDescription CountryID = new ColumnDescription("CountryID", 1, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 2, typeof(string));
			public static readonly ColumnDescription ExternalCleanOffer = new ColumnDescription("ExternalCleanOffer", 3, typeof(string));
			public static readonly ColumnDescription RotationTime = new ColumnDescription("RotationTime", 4, typeof(int));
			public static readonly ColumnDescription StartTime = new ColumnDescription("StartTime", 5, typeof(string));
			public static readonly ColumnDescription EndTime = new ColumnDescription("EndTime", 6, typeof(string));
			public static readonly ColumnDescription AutoStart = new ColumnDescription("AutoStart", 7, typeof(bool));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 8, typeof(bool));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 9, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 10, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 11, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				AutomationGroupID,
				CountryID,
				Name,
				ExternalCleanOffer,
				RotationTime,
				StartTime,
				EndTime,
				AutoStart,
				IsActive,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public AutomationGroupTable(SqlQuery query) : base(query) { }
    public AutomationGroupTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int AutomationGroupID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AutomationGroupID)); } }
		public int CountryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CountryID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		public string ExternalCleanOffer { get { return this.Reader.GetString(this.GetIndex(Columns.ExternalCleanOffer)); } }
		public int RotationTime { get { return this.Reader.GetInt32(this.GetIndex(Columns.RotationTime)); } }
		public string StartTime { get { return this.Reader.GetString(this.GetIndex(Columns.StartTime)); } }
		public string EndTime { get { return this.Reader.GetString(this.GetIndex(Columns.EndTime)); } }
		public bool AutoStart { get { return this.Reader.GetBoolean(this.GetIndex(Columns.AutoStart)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public AutomationGroup CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new AutomationGroup(this.AutomationGroupID,new Country(this.CountryID), this.Name,this.ExternalCleanOffer,this.RotationTime,this.StartTime,this.EndTime,this.AutoStart,this.IsActive,this.Description,this.Updated,this.Created); 
		}
		public AutomationGroup CreateInstance(Country country)  
		{ 
			if (!this.HasData) return null;
			return new AutomationGroup(this.AutomationGroupID,country ?? new Country(this.CountryID), this.Name,this.ExternalCleanOffer,this.RotationTime,this.StartTime,this.EndTime,this.AutoStart,this.IsActive,this.Description,this.Updated,this.Created); 
		}
		

  }
}

