using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PaymentResultTable : TableBase<PaymentResult>
  {
    public static string GetColumnNames()
    {
      return TableBase<PaymentResult>.GetColumnNames(string.Empty, PaymentResultTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<PaymentResult>.GetColumnNames(tablePrefix, PaymentResultTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PaymentResultID = new ColumnDescription("PaymentResultID", 0, typeof(int));
			public static readonly ColumnDescription PaymentRequestID = new ColumnDescription("PaymentRequestID", 1, typeof(int));
			public static readonly ColumnDescription IsOriginalPayment = new ColumnDescription("IsOriginalPayment", 2, typeof(bool));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 3, typeof(int));
			public static readonly ColumnDescription ValidTo = new ColumnDescription("ValidTo", 4, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PaymentResultID,
				PaymentRequestID,
				IsOriginalPayment,
				PaymentID,
				ValidTo,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PaymentResultTable(SqlQuery query) : base(query) { }
    public PaymentResultTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PaymentResultID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentResultID)); } }
		public int PaymentRequestID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentRequestID)); } }
		
		public bool? IsOriginalPayment 
		{
			get
			{
				int index = this.GetIndex(Columns.IsOriginalPayment);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetBoolean(index);
			}
		}

		
		public int? PaymentID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public DateTime ValidTo { get { return this.Reader.GetDateTime(this.GetIndex(Columns.ValidTo)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public PaymentResult CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new PaymentResult(this.PaymentResultID,new PaymentRequest(this.PaymentRequestID), this.IsOriginalPayment,(PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentResult CreateInstance(Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new PaymentResult(this.PaymentResultID,new PaymentRequest(this.PaymentRequestID), this.IsOriginalPayment,payment ?? (this.PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentResult CreateInstance(PaymentRequest paymentRequest)  
		{ 
			if (!this.HasData) return null;
			return new PaymentResult(this.PaymentResultID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), this.IsOriginalPayment,(PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentResult CreateInstance(PaymentRequest paymentRequest, Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new PaymentResult(this.PaymentResultID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), this.IsOriginalPayment,payment ?? (this.PaymentID.HasValue ? new Payment(this.PaymentID.Value) : null), this.ValidTo,this.Updated,this.Created); 
		}
		

  }
}

