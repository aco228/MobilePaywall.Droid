using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ClientSessionTable : TableBase<ClientSession>
  {
    public static string GetColumnNames()
    {
      return TableBase<ClientSession>.GetColumnNames(string.Empty, ClientSessionTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ClientSession>.GetColumnNames(tablePrefix, ClientSessionTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ClientSessionID = new ColumnDescription("ClientSessionID", 0, typeof(int));
			public static readonly ColumnDescription ClientSessionGuid = new ColumnDescription("ClientSessionGuid", 1, typeof(Guid));
			public static readonly ColumnDescription ApplicationID = new ColumnDescription("ApplicationID", 2, typeof(int));
			public static readonly ColumnDescription ClientID = new ColumnDescription("ClientID", 3, typeof(int));
			public static readonly ColumnDescription LanguageID = new ColumnDescription("LanguageID", 4, typeof(int));
			public static readonly ColumnDescription Domain = new ColumnDescription("Domain", 5, typeof(string));
			public static readonly ColumnDescription IPAdress = new ColumnDescription("IPAdress", 6, typeof(string));
			public static readonly ColumnDescription IPAdressTypeID = new ColumnDescription("IPAdressTypeID", 7, typeof(int));
			public static readonly ColumnDescription UserAgent = new ColumnDescription("UserAgent", 8, typeof(string));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 9, typeof(bool));
			public static readonly ColumnDescription ValidUntil = new ColumnDescription("ValidUntil", 10, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 11, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 12, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ClientSessionID,
				ClientSessionGuid,
				ApplicationID,
				ClientID,
				LanguageID,
				Domain,
				IPAdress,
				IPAdressTypeID,
				UserAgent,
				IsActive,
				ValidUntil,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ClientSessionTable(SqlQuery query) : base(query) { }
    public ClientSessionTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ClientSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientSessionID)); } }
		public Guid ClientSessionGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.ClientSessionGuid)); } }
		public int ApplicationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ApplicationID)); } }
		
		public int? ClientID 
		{
			get
			{
				int index = this.GetIndex(Columns.ClientID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? LanguageID 
		{
			get
			{
				int index = this.GetIndex(Columns.LanguageID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public string Domain { get { return this.Reader.GetString(this.GetIndex(Columns.Domain)); } }
		public string IPAdress { get { return this.Reader.GetString(this.GetIndex(Columns.IPAdress)); } }
		public int IPAdressTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.IPAdressTypeID)); } }
		public string UserAgent { get { return this.Reader.GetString(this.GetIndex(Columns.UserAgent)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		public DateTime ValidUntil { get { return this.Reader.GetDateTime(this.GetIndex(Columns.ValidUntil)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ClientSession CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,new Application(this.ApplicationID), (ClientID.HasValue ? new Client(this.ClientID.Value) : null), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Application application)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,application ?? new Application(this.ApplicationID), (ClientID.HasValue ? new Client(this.ClientID.Value) : null), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Client client)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,new Application(this.ApplicationID), client ?? (this.ClientID.HasValue ? new Client(this.ClientID.Value) : null), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Language language)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,new Application(this.ApplicationID), (ClientID.HasValue ? new Client(this.ClientID.Value) : null), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Application application, Client client)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,application ?? new Application(this.ApplicationID), client ?? (this.ClientID.HasValue ? new Client(this.ClientID.Value) : null), (LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Application application, Language language)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,application ?? new Application(this.ApplicationID), (ClientID.HasValue ? new Client(this.ClientID.Value) : null), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Client client, Language language)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,new Application(this.ApplicationID), client ?? (this.ClientID.HasValue ? new Client(this.ClientID.Value) : null), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		public ClientSession CreateInstance(Application application, Client client, Language language)  
		{ 
			if (!this.HasData) return null;
			return new ClientSession(this.ClientSessionID,this.ClientSessionGuid,application ?? new Application(this.ApplicationID), client ?? (this.ClientID.HasValue ? new Client(this.ClientID.Value) : null), language ?? (this.LanguageID.HasValue ? new Language(this.LanguageID.Value) : null), this.Domain,this.IPAdress,(IPAddressType)this.IPAdressTypeID,this.UserAgent,this.IsActive,this.ValidUntil,this.Updated,this.Created); 
		}
		

  }
}

