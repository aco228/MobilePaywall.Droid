using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(ServiceLookupMethodMap))] 
  public partial class ServiceLookupMethodMapManager : MobilePaywall.Data.Sql.SqlManagerBase<ServiceLookupMethodMap>, IServiceLookupMethodMapManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override ServiceLookupMethodMap LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ServiceLookupMethodMapTable.GetColumnNames("[slmm]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[slmm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[slmm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[slmm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[slmm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[slmm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[slmm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[slmm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[slmm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[slmm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[slmm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[slmm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentConfigurationTable.GetColumnNames("[slmm_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentCredentialsTable.GetColumnNames("[slmm_pc_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentInterfaceTable.GetColumnNames("[slmm_pc_pi]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentProviderTable.GetColumnNames("[slmm_pc_pp]") : string.Empty) + 
							(this.Depth > 1 ? "," + BehaviorModelTable.GetColumnNames("[slmm_pc_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_pc_p]") : string.Empty) + 
					" FROM [core].[ServiceLookupMethodMap] AS [slmm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [slmm_s] ON [slmm].[ServiceID] = [slmm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [slmm_s_a] ON [slmm_s].[ApplicationID] = [slmm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_s_p] ON [slmm_s].[ProductID] = [slmm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [slmm_s_m] ON [slmm_s].[MerchantID] = [slmm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [slmm_s_st] ON [slmm_s].[ServiceTypeID] = [slmm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [slmm_s_ust] ON [slmm_s].[UserSessionTypeID] = [slmm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_s_c] ON [slmm_s].[FallbackCountryID] = [slmm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_s_l] ON [slmm_s].[FallbackLanguageID] = [slmm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [slmm_s_ar] ON [slmm_s].[FallbackAgeRatingID] = [slmm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [slmm_s_sc] ON [slmm_s].[ServiceConfigurationID] = [slmm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [slmm_s_bm] ON [slmm_s].[BusinessModelID] = [slmm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [slmm_s_t] ON [slmm_s].[TemplateID] = [slmm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_c] ON [slmm].[CountryID] = [slmm_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_c_l] ON [slmm_c].[LanguageID] = [slmm_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [slmm_pc] ON [slmm].[PaymentConfigurationID] = [slmm_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentCredentials] AS [slmm_pc_pc] ON [slmm_pc].[PaymentCredentialsID] = [slmm_pc_pc].[PaymentCredentialsID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentInterface] AS [slmm_pc_pi] ON [slmm_pc].[PaymentInterfaceID] = [slmm_pc_pi].[PaymentInterfaceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[PaymentProvider] AS [slmm_pc_pp] ON [slmm_pc].[PaymentProviderID] = [slmm_pc_pp].[PaymentProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BehaviorModel] AS [slmm_pc_bm] ON [slmm_pc].[BehaviorModelID] = [slmm_pc_bm].[BehaviorModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_pc_p] ON [slmm_pc].[ProductID] = [slmm_pc_p].[ProductID] ";
				sqlCmdText += "WHERE [slmm].[ServiceLookupMethodMapID] = @ServiceLookupMethodMapID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ServiceLookupMethodMapID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "loadinternal", "notfound"), "ServiceLookupMethodMap could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ServiceLookupMethodMapTable slmmTable = new ServiceLookupMethodMapTable(query);
				ServiceTable slmm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable slmm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable slmm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable slmm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable slmm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable slmm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable slmm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable slmm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable slmm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable slmm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable slmm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable slmm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				CountryTable slmm_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable slmm_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentConfigurationTable slmm_pcTable = (this.Depth > 0) ? new PaymentConfigurationTable(query) : null;
				PaymentCredentialsTable slmm_pc_pcTable = (this.Depth > 1) ? new PaymentCredentialsTable(query) : null;
				PaymentInterfaceTable slmm_pc_piTable = (this.Depth > 1) ? new PaymentInterfaceTable(query) : null;
				PaymentProviderTable slmm_pc_ppTable = (this.Depth > 1) ? new PaymentProviderTable(query) : null;
				BehaviorModelTable slmm_pc_bmTable = (this.Depth > 1) ? new BehaviorModelTable(query) : null;
				ProductTable slmm_pc_pTable = (this.Depth > 1) ? new ProductTable(query) : null;

        
				Application slmm_s_aObject = (this.Depth > 1) ? slmm_s_aTable.CreateInstance() : null;
				Product slmm_s_pObject = (this.Depth > 1) ? slmm_s_pTable.CreateInstance() : null;
				Merchant slmm_s_mObject = (this.Depth > 1) ? slmm_s_mTable.CreateInstance() : null;
				ServiceType slmm_s_stObject = (this.Depth > 1) ? slmm_s_stTable.CreateInstance() : null;
				UserSessionType slmm_s_ustObject = (this.Depth > 1) ? slmm_s_ustTable.CreateInstance() : null;
				Country slmm_s_cObject = (this.Depth > 1) ? slmm_s_cTable.CreateInstance() : null;
				Language slmm_s_lObject = (this.Depth > 1) ? slmm_s_lTable.CreateInstance() : null;
				AgeRating slmm_s_arObject = (this.Depth > 1) ? slmm_s_arTable.CreateInstance() : null;
				ServiceConfiguration slmm_s_scObject = (this.Depth > 1) ? slmm_s_scTable.CreateInstance() : null;
				BusinessModel slmm_s_bmObject = (this.Depth > 1) ? slmm_s_bmTable.CreateInstance() : null;
				Template slmm_s_tObject = (this.Depth > 1) ? slmm_s_tTable.CreateInstance() : null;
				Service slmm_sObject = (this.Depth > 0) ? slmm_sTable.CreateInstance(slmm_s_aObject, slmm_s_pObject, slmm_s_mObject, slmm_s_stObject, slmm_s_ustObject, slmm_s_cObject, slmm_s_lObject, slmm_s_arObject, slmm_s_scObject, slmm_s_bmObject, slmm_s_tObject) : null;
				Language slmm_c_lObject = (this.Depth > 1) ? slmm_c_lTable.CreateInstance() : null;
				Country slmm_cObject = (this.Depth > 0) ? slmm_cTable.CreateInstance(slmm_c_lObject) : null;
				PaymentCredentials slmm_pc_pcObject = (this.Depth > 1) ? slmm_pc_pcTable.CreateInstance() : null;
				PaymentInterface slmm_pc_piObject = (this.Depth > 1) ? slmm_pc_piTable.CreateInstance() : null;
				PaymentProvider slmm_pc_ppObject = (this.Depth > 1) ? slmm_pc_ppTable.CreateInstance() : null;
				BehaviorModel slmm_pc_bmObject = (this.Depth > 1) ? slmm_pc_bmTable.CreateInstance() : null;
				Product slmm_pc_pObject = (this.Depth > 1) ? slmm_pc_pTable.CreateInstance() : null;
				PaymentConfiguration slmm_pcObject = (this.Depth > 0) ? slmm_pcTable.CreateInstance(slmm_pc_pcObject, slmm_pc_piObject, slmm_pc_ppObject, slmm_pc_bmObject, slmm_pc_pObject) : null;
				ServiceLookupMethodMap slmmObject = slmmTable.CreateInstance(slmm_sObject, slmm_cObject, slmm_pcObject);
				sqlReader.Close();

				return slmmObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "loadinternal", "exception"), "ServiceLookupMethodMap could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ServiceLookupMethodMap", "Exception while loading ServiceLookupMethodMap object from database. See inner exception for details.", ex);
      }
    }

    public ServiceLookupMethodMap Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ServiceLookupMethodMapTable.GetColumnNames("[slmm]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[slmm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[slmm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[slmm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[slmm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[slmm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[slmm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[slmm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[slmm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[slmm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[slmm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[slmm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentConfigurationTable.GetColumnNames("[slmm_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentCredentialsTable.GetColumnNames("[slmm_pc_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentInterfaceTable.GetColumnNames("[slmm_pc_pi]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentProviderTable.GetColumnNames("[slmm_pc_pp]") : string.Empty) + 
							(this.Depth > 1 ? "," + BehaviorModelTable.GetColumnNames("[slmm_pc_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_pc_p]") : string.Empty) +  
					" FROM [core].[ServiceLookupMethodMap] AS [slmm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [slmm_s] ON [slmm].[ServiceID] = [slmm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [slmm_s_a] ON [slmm_s].[ApplicationID] = [slmm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_s_p] ON [slmm_s].[ProductID] = [slmm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [slmm_s_m] ON [slmm_s].[MerchantID] = [slmm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [slmm_s_st] ON [slmm_s].[ServiceTypeID] = [slmm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [slmm_s_ust] ON [slmm_s].[UserSessionTypeID] = [slmm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_s_c] ON [slmm_s].[FallbackCountryID] = [slmm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_s_l] ON [slmm_s].[FallbackLanguageID] = [slmm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [slmm_s_ar] ON [slmm_s].[FallbackAgeRatingID] = [slmm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [slmm_s_sc] ON [slmm_s].[ServiceConfigurationID] = [slmm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [slmm_s_bm] ON [slmm_s].[BusinessModelID] = [slmm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [slmm_s_t] ON [slmm_s].[TemplateID] = [slmm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_c] ON [slmm].[CountryID] = [slmm_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_c_l] ON [slmm_c].[LanguageID] = [slmm_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [slmm_pc] ON [slmm].[PaymentConfigurationID] = [slmm_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentCredentials] AS [slmm_pc_pc] ON [slmm_pc].[PaymentCredentialsID] = [slmm_pc_pc].[PaymentCredentialsID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentInterface] AS [slmm_pc_pi] ON [slmm_pc].[PaymentInterfaceID] = [slmm_pc_pi].[PaymentInterfaceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[PaymentProvider] AS [slmm_pc_pp] ON [slmm_pc].[PaymentProviderID] = [slmm_pc_pp].[PaymentProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BehaviorModel] AS [slmm_pc_bm] ON [slmm_pc].[BehaviorModelID] = [slmm_pc_bm].[BehaviorModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_pc_p] ON [slmm_pc].[ProductID] = [slmm_pc_p].[ProductID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "customload", "notfound"), "ServiceLookupMethodMap could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ServiceLookupMethodMapTable slmmTable = new ServiceLookupMethodMapTable(query);
				ServiceTable slmm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable slmm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable slmm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable slmm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable slmm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable slmm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable slmm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable slmm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable slmm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable slmm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable slmm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable slmm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				CountryTable slmm_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable slmm_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentConfigurationTable slmm_pcTable = (this.Depth > 0) ? new PaymentConfigurationTable(query) : null;
				PaymentCredentialsTable slmm_pc_pcTable = (this.Depth > 1) ? new PaymentCredentialsTable(query) : null;
				PaymentInterfaceTable slmm_pc_piTable = (this.Depth > 1) ? new PaymentInterfaceTable(query) : null;
				PaymentProviderTable slmm_pc_ppTable = (this.Depth > 1) ? new PaymentProviderTable(query) : null;
				BehaviorModelTable slmm_pc_bmTable = (this.Depth > 1) ? new BehaviorModelTable(query) : null;
				ProductTable slmm_pc_pTable = (this.Depth > 1) ? new ProductTable(query) : null;

        
				Application slmm_s_aObject = (this.Depth > 1) ? slmm_s_aTable.CreateInstance() : null;
				Product slmm_s_pObject = (this.Depth > 1) ? slmm_s_pTable.CreateInstance() : null;
				Merchant slmm_s_mObject = (this.Depth > 1) ? slmm_s_mTable.CreateInstance() : null;
				ServiceType slmm_s_stObject = (this.Depth > 1) ? slmm_s_stTable.CreateInstance() : null;
				UserSessionType slmm_s_ustObject = (this.Depth > 1) ? slmm_s_ustTable.CreateInstance() : null;
				Country slmm_s_cObject = (this.Depth > 1) ? slmm_s_cTable.CreateInstance() : null;
				Language slmm_s_lObject = (this.Depth > 1) ? slmm_s_lTable.CreateInstance() : null;
				AgeRating slmm_s_arObject = (this.Depth > 1) ? slmm_s_arTable.CreateInstance() : null;
				ServiceConfiguration slmm_s_scObject = (this.Depth > 1) ? slmm_s_scTable.CreateInstance() : null;
				BusinessModel slmm_s_bmObject = (this.Depth > 1) ? slmm_s_bmTable.CreateInstance() : null;
				Template slmm_s_tObject = (this.Depth > 1) ? slmm_s_tTable.CreateInstance() : null;
				Service slmm_sObject = (this.Depth > 0) ? slmm_sTable.CreateInstance(slmm_s_aObject, slmm_s_pObject, slmm_s_mObject, slmm_s_stObject, slmm_s_ustObject, slmm_s_cObject, slmm_s_lObject, slmm_s_arObject, slmm_s_scObject, slmm_s_bmObject, slmm_s_tObject) : null;
				Language slmm_c_lObject = (this.Depth > 1) ? slmm_c_lTable.CreateInstance() : null;
				Country slmm_cObject = (this.Depth > 0) ? slmm_cTable.CreateInstance(slmm_c_lObject) : null;
				PaymentCredentials slmm_pc_pcObject = (this.Depth > 1) ? slmm_pc_pcTable.CreateInstance() : null;
				PaymentInterface slmm_pc_piObject = (this.Depth > 1) ? slmm_pc_piTable.CreateInstance() : null;
				PaymentProvider slmm_pc_ppObject = (this.Depth > 1) ? slmm_pc_ppTable.CreateInstance() : null;
				BehaviorModel slmm_pc_bmObject = (this.Depth > 1) ? slmm_pc_bmTable.CreateInstance() : null;
				Product slmm_pc_pObject = (this.Depth > 1) ? slmm_pc_pTable.CreateInstance() : null;
				PaymentConfiguration slmm_pcObject = (this.Depth > 0) ? slmm_pcTable.CreateInstance(slmm_pc_pcObject, slmm_pc_piObject, slmm_pc_ppObject, slmm_pc_bmObject, slmm_pc_pObject) : null;
				ServiceLookupMethodMap slmmObject = slmmTable.CreateInstance(slmm_sObject, slmm_cObject, slmm_pcObject);
				sqlReader.Close();

				return slmmObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "customload", "exception"), "ServiceLookupMethodMap could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ServiceLookupMethodMap", "Exception while loading (custom/single) ServiceLookupMethodMap object from database. See inner exception for details.", ex);
      }
    }

    public List<ServiceLookupMethodMap> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ServiceLookupMethodMapTable.GetColumnNames("[slmm]") + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[slmm_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[slmm_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[slmm_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[slmm_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[slmm_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[slmm_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_s_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + AgeRatingTable.GetColumnNames("[slmm_s_ar]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[slmm_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[slmm_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[slmm_s_t]") : string.Empty) + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[slmm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[slmm_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentConfigurationTable.GetColumnNames("[slmm_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentCredentialsTable.GetColumnNames("[slmm_pc_pc]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentInterfaceTable.GetColumnNames("[slmm_pc_pi]") : string.Empty) + 
							(this.Depth > 1 ? "," + PaymentProviderTable.GetColumnNames("[slmm_pc_pp]") : string.Empty) + 
							(this.Depth > 1 ? "," + BehaviorModelTable.GetColumnNames("[slmm_pc_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[slmm_pc_p]") : string.Empty) +  
					" FROM [core].[ServiceLookupMethodMap] AS [slmm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [slmm_s] ON [slmm].[ServiceID] = [slmm_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [slmm_s_a] ON [slmm_s].[ApplicationID] = [slmm_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_s_p] ON [slmm_s].[ProductID] = [slmm_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Merchant] AS [slmm_s_m] ON [slmm_s].[MerchantID] = [slmm_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceType] AS [slmm_s_st] ON [slmm_s].[ServiceTypeID] = [slmm_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSessionType] AS [slmm_s_ust] ON [slmm_s].[UserSessionTypeID] = [slmm_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_s_c] ON [slmm_s].[FallbackCountryID] = [slmm_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_s_l] ON [slmm_s].[FallbackLanguageID] = [slmm_s_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[AgeRating] AS [slmm_s_ar] ON [slmm_s].[FallbackAgeRatingID] = [slmm_s_ar].[AgeRatingID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ServiceConfiguration] AS [slmm_s_sc] ON [slmm_s].[ServiceConfigurationID] = [slmm_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BusinessModel] AS [slmm_s_bm] ON [slmm_s].[BusinessModelID] = [slmm_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Template] AS [slmm_s_t] ON [slmm_s].[TemplateID] = [slmm_s_t].[TemplateID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [slmm_c] ON [slmm].[CountryID] = [slmm_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [slmm_c_l] ON [slmm_c].[LanguageID] = [slmm_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentConfiguration] AS [slmm_pc] ON [slmm].[PaymentConfigurationID] = [slmm_pc].[PaymentConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentCredentials] AS [slmm_pc_pc] ON [slmm_pc].[PaymentCredentialsID] = [slmm_pc_pc].[PaymentCredentialsID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[PaymentInterface] AS [slmm_pc_pi] ON [slmm_pc].[PaymentInterfaceID] = [slmm_pc_pi].[PaymentInterfaceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[PaymentProvider] AS [slmm_pc_pp] ON [slmm_pc].[PaymentProviderID] = [slmm_pc_pp].[PaymentProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[BehaviorModel] AS [slmm_pc_bm] ON [slmm_pc].[BehaviorModelID] = [slmm_pc_bm].[BehaviorModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Product] AS [slmm_pc_p] ON [slmm_pc].[ProductID] = [slmm_pc_p].[ProductID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "customloadmany", "notfound"), "ServiceLookupMethodMap list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<ServiceLookupMethodMap>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ServiceLookupMethodMapTable slmmTable = new ServiceLookupMethodMapTable(query);
				ServiceTable slmm_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable slmm_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable slmm_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable slmm_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable slmm_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable slmm_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable slmm_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				LanguageTable slmm_s_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				AgeRatingTable slmm_s_arTable = (this.Depth > 1) ? new AgeRatingTable(query) : null;
				ServiceConfigurationTable slmm_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable slmm_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable slmm_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;
				CountryTable slmm_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable slmm_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentConfigurationTable slmm_pcTable = (this.Depth > 0) ? new PaymentConfigurationTable(query) : null;
				PaymentCredentialsTable slmm_pc_pcTable = (this.Depth > 1) ? new PaymentCredentialsTable(query) : null;
				PaymentInterfaceTable slmm_pc_piTable = (this.Depth > 1) ? new PaymentInterfaceTable(query) : null;
				PaymentProviderTable slmm_pc_ppTable = (this.Depth > 1) ? new PaymentProviderTable(query) : null;
				BehaviorModelTable slmm_pc_bmTable = (this.Depth > 1) ? new BehaviorModelTable(query) : null;
				ProductTable slmm_pc_pTable = (this.Depth > 1) ? new ProductTable(query) : null;

        List<ServiceLookupMethodMap> result = new List<ServiceLookupMethodMap>();
        do
        {
          
					Application slmm_s_aObject = (this.Depth > 1) ? slmm_s_aTable.CreateInstance() : null;
					Product slmm_s_pObject = (this.Depth > 1) ? slmm_s_pTable.CreateInstance() : null;
					Merchant slmm_s_mObject = (this.Depth > 1) ? slmm_s_mTable.CreateInstance() : null;
					ServiceType slmm_s_stObject = (this.Depth > 1) ? slmm_s_stTable.CreateInstance() : null;
					UserSessionType slmm_s_ustObject = (this.Depth > 1) ? slmm_s_ustTable.CreateInstance() : null;
					Country slmm_s_cObject = (this.Depth > 1) ? slmm_s_cTable.CreateInstance() : null;
					Language slmm_s_lObject = (this.Depth > 1) ? slmm_s_lTable.CreateInstance() : null;
					AgeRating slmm_s_arObject = (this.Depth > 1) ? slmm_s_arTable.CreateInstance() : null;
					ServiceConfiguration slmm_s_scObject = (this.Depth > 1) ? slmm_s_scTable.CreateInstance() : null;
					BusinessModel slmm_s_bmObject = (this.Depth > 1) ? slmm_s_bmTable.CreateInstance() : null;
					Template slmm_s_tObject = (this.Depth > 1) ? slmm_s_tTable.CreateInstance() : null;
					Service slmm_sObject = (this.Depth > 0) ? slmm_sTable.CreateInstance(slmm_s_aObject, slmm_s_pObject, slmm_s_mObject, slmm_s_stObject, slmm_s_ustObject, slmm_s_cObject, slmm_s_lObject, slmm_s_arObject, slmm_s_scObject, slmm_s_bmObject, slmm_s_tObject) : null;
					Language slmm_c_lObject = (this.Depth > 1) ? slmm_c_lTable.CreateInstance() : null;
					Country slmm_cObject = (this.Depth > 0) ? slmm_cTable.CreateInstance(slmm_c_lObject) : null;
					PaymentCredentials slmm_pc_pcObject = (this.Depth > 1) ? slmm_pc_pcTable.CreateInstance() : null;
					PaymentInterface slmm_pc_piObject = (this.Depth > 1) ? slmm_pc_piTable.CreateInstance() : null;
					PaymentProvider slmm_pc_ppObject = (this.Depth > 1) ? slmm_pc_ppTable.CreateInstance() : null;
					BehaviorModel slmm_pc_bmObject = (this.Depth > 1) ? slmm_pc_bmTable.CreateInstance() : null;
					Product slmm_pc_pObject = (this.Depth > 1) ? slmm_pc_pTable.CreateInstance() : null;
					PaymentConfiguration slmm_pcObject = (this.Depth > 0) ? slmm_pcTable.CreateInstance(slmm_pc_pcObject, slmm_pc_piObject, slmm_pc_ppObject, slmm_pc_bmObject, slmm_pc_pObject) : null;
					ServiceLookupMethodMap slmmObject = (this.Depth > -1) ? slmmTable.CreateInstance(slmm_sObject, slmm_cObject, slmm_pcObject) : null;
					result.Add(slmmObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "customloadmany", "exception"), "ServiceLookupMethodMap list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ServiceLookupMethodMap", "Exception while loading (custom/many) ServiceLookupMethodMap object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, ServiceLookupMethodMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[ServiceLookupMethodMap] ([ServiceID],[CountryID],[LookupMethodID],[PaymentConfigurationID],[Description]) VALUES(@ServiceID,@CountryID,@LookupMethodID,@PaymentConfigurationID,@Description); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country == null ? DBNull.Value : (object)data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@LookupMethodID", (int)data.LookupMethod);
				sqlCmd.Parameters.AddWithValue("@PaymentConfigurationID", data.PaymentConfiguration.ID);
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "insert", "noprimarykey"), "ServiceLookupMethodMap could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "ServiceLookupMethodMap", "Exception while inserting ServiceLookupMethodMap object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "insert", "exception"), "ServiceLookupMethodMap could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "ServiceLookupMethodMap", "Exception while inserting ServiceLookupMethodMap object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, ServiceLookupMethodMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[ServiceLookupMethodMap] SET " +
												"[ServiceID] = @ServiceID, " + 
												"[CountryID] = @CountryID, " + 
												"[LookupMethodID] = @LookupMethodID, " + 
												"[PaymentConfigurationID] = @PaymentConfigurationID, " + 
												"[Description] = @Description, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ServiceLookupMethodMapID] = @ServiceLookupMethodMapID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country == null ? DBNull.Value : (object)data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@LookupMethodID", (int)data.LookupMethod);
				sqlCmd.Parameters.AddWithValue("@PaymentConfigurationID", data.PaymentConfiguration.ID);
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ServiceLookupMethodMapID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "update", "norecord"), "ServiceLookupMethodMap could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ServiceLookupMethodMap", "Exception while updating ServiceLookupMethodMap object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "update", "morerecords"), "ServiceLookupMethodMap was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ServiceLookupMethodMap", "Exception while updating ServiceLookupMethodMap object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "update", "exception"), "ServiceLookupMethodMap could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "ServiceLookupMethodMap", "Exception while updating ServiceLookupMethodMap object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, ServiceLookupMethodMap data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[ServiceLookupMethodMap] WHERE ServiceLookupMethodMapID = @ServiceLookupMethodMapID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ServiceLookupMethodMapID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "delete", "norecord"), "ServiceLookupMethodMap could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "ServiceLookupMethodMap", "Exception while deleting ServiceLookupMethodMap object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("slmm", "delete", "exception"), "ServiceLookupMethodMap could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "ServiceLookupMethodMap", "Exception while deleting ServiceLookupMethodMap object from database. See inner exception for details.", ex);
      }
    }
  }
}

