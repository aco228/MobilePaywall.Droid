using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ContentCategoryMapTable : TableBase<ContentCategoryMap>
  {
    public static string GetColumnNames()
    {
      return TableBase<ContentCategoryMap>.GetColumnNames(string.Empty, ContentCategoryMapTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ContentCategoryMap>.GetColumnNames(tablePrefix, ContentCategoryMapTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ContentCategoryMapID = new ColumnDescription("ContentCategoryMapID", 0, typeof(int));
			public static readonly ColumnDescription ContentID = new ColumnDescription("ContentID", 1, typeof(int));
			public static readonly ColumnDescription CategoryID = new ColumnDescription("CategoryID", 2, typeof(int));
			public static readonly ColumnDescription IsEnabled = new ColumnDescription("IsEnabled", 3, typeof(bool));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 4, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ContentCategoryMapID,
				ContentID,
				CategoryID,
				IsEnabled,
				Created,
				Updated
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ContentCategoryMapTable(SqlQuery query) : base(query) { }
    public ContentCategoryMapTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ContentCategoryMapID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentCategoryMapID)); } }
		public int ContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentID)); } }
		public int CategoryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CategoryID)); } }
		public bool IsEnabled { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsEnabled)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		

	  public ContentCategoryMap CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ContentCategoryMap(this.ContentCategoryMapID,new Content(this.ContentID), new Category(this.CategoryID), this.IsEnabled,this.Created,this.Updated); 
		}
		public ContentCategoryMap CreateInstance(Category category)  
		{ 
			if (!this.HasData) return null;
			return new ContentCategoryMap(this.ContentCategoryMapID,new Content(this.ContentID), category ?? new Category(this.CategoryID), this.IsEnabled,this.Created,this.Updated); 
		}
		public ContentCategoryMap CreateInstance(Content content)  
		{ 
			if (!this.HasData) return null;
			return new ContentCategoryMap(this.ContentCategoryMapID,content ?? new Content(this.ContentID), new Category(this.CategoryID), this.IsEnabled,this.Created,this.Updated); 
		}
		public ContentCategoryMap CreateInstance(Content content, Category category)  
		{ 
			if (!this.HasData) return null;
			return new ContentCategoryMap(this.ContentCategoryMapID,content ?? new Content(this.ContentID), category ?? new Category(this.CategoryID), this.IsEnabled,this.Created,this.Updated); 
		}
		

  }
}

