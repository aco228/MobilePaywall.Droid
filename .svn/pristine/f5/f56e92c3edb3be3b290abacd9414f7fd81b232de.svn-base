using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IConversionReportManager : IDataManager<ConversionReport> 
  {
	

  }

  public partial class ConversionReport : MobilePaywallObject<IConversionReportManager> 
  {
		private UserSession _userSession;
		private Payment _payment;
		private Transaction _transaction;
		private ConversionProvider _conversionProvider;
		private ConversionAction _conversionAction;
		private ConversionReportStatus _conversionReportStatus;
		

		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public Payment Payment 
		{
			get
			{
				if (this._payment != null &&
						this._payment.IsEmpty)
					if (this.ConnectionContext != null)
						this._payment = Payment.CreateManager().LazyLoad(this.ConnectionContext, this._payment.ID) as Payment;
					else
						this._payment = Payment.CreateManager().LazyLoad(this._payment.ID) as Payment;
				return this._payment;
			}
			set { _payment = value; }
		}

		public Transaction Transaction 
		{
			get
			{
				if (this._transaction != null &&
						this._transaction.IsEmpty)
					if (this.ConnectionContext != null)
						this._transaction = Transaction.CreateManager().LazyLoad(this.ConnectionContext, this._transaction.ID) as Transaction;
					else
						this._transaction = Transaction.CreateManager().LazyLoad(this._transaction.ID) as Transaction;
				return this._transaction;
			}
			set { _transaction = value; }
		}

		public ConversionProvider ConversionProvider  { get { return this._conversionProvider; } set { this._conversionProvider = value; } }
		public ConversionAction ConversionAction  { get { return this._conversionAction; } set { this._conversionAction = value; } }
		public ConversionReportStatus ConversionReportStatus  { get { return this._conversionReportStatus; } set { this._conversionReportStatus = value; } }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ConversionReport()
    { 
    }

    public ConversionReport(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ConversionReport(int id,  UserSession userSession, Payment payment, Transaction transaction, ConversionProvider conversionProvider, ConversionAction conversionAction, ConversionReportStatus conversionReportStatus, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._userSession = userSession;
			this._payment = payment;
			this._transaction = transaction;
			this._conversionProvider = conversionProvider;
			this._conversionAction = conversionAction;
			this._conversionReportStatus = conversionReportStatus;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ConversionReport(-1,  this.UserSession, this.Payment, this.Transaction, this.ConversionProvider, this.ConversionAction, this.ConversionReportStatus, DateTime.Now, DateTime.Now);
    }
  }
}

