using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class TemplateServiceFlowEntryTable : TableBase<TemplateServiceFlowEntry>
  {
    public static string GetColumnNames()
    {
      return TableBase<TemplateServiceFlowEntry>.GetColumnNames(string.Empty, TemplateServiceFlowEntryTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<TemplateServiceFlowEntry>.GetColumnNames(tablePrefix, TemplateServiceFlowEntryTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription TemplateServiceFlowEntryID = new ColumnDescription("TemplateServiceFlowEntryID", 0, typeof(int));
			public static readonly ColumnDescription TemplateServiceFlowID = new ColumnDescription("TemplateServiceFlowID", 1, typeof(int));
			public static readonly ColumnDescription Order = new ColumnDescription("Order", 2, typeof(int));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 3, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 4, typeof(string));
			public static readonly ColumnDescription ImageUrl = new ColumnDescription("ImageUrl", 5, typeof(string));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				TemplateServiceFlowEntryID,
				TemplateServiceFlowID,
				Order,
				Title,
				Description,
				ImageUrl,
				Created,
				Updated
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public TemplateServiceFlowEntryTable(SqlQuery query) : base(query) { }
    public TemplateServiceFlowEntryTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int TemplateServiceFlowEntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TemplateServiceFlowEntryID)); } }
		public int TemplateServiceFlowID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TemplateServiceFlowID)); } }
		public int Order { get { return this.Reader.GetInt32(this.GetIndex(Columns.Order)); } }
		
		public string Title 
		{
			get
			{
				int index = this.GetIndex(Columns.Title);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string ImageUrl 
		{
			get
			{
				int index = this.GetIndex(Columns.ImageUrl);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		

	  public TemplateServiceFlowEntry CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceFlowEntry(this.TemplateServiceFlowEntryID,new TemplateServiceFlow(this.TemplateServiceFlowID), this.Order,this.Title,this.Description,this.ImageUrl,this.Created,this.Updated); 
		}
		public TemplateServiceFlowEntry CreateInstance(TemplateServiceFlow templateServiceFlow)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceFlowEntry(this.TemplateServiceFlowEntryID,templateServiceFlow ?? new TemplateServiceFlow(this.TemplateServiceFlowID), this.Order,this.Title,this.Description,this.ImageUrl,this.Created,this.Updated); 
		}
		

  }
}

