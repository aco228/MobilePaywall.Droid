using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ShortMessageProviderConfigurationTable : TableBase<ShortMessageProviderConfiguration>
  {
    public static string GetColumnNames()
    {
      return TableBase<ShortMessageProviderConfiguration>.GetColumnNames(string.Empty, ShortMessageProviderConfigurationTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ShortMessageProviderConfiguration>.GetColumnNames(tablePrefix, ShortMessageProviderConfigurationTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ShortMessageProviderConfigurationID = new ColumnDescription("ShortMessageProviderConfigurationID", 0, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 1, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 2, typeof(string));
			public static readonly ColumnDescription Url = new ColumnDescription("Url", 3, typeof(string));
			public static readonly ColumnDescription Username = new ColumnDescription("Username", 4, typeof(string));
			public static readonly ColumnDescription Password = new ColumnDescription("Password", 5, typeof(string));
			public static readonly ColumnDescription Key = new ColumnDescription("Key", 6, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ShortMessageProviderConfigurationID,
				Name,
				Description,
				Url,
				Username,
				Password,
				Key,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ShortMessageProviderConfigurationTable(SqlQuery query) : base(query) { }
    public ShortMessageProviderConfigurationTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ShortMessageProviderConfigurationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageProviderConfigurationID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public string Url { get { return this.Reader.GetString(this.GetIndex(Columns.Url)); } }
		public string Username { get { return this.Reader.GetString(this.GetIndex(Columns.Username)); } }
		public string Password { get { return this.Reader.GetString(this.GetIndex(Columns.Password)); } }
		
		public string Key 
		{
			get
			{
				int index = this.GetIndex(Columns.Key);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ShortMessageProviderConfiguration CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageProviderConfiguration(this.ShortMessageProviderConfigurationID,this.Name,this.Description,this.Url,this.Username,this.Password,this.Key,this.Updated,this.Created); 
		}
		

  }
}

