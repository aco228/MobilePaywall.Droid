using Direct.Core;
using MobilePaywall.Data;
using MobilePaywall.MobilePaywallDirect.Databases;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Web;

namespace MobilePaywall.Service.Callback.Code.Undercover
{
	public static class UndercoverAgent
	{

		public static MobilePaywallDirect.PaywallDirect Database = MobilePaywallDirect.PaywallDirect.Instance;

		// us is set in case that this is our service
		public static UndercoverResult ContinueWithReport(string url, UserSession us = null) => GetOfferResult(new UndercoverOffer(url, us));
		public static UndercoverResult ContinueWithReport_CC(string link, string affID = "", string pubID = "") => GetOfferResult(new Undercover.Specific.UndercoverCCOffer(link, affID, pubID));
    
		private static UndercoverResult GetOfferResult(UndercoverOffer offer)
		{
			UndercoverResult result = new UndercoverResult();
			result.DontSendConversionToBananaclicks = false;
			result.Offer = offer;
			result.Offer.Configure();

      if(offer.OfferTypeKey.Equals("CCOffer"))
        UndercoverAgent.Log(result.Offer,
          string.Format(offer.OfferTypeKey + ":: UndercoverAgent:: Offer (name={0}, id={1}, transactions={2}, value={3}, url={4}) {5} (NEW OFFER)", 
          result.Offer.OfferID, result.Offer.ID, result.Offer.Transactions, offer.Link, result.Offer.Value, ""));

      if (result.Offer.OfferDoesNotExists || result.Offer.HasError)
				return result;

			if(!result.Offer.IsActive)
			{
				UndercoverAgent.Log(result.Offer, 
					string.Format(offer.OfferTypeKey + ":: UndercoverAgent:: Offer (name={0}, id={1}, transactions={2}, value={3}, url={4}) {5} (OFFEER IS NOT ACTIVE)",  result.Offer.OfferID,  result.Offer.ID,  result.Offer.Transactions,  offer.Link,  result.Offer.Value, ""));
				return result;
			}

			result.DontSendConversionToBananaclicks = result.Offer.DontSendConversionToBananaclicks;
			UndercoverAgent.Log(result.Offer, 
				string.Format(offer.OfferTypeKey + ":: UndercoverAgent:: Offer (name={0}, id={1}, transactions={2}, value={3}, url={4}) {5}", result.Offer.OfferID,  result.Offer.ID,  result.Offer.Transactions,  result.Offer.Value,  offer.Link, 
				(!result.DontSendConversionToBananaclicks ? "THIS CONVERSION WILL NOT BE REPORTED" : "continue")));

			if (!result.DontSendConversionToBananaclicks)
			{
				result.Offer.UndercoverTransactions++;
				result.Offer.AddNewConversion();
			}

			result.Offer.UpdateValues();
			return result;
		}

		public static void Log(UndercoverOffer offer, string text)
		{
			UndercoverAgent.Database.Execute(string.Format("INSERT INTO MobilePaywall.core.UndercoverLog (UndercoverOfferID, Text) VALUES ({0}, '{1}')",
				(offer != null && offer.Exists ? offer.ID.ToString() : "NULL"), text ));
		}
		public static void SendPostbackToBananaclicks(UndercoverOffer offer)
		{
			string postbackLink = "http://conversions.bananaclicks.com/?transaction_id=" + offer.ClickID;
			UndercoverAgent.Log(offer, "Postback.Link:: " + postbackLink);
			HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(postbackLink);
			webRequest.AllowAutoRedirect = false;
			HttpWebResponse response;
			HttpStatusCode statusCode;

			try
			{
				response = (HttpWebResponse)webRequest.GetResponse();
			}
			catch (WebException we)
			{
				UndercoverAgent.Log(offer, "Postback.Fatal:: " + we);
				return;
			}

			statusCode = response.StatusCode;
			UndercoverAgent.Log(offer, "Postback.ResponseCode:: " + statusCode.ToString());
		}

  }
}