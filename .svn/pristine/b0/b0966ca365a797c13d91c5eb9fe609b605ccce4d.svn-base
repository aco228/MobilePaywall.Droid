using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class FilterBypassTable : TableBase<FilterBypass>
  {
    public static string GetColumnNames()
    {
      return TableBase<FilterBypass>.GetColumnNames(string.Empty, FilterBypassTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<FilterBypass>.GetColumnNames(tablePrefix, FilterBypassTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription FilterBypassID = new ColumnDescription("FilterBypassID", 0, typeof(int));
			public static readonly ColumnDescription FilterBypassTypeID = new ColumnDescription("FilterBypassTypeID", 1, typeof(int));
			public static readonly ColumnDescription CountryID = new ColumnDescription("CountryID", 2, typeof(int));
			public static readonly ColumnDescription PaymentProviderID = new ColumnDescription("PaymentProviderID", 3, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 4, typeof(int));
			public static readonly ColumnDescription Enabled = new ColumnDescription("Enabled", 5, typeof(bool));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 6, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				FilterBypassID,
				FilterBypassTypeID,
				CountryID,
				PaymentProviderID,
				ServiceID,
				Enabled,
				Description,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public FilterBypassTable(SqlQuery query) : base(query) { }
    public FilterBypassTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int FilterBypassID { get { return this.Reader.GetInt32(this.GetIndex(Columns.FilterBypassID)); } }
		public int FilterBypassTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.FilterBypassTypeID)); } }
		
		public int? CountryID 
		{
			get
			{
				int index = this.GetIndex(Columns.CountryID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? PaymentProviderID 
		{
			get
			{
				int index = this.GetIndex(Columns.PaymentProviderID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public int? ServiceID 
		{
			get
			{
				int index = this.GetIndex(Columns.ServiceID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public bool Enabled { get { return this.Reader.GetBoolean(this.GetIndex(Columns.Enabled)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public FilterBypass CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,(CountryID.HasValue ? new Country(this.CountryID.Value) : null), (PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(Country country)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(PaymentProvider paymentProvider)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,(CountryID.HasValue ? new Country(this.CountryID.Value) : null), paymentProvider ?? (this.PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,(CountryID.HasValue ? new Country(this.CountryID.Value) : null), (PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(Country country, PaymentProvider paymentProvider)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), paymentProvider ?? (this.PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), (ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(Country country, Service service)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), (PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(PaymentProvider paymentProvider, Service service)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,(CountryID.HasValue ? new Country(this.CountryID.Value) : null), paymentProvider ?? (this.PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		public FilterBypass CreateInstance(Country country, PaymentProvider paymentProvider, Service service)  
		{ 
			if (!this.HasData) return null;
			return new FilterBypass(this.FilterBypassID,(FilterBypassType)this.FilterBypassTypeID,country ?? (this.CountryID.HasValue ? new Country(this.CountryID.Value) : null), paymentProvider ?? (this.PaymentProviderID.HasValue ? new PaymentProvider(this.PaymentProviderID.Value) : null), service ?? (this.ServiceID.HasValue ? new Service(this.ServiceID.Value) : null), this.Enabled,this.Description,this.Updated,this.Created); 
		}
		

  }
}

