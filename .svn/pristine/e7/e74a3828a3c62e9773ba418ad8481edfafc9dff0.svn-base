using Senti.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;



namespace MobilePaywall.Data
{
	public partial interface IServiceConfigurationEntryManager
	{
		List<ServiceConfigurationEntry> Load(ServiceConfiguration serviceConfiguration);
		List<ServiceConfigurationEntry> Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration);
		ServiceConfigurationEntry Load(ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator);
		ServiceConfigurationEntry Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator);

		//List<ServiceConfigurationEntry> Load(ServiceConfiguration serviceConfiguration);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration);
		//List<ServiceConfigurationEntry> Load(Country country);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country);
		//List<ServiceConfigurationEntry> Load(MobileOperator mobileOperator);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, MobileOperator mobileOperator);
		//List<ServiceConfigurationEntry> Load(Country country, MobileOperator mobileOperator);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, MobileOperator mobileOperator);
		//List<ServiceConfigurationEntry> Load(Country country, bool isPaymentEnabled);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, bool isPaymentEnabled);
		//List<ServiceConfigurationEntry> Load(MobileOperator mobileOperator, bool isPaymentEnabled);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, MobileOperator mobileOperator, bool isPaymentEnabled);
		//List<ServiceConfigurationEntry> Load(Country country, MobileOperator mobileOperator, bool isPaymentEnabled);
		//List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, MobileOperator mobileOperator, bool isPaymentEnabled);
		//ServiceConfigurationEntry Load(ServiceConfiguration serviceConfiguration, MobileOperator mobileOperator);
		//ServiceConfigurationEntry Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration, MobileOperator mobileOperator);
	}

	public partial class ServiceConfigurationEntry
  {
    public override bool IsDeletable { get { return true; } }
    public void UpdateWithHistory(ClientSession cs) { EditHistory.Track(EditHistoryAction.Update, cs, "ServiceConfigurationEntry", "core", this); }
    public void UpdateWithHistory(IUserSession cs) { EditHistory.Track(EditHistoryAction.Update, cs, "ServiceConfigurationEntry", "core", this); }
    public void UpdateOrInsertWithHistory(ConnectionInfo connection, ClientSession cs, Service service)
    {
      EditHistory.Track(EditHistoryAction.UpdateOrInsert, cs, this, connection, service);
    }
    public void DeleteWithHistory(ConnectionInfo connection, ClientSession cs, Service service)
    {
      EditHistory.Track(EditHistoryAction.Delete, cs, this, connection, service);
    }
  }
}

