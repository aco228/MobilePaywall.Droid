using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(ContentAccessView))] 
  public partial class ContentAccessViewManager : MobilePaywall.Data.Sql.SqlManagerBase<ContentAccessView>, IContentAccessViewManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override ContentAccessView LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ContentAccessViewTable.GetColumnNames("[cav]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cav_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[cav_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cav_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cav_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cav_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cav_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cav_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cav_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cav_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cav_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cav_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cav_s_bm]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceConfigurationEntryTable.GetColumnNames("[cav_sce]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_sce_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_sce_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[cav_sce_mo]") : string.Empty) + 
					" FROM [core].[ContentAccessView] AS [cav] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [cav_i] ON [cav].[InstanceID] = [cav_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [cav_ct] ON [cav].[ContentTypeID] = [cav_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_a] ON [cav].[ApplicationID] = [cav_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cav_a_i] ON [cav_a].[InstanceID] = [cav_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cav_a_rt] ON [cav_a].[RuntimeTypeID] = [cav_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cav_s] ON [cav].[ServiceID] = [cav_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_s_a] ON [cav_s].[ApplicationID] = [cav_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cav_s_p] ON [cav_s].[ProductID] = [cav_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cav_s_m] ON [cav_s].[MerchantID] = [cav_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cav_s_st] ON [cav_s].[ServiceTypeID] = [cav_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cav_s_ust] ON [cav_s].[UserSessionTypeID] = [cav_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_s_c] ON [cav_s].[FallbackCountryID] = [cav_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_s_sc] ON [cav_s].[ServiceConfigurationID] = [cav_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cav_s_bm] ON [cav_s].[BusinessModelID] = [cav_s_bm].[BusinessModelID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfigurationEntry] AS [cav_sce] ON [cav].[ServiceConfigurationEntryID] = [cav_sce].[ServiceConfigurationEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_sce_sc] ON [cav_sce].[ServiceConfigurationID] = [cav_sce_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_sce_c] ON [cav_sce].[CountryID] = [cav_sce_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [cav_sce_mo] ON [cav_sce].[MobileOperatorID] = [cav_sce_mo].[MobileOperatorID] ";
				sqlCmdText += "WHERE [cav].[ContentAccessViewID] = @ContentAccessViewID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentAccessViewID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "loadinternal", "notfound"), "ContentAccessView could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentAccessViewTable cavTable = new ContentAccessViewTable(query);
				InstanceTable cav_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ContentTypeTable cav_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ApplicationTable cav_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cav_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cav_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable cav_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cav_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cav_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cav_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cav_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cav_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cav_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cav_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cav_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				ServiceConfigurationEntryTable cav_sceTable = (this.Depth > 0) ? new ServiceConfigurationEntryTable(query) : null;
				ServiceConfigurationTable cav_sce_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				CountryTable cav_sce_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable cav_sce_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				Instance cav_iObject = (this.Depth > 0) ? cav_iTable.CreateInstance() : null;
				ContentType cav_ctObject = (this.Depth > 0) ? cav_ctTable.CreateInstance() : null;
				Instance cav_a_iObject = (this.Depth > 1) ? cav_a_iTable.CreateInstance() : null;
				RuntimeType cav_a_rtObject = (this.Depth > 1) ? cav_a_rtTable.CreateInstance() : null;
				Application cav_aObject = (this.Depth > 0) ? cav_aTable.CreateInstance(cav_a_iObject, cav_a_rtObject) : null;
				Application cav_s_aObject = (this.Depth > 1) ? cav_s_aTable.CreateInstance() : null;
				Product cav_s_pObject = (this.Depth > 1) ? cav_s_pTable.CreateInstance() : null;
				Merchant cav_s_mObject = (this.Depth > 1) ? cav_s_mTable.CreateInstance() : null;
				ServiceType cav_s_stObject = (this.Depth > 1) ? cav_s_stTable.CreateInstance() : null;
				UserSessionType cav_s_ustObject = (this.Depth > 1) ? cav_s_ustTable.CreateInstance() : null;
				Country cav_s_cObject = (this.Depth > 1) ? cav_s_cTable.CreateInstance() : null;
				ServiceConfiguration cav_s_scObject = (this.Depth > 1) ? cav_s_scTable.CreateInstance() : null;
				BusinessModel cav_s_bmObject = (this.Depth > 1) ? cav_s_bmTable.CreateInstance() : null;
				Service cav_sObject = (this.Depth > 0) ? cav_sTable.CreateInstance(cav_s_aObject, cav_s_pObject, cav_s_mObject, cav_s_stObject, cav_s_ustObject, cav_s_cObject, cav_s_scObject, cav_s_bmObject) : null;
				ServiceConfiguration cav_sce_scObject = (this.Depth > 1) ? cav_sce_scTable.CreateInstance() : null;
				Country cav_sce_cObject = (this.Depth > 1) ? cav_sce_cTable.CreateInstance() : null;
				MobileOperator cav_sce_moObject = (this.Depth > 1) ? cav_sce_moTable.CreateInstance() : null;
				ServiceConfigurationEntry cav_sceObject = (this.Depth > 0) ? cav_sceTable.CreateInstance(cav_sce_scObject, cav_sce_cObject, cav_sce_moObject) : null;
				ContentAccessView cavObject = cavTable.CreateInstance(cav_iObject, cav_ctObject, cav_aObject, cav_sObject, cav_sceObject);
				sqlReader.Close();

				return cavObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "loadinternal", "exception"), "ContentAccessView could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentAccessView", "Exception while loading ContentAccessView object from database. See inner exception for details.", ex);
      }
    }

    public ContentAccessView Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentAccessViewTable.GetColumnNames("[cav]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cav_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[cav_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cav_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cav_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cav_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cav_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cav_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cav_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cav_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cav_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cav_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cav_s_bm]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceConfigurationEntryTable.GetColumnNames("[cav_sce]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_sce_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_sce_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[cav_sce_mo]") : string.Empty) +  
					" FROM [core].[ContentAccessView] AS [cav] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [cav_i] ON [cav].[InstanceID] = [cav_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [cav_ct] ON [cav].[ContentTypeID] = [cav_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_a] ON [cav].[ApplicationID] = [cav_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cav_a_i] ON [cav_a].[InstanceID] = [cav_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cav_a_rt] ON [cav_a].[RuntimeTypeID] = [cav_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cav_s] ON [cav].[ServiceID] = [cav_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_s_a] ON [cav_s].[ApplicationID] = [cav_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cav_s_p] ON [cav_s].[ProductID] = [cav_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cav_s_m] ON [cav_s].[MerchantID] = [cav_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cav_s_st] ON [cav_s].[ServiceTypeID] = [cav_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cav_s_ust] ON [cav_s].[UserSessionTypeID] = [cav_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_s_c] ON [cav_s].[FallbackCountryID] = [cav_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_s_sc] ON [cav_s].[ServiceConfigurationID] = [cav_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cav_s_bm] ON [cav_s].[BusinessModelID] = [cav_s_bm].[BusinessModelID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfigurationEntry] AS [cav_sce] ON [cav].[ServiceConfigurationEntryID] = [cav_sce].[ServiceConfigurationEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_sce_sc] ON [cav_sce].[ServiceConfigurationID] = [cav_sce_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_sce_c] ON [cav_sce].[CountryID] = [cav_sce_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [cav_sce_mo] ON [cav_sce].[MobileOperatorID] = [cav_sce_mo].[MobileOperatorID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "customload", "notfound"), "ContentAccessView could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentAccessViewTable cavTable = new ContentAccessViewTable(query);
				InstanceTable cav_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ContentTypeTable cav_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ApplicationTable cav_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cav_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cav_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable cav_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cav_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cav_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cav_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cav_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cav_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cav_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cav_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cav_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				ServiceConfigurationEntryTable cav_sceTable = (this.Depth > 0) ? new ServiceConfigurationEntryTable(query) : null;
				ServiceConfigurationTable cav_sce_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				CountryTable cav_sce_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable cav_sce_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				Instance cav_iObject = (this.Depth > 0) ? cav_iTable.CreateInstance() : null;
				ContentType cav_ctObject = (this.Depth > 0) ? cav_ctTable.CreateInstance() : null;
				Instance cav_a_iObject = (this.Depth > 1) ? cav_a_iTable.CreateInstance() : null;
				RuntimeType cav_a_rtObject = (this.Depth > 1) ? cav_a_rtTable.CreateInstance() : null;
				Application cav_aObject = (this.Depth > 0) ? cav_aTable.CreateInstance(cav_a_iObject, cav_a_rtObject) : null;
				Application cav_s_aObject = (this.Depth > 1) ? cav_s_aTable.CreateInstance() : null;
				Product cav_s_pObject = (this.Depth > 1) ? cav_s_pTable.CreateInstance() : null;
				Merchant cav_s_mObject = (this.Depth > 1) ? cav_s_mTable.CreateInstance() : null;
				ServiceType cav_s_stObject = (this.Depth > 1) ? cav_s_stTable.CreateInstance() : null;
				UserSessionType cav_s_ustObject = (this.Depth > 1) ? cav_s_ustTable.CreateInstance() : null;
				Country cav_s_cObject = (this.Depth > 1) ? cav_s_cTable.CreateInstance() : null;
				ServiceConfiguration cav_s_scObject = (this.Depth > 1) ? cav_s_scTable.CreateInstance() : null;
				BusinessModel cav_s_bmObject = (this.Depth > 1) ? cav_s_bmTable.CreateInstance() : null;
				Service cav_sObject = (this.Depth > 0) ? cav_sTable.CreateInstance(cav_s_aObject, cav_s_pObject, cav_s_mObject, cav_s_stObject, cav_s_ustObject, cav_s_cObject, cav_s_scObject, cav_s_bmObject) : null;
				ServiceConfiguration cav_sce_scObject = (this.Depth > 1) ? cav_sce_scTable.CreateInstance() : null;
				Country cav_sce_cObject = (this.Depth > 1) ? cav_sce_cTable.CreateInstance() : null;
				MobileOperator cav_sce_moObject = (this.Depth > 1) ? cav_sce_moTable.CreateInstance() : null;
				ServiceConfigurationEntry cav_sceObject = (this.Depth > 0) ? cav_sceTable.CreateInstance(cav_sce_scObject, cav_sce_cObject, cav_sce_moObject) : null;
				ContentAccessView cavObject = cavTable.CreateInstance(cav_iObject, cav_ctObject, cav_aObject, cav_sObject, cav_sceObject);
				sqlReader.Close();

				return cavObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "customload", "exception"), "ContentAccessView could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentAccessView", "Exception while loading (custom/single) ContentAccessView object from database. See inner exception for details.", ex);
      }
    }

    public List<ContentAccessView> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentAccessViewTable.GetColumnNames("[cav]") + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cav_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ContentTypeTable.GetColumnNames("[cav_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cav_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cav_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cav_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cav_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cav_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cav_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cav_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cav_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cav_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cav_s_bm]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceConfigurationEntryTable.GetColumnNames("[cav_sce]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cav_sce_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cav_sce_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[cav_sce_mo]") : string.Empty) +  
					" FROM [core].[ContentAccessView] AS [cav] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [cav_i] ON [cav].[InstanceID] = [cav_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [cav_ct] ON [cav].[ContentTypeID] = [cav_ct].[ContentTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_a] ON [cav].[ApplicationID] = [cav_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cav_a_i] ON [cav_a].[InstanceID] = [cav_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cav_a_rt] ON [cav_a].[RuntimeTypeID] = [cav_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cav_s] ON [cav].[ServiceID] = [cav_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cav_s_a] ON [cav_s].[ApplicationID] = [cav_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cav_s_p] ON [cav_s].[ProductID] = [cav_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cav_s_m] ON [cav_s].[MerchantID] = [cav_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cav_s_st] ON [cav_s].[ServiceTypeID] = [cav_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cav_s_ust] ON [cav_s].[UserSessionTypeID] = [cav_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_s_c] ON [cav_s].[FallbackCountryID] = [cav_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_s_sc] ON [cav_s].[ServiceConfigurationID] = [cav_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cav_s_bm] ON [cav_s].[BusinessModelID] = [cav_s_bm].[BusinessModelID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfigurationEntry] AS [cav_sce] ON [cav].[ServiceConfigurationEntryID] = [cav_sce].[ServiceConfigurationEntryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cav_sce_sc] ON [cav_sce].[ServiceConfigurationID] = [cav_sce_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cav_sce_c] ON [cav_sce].[CountryID] = [cav_sce_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [cav_sce_mo] ON [cav_sce].[MobileOperatorID] = [cav_sce_mo].[MobileOperatorID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "customloadmany", "notfound"), "ContentAccessView list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<ContentAccessView>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentAccessViewTable cavTable = new ContentAccessViewTable(query);
				InstanceTable cav_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ContentTypeTable cav_ctTable = (this.Depth > 0) ? new ContentTypeTable(query) : null;
				ApplicationTable cav_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cav_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cav_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				ServiceTable cav_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cav_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cav_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cav_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cav_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cav_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cav_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cav_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cav_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				ServiceConfigurationEntryTable cav_sceTable = (this.Depth > 0) ? new ServiceConfigurationEntryTable(query) : null;
				ServiceConfigurationTable cav_sce_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				CountryTable cav_sce_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable cav_sce_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        List<ContentAccessView> result = new List<ContentAccessView>();
        do
        {
          
					Instance cav_iObject = (this.Depth > 0) ? cav_iTable.CreateInstance() : null;
					ContentType cav_ctObject = (this.Depth > 0) ? cav_ctTable.CreateInstance() : null;
					Instance cav_a_iObject = (this.Depth > 1) ? cav_a_iTable.CreateInstance() : null;
					RuntimeType cav_a_rtObject = (this.Depth > 1) ? cav_a_rtTable.CreateInstance() : null;
					Application cav_aObject = (this.Depth > 0) ? cav_aTable.CreateInstance(cav_a_iObject, cav_a_rtObject) : null;
					Application cav_s_aObject = (this.Depth > 1) ? cav_s_aTable.CreateInstance() : null;
					Product cav_s_pObject = (this.Depth > 1) ? cav_s_pTable.CreateInstance() : null;
					Merchant cav_s_mObject = (this.Depth > 1) ? cav_s_mTable.CreateInstance() : null;
					ServiceType cav_s_stObject = (this.Depth > 1) ? cav_s_stTable.CreateInstance() : null;
					UserSessionType cav_s_ustObject = (this.Depth > 1) ? cav_s_ustTable.CreateInstance() : null;
					Country cav_s_cObject = (this.Depth > 1) ? cav_s_cTable.CreateInstance() : null;
					ServiceConfiguration cav_s_scObject = (this.Depth > 1) ? cav_s_scTable.CreateInstance() : null;
					BusinessModel cav_s_bmObject = (this.Depth > 1) ? cav_s_bmTable.CreateInstance() : null;
					Service cav_sObject = (this.Depth > 0) ? cav_sTable.CreateInstance(cav_s_aObject, cav_s_pObject, cav_s_mObject, cav_s_stObject, cav_s_ustObject, cav_s_cObject, cav_s_scObject, cav_s_bmObject) : null;
					ServiceConfiguration cav_sce_scObject = (this.Depth > 1) ? cav_sce_scTable.CreateInstance() : null;
					Country cav_sce_cObject = (this.Depth > 1) ? cav_sce_cTable.CreateInstance() : null;
					MobileOperator cav_sce_moObject = (this.Depth > 1) ? cav_sce_moTable.CreateInstance() : null;
					ServiceConfigurationEntry cav_sceObject = (this.Depth > 0) ? cav_sceTable.CreateInstance(cav_sce_scObject, cav_sce_cObject, cav_sce_moObject) : null;
					ContentAccessView cavObject = (this.Depth > -1) ? cavTable.CreateInstance(cav_iObject, cav_ctObject, cav_aObject, cav_sObject, cav_sceObject) : null;
					result.Add(cavObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "customloadmany", "exception"), "ContentAccessView list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentAccessView", "Exception while loading (custom/many) ContentAccessView object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, ContentAccessView data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[ContentAccessView] ([InstanceID],[ContentTypeID],[ApplicationID],[ServiceID],[ServiceConfigurationEntryID],[ViewName],[LayoutName]) VALUES(@InstanceID,@ContentTypeID,@ApplicationID,@ServiceID,@ServiceConfigurationEntryID,@ViewName,@LayoutName); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@ContentTypeID", data.ContentType.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceConfigurationEntryID", data.ServiceConfigurationEntry == null ? DBNull.Value : (object)data.ServiceConfigurationEntry.ID);
				sqlCmd.Parameters.AddWithValue("@ViewName", data.ViewName).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@LayoutName", !string.IsNullOrEmpty(data.LayoutName) ? (object)data.LayoutName : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "insert", "noprimarykey"), "ContentAccessView could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "ContentAccessView", "Exception while inserting ContentAccessView object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "insert", "exception"), "ContentAccessView could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "ContentAccessView", "Exception while inserting ContentAccessView object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, ContentAccessView data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[ContentAccessView] SET " +
												"[InstanceID] = @InstanceID, " + 
												"[ContentTypeID] = @ContentTypeID, " + 
												"[ApplicationID] = @ApplicationID, " + 
												"[ServiceID] = @ServiceID, " + 
												"[ServiceConfigurationEntryID] = @ServiceConfigurationEntryID, " + 
												"[ViewName] = @ViewName, " + 
												"[LayoutName] = @LayoutName, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ContentAccessViewID] = @ContentAccessViewID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@ContentTypeID", data.ContentType.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceConfigurationEntryID", data.ServiceConfigurationEntry == null ? DBNull.Value : (object)data.ServiceConfigurationEntry.ID);
				sqlCmd.Parameters.AddWithValue("@ViewName", data.ViewName).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@LayoutName", !string.IsNullOrEmpty(data.LayoutName) ? (object)data.LayoutName : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ContentAccessViewID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "update", "norecord"), "ContentAccessView could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ContentAccessView", "Exception while updating ContentAccessView object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "update", "morerecords"), "ContentAccessView was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ContentAccessView", "Exception while updating ContentAccessView object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "update", "exception"), "ContentAccessView could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "ContentAccessView", "Exception while updating ContentAccessView object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, ContentAccessView data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[ContentAccessView] WHERE ContentAccessViewID = @ContentAccessViewID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentAccessViewID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "delete", "norecord"), "ContentAccessView could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "ContentAccessView", "Exception while deleting ContentAccessView object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cav", "delete", "exception"), "ContentAccessView could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "ContentAccessView", "Exception while deleting ContentAccessView object from database. See inner exception for details.", ex);
      }
    }
  }
}

