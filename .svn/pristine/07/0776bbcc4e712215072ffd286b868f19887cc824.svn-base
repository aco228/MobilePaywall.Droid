using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class Html5ContentTable : TableBase<Html5Content>
  {
    public static string GetColumnNames()
    {
      return TableBase<Html5Content>.GetColumnNames(string.Empty, Html5ContentTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Html5Content>.GetColumnNames(tablePrefix, Html5ContentTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription Html5ContentID = new ColumnDescription("Html5ContentID", 0, typeof(int));
			public static readonly ColumnDescription ContentID = new ColumnDescription("ContentID", 1, typeof(int));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 2, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 3, typeof(string));
			public static readonly ColumnDescription Active = new ColumnDescription("Active", 4, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				Html5ContentID,
				ContentID,
				Title,
				Description,
				Active,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public Html5ContentTable(SqlQuery query) : base(query) { }
    public Html5ContentTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int Html5ContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.Html5ContentID)); } }
		public int ContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentID)); } }
		public string Title { get { return this.Reader.GetString(this.GetIndex(Columns.Title)); } }
		
		public string Description 
		{
			get
			{
				int index = this.GetIndex(Columns.Description);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public bool Active { get { return this.Reader.GetBoolean(this.GetIndex(Columns.Active)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Html5Content CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Html5Content(this.Html5ContentID,new Content(this.ContentID), this.Title,this.Description,this.Active,this.Updated,this.Created); 
		}
		public Html5Content CreateInstance(Content content)  
		{ 
			if (!this.HasData) return null;
			return new Html5Content(this.Html5ContentID,content ?? new Content(this.ContentID), this.Title,this.Description,this.Active,this.Updated,this.Created); 
		}
		

  }
}

