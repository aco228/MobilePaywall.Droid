using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

namespace MobilePaywall.Data
{
  public partial interface ITaskManager : IDataManager<Task> 
  {
	

  }

  public partial class Task : MobilePaywallObject<ITaskManager> 
  {
		private TaskType _taskType;
		private TaskStatus _taskStatus;
		private TaskAction _taskAction;
		private Client _creator;
		private Client _resolver;
		private string _data = String.Empty;
		private string _note = String.Empty;
		

		public TaskType TaskType 
		{
			get
			{
				if (this._taskType != null &&
						this._taskType.IsEmpty)
					if (this.ConnectionContext != null)
						this._taskType = TaskType.CreateManager().LazyLoad(this.ConnectionContext, this._taskType.ID) as TaskType;
					else
						this._taskType = TaskType.CreateManager().LazyLoad(this._taskType.ID) as TaskType;
				return this._taskType;
			}
			set { _taskType = value; }
		}

		public TaskStatus TaskStatus  { get { return this._taskStatus; } set { this._taskStatus = value; } }
		public TaskAction TaskAction  { get { return this._taskAction; } set { this._taskAction = value; } }
		public Client Creator 
		{
			get
			{
				if (this._creator != null &&
						this._creator.IsEmpty)
					if (this.ConnectionContext != null)
						this._creator = Client.CreateManager().LazyLoad(this.ConnectionContext, this._creator.ID) as Client;
					else
						this._creator = Client.CreateManager().LazyLoad(this._creator.ID) as Client;
				return this._creator;
			}
			set { _creator = value; }
		}

		public Client Resolver 
		{
			get
			{
				if (this._resolver != null &&
						this._resolver.IsEmpty)
					if (this.ConnectionContext != null)
						this._resolver = Client.CreateManager().LazyLoad(this.ConnectionContext, this._resolver.ID) as Client;
					else
						this._resolver = Client.CreateManager().LazyLoad(this._resolver.ID) as Client;
				return this._resolver;
			}
			set { _resolver = value; }
		}

		public string Data{ get {return this._data; } set { this._data = value;} }
		public string Note{ get {return this._note; } set { this._note = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Task()
    { 
    }

    public Task(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Task(int id,  TaskType taskType, TaskStatus taskStatus, TaskAction taskAction, Client creator, Client resolver, string data, string note, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._taskType = taskType;
			this._taskStatus = taskStatus;
			this._taskAction = taskAction;
			this._creator = creator;
			this._resolver = resolver;
			this._data = data;
			this._note = note;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Task(-1,  this.TaskType, this.TaskStatus, this.TaskAction, this.Creator, this.Resolver,this.Data,this.Note, DateTime.Now, DateTime.Now);
    }
  }
}

