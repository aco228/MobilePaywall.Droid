using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using Senti.Diagnostics.Log;


namespace MobilePaywall.Data.Sql
{
	public partial class VideoContentDataManager : IVideoContentDataManager
	{		
		public VideoContentData Load(VideoContent videoContent)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, videoContent);
		}

		public VideoContentData Load(IConnectionInfo connection, VideoContent videoContent)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, videoContent);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, videoContent);
		}

		public VideoContentData Load(ISqlConnectionInfo connection, VideoContent videoContent)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[vcd].VideoContentID = @VideoContent AND [vcd].IsOriginal = 0";
			parameters.Arguments.Add("VideoContent", videoContent.ID);
			return this.Load(connection, parameters);
		}

		public VideoContentData Load(VideoContent videoContent, string mimeType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, videoContent, mimeType);
		}

		public VideoContentData Load(IConnectionInfo connection, VideoContent videoContent, string mimeType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, videoContent, mimeType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, videoContent, mimeType);
		}

		public VideoContentData Load(ISqlConnectionInfo connection, VideoContent videoContent, string mimeType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[vcd].VideoContentID = @VideoContent AND [vcd].IsOriginal = 0 AND [vcd_vcpe_vc].MimeType = @MimeType";
			parameters.Arguments.Add("VideoContent", videoContent.ID);
			parameters.Arguments.Add("MimeType", mimeType);
			return this.Load(connection, parameters);
		}

		public VideoContentData Load(VideoContent videoContent, VideoCodec videoCodec)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, videoContent, videoCodec);
		}

		public VideoContentData Load(IConnectionInfo connection, VideoContent videoContent, VideoCodec videoCodec)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, videoContent, videoCodec);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, videoContent, videoCodec);
		}

		public VideoContentData Load(ISqlConnectionInfo connection, VideoContent videoContent, VideoCodec videoCodec)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[vcd].VideoContentID = @VideoContent AND [vcd].IsOriginal = 0 AND [vc1].VideoCodecID = @VideoCodecID";
			parameters.Arguments.Add("VideoContent", videoContent.ID);
			parameters.Arguments.Add("VideoCodecID", videoCodec.ID);
			return this.Load(connection, parameters);
		}

		// TODO: Change this again. Probably its better to split up VideoContentData table and store all meta information outside of it. 
		//       Only binary data should be stored in there (and reference to VideoContent)


    public VideoContentData LoadWithoutData(int videoContentDataID)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.LoadWithoutData(connection, videoContentDataID);
    }

    public VideoContentData LoadWithoutData(IConnectionInfo connection, int videoContentDataID)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.LoadWithoutData(sqlConnection, videoContentDataID);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.LoadWithoutData(sqlConnection, videoContentDataID);
    }

    public VideoContentData LoadWithoutData(ISqlConnectionInfo connection, int videoContentDataID)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].VideoContentDataID = @VideoContent";
      parameters.Arguments.Add("VideoContent", videoContentDataID);
      parameters.SetExcludedColumns(new List<ColumnDescription>(new ColumnDescription[] { VideoContentDataTable.Columns.Data }));
      return this.Load(connection, parameters);
    }

		public List<VideoContentData> LoadWithoutData(VideoContent videoContent)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.LoadWithoutData(connection, videoContent);
		}

		public List<VideoContentData> LoadWithoutData(IConnectionInfo connection, VideoContent videoContent)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.LoadWithoutData(sqlConnection, videoContent);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.LoadWithoutData(sqlConnection, videoContent);
		}

		public List<VideoContentData> LoadWithoutData(ISqlConnectionInfo connection, VideoContent videoContent)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[vcd].VideoContentID = @VideoContent AND [vcd].IsOriginal = 0";
			parameters.Arguments.Add("VideoContent", videoContent.ID);
			parameters.SetExcludedColumns(new List<ColumnDescription>(new ColumnDescription[] { VideoContentDataTable.Columns.Data }));
			return this.LoadMany(connection, parameters);
		}


    public List<VideoContentData> Load(VideoContent videoContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, videoContent, conversionProfile, isOriginal);
    }

    public List<VideoContentData> Load(IConnectionInfo connection,  VideoContent videoContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, videoContent, conversionProfile, isOriginal);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, videoContent, conversionProfile, isOriginal);
    }

    public List<VideoContentData> Load(ISqlConnectionInfo connection, VideoContent videoContent, VideoConversionProfile conversionProfile, bool isOriginal)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[vcd].VideoContentID = @VideoContentID AND [vcd_vcpe].VideoConversionProfileID = @VideoConversionProfileID AND [vcd].IsOriginal = @IsOriginal";
      parameters.Arguments.Add("VideoContentID", videoContent.ID);
      parameters.Arguments.Add("VideoConversionProfileID", conversionProfile.ID);
      parameters.Arguments.Add("IsOriginal", isOriginal ? 1 : 0);
      return this.LoadMany(connection, parameters);
    }


		//public List<VideoContentData> LoadManyWithoutData(ISqlConnectionInfo connection, SqlQueryParameters parameters)
		//{
		//	IDatabase database = connection.Database;
		//	if (database == null)
		//		throw new ArgumentNullException("database", "Error initializing database connection.");
		//	if (parameters == null)
		//		throw new ArgumentNullException("parameters");
		//	string sqlCmdText = string.Empty;
		//	try
		//	{
		//		sqlCmdText = "SELECT {0} " +
		//					TableBase<VideoContentData>.GetColumnNames("[vcd]", (from ColumnDescription cd in VideoContentDataTable.Columns.Item where cd.Name != "Data" select cd).ToArray()) +
		//					(this.Depth > 0 ? "," + VideoContentTable.GetColumnNames("[vcd_vc]") : string.Empty) +
		//					(this.Depth > 1 ? "," + ContentTable.GetColumnNames("[vcd_vc_c]") : string.Empty) +
		//					(this.Depth > 0 ? "," + VideoConversionProfileEntryTable.GetColumnNames("[vcd_vcpe]") : string.Empty) +
		//					(this.Depth > 1 ? "," + VideoConversionProfileTable.GetColumnNames("[vcd_vcpe_vcp]") : string.Empty) +
		//					(this.Depth > 1 ? "," + VisualMediaDimensionsTable.GetColumnNames("[vcd_vcpe_vmd]") : string.Empty) +
		//					(this.Depth > 1 ? "," + VideoCodecTable.GetColumnNames("[vcd_vcpe_vc]") : string.Empty) +
		//			" FROM [core].[VideoContentData] AS [vcd] ";
		//		if (this.Depth > 0)
		//			sqlCmdText += "INNER  JOIN [core].[VideoContent] AS [vcd_vc] ON [vcd].[VideoContentID] = [vcd_vc].[VideoContentID] ";
		//		if (this.Depth > 1)
		//			sqlCmdText += "INNER  JOIN [core].[Content] AS [vcd_vc_c] ON [vcd_vc].[ContentID] = [vcd_vc_c].[ContentID] ";
		//		if (this.Depth > 0)
		//			sqlCmdText += "INNER  JOIN [core].[VideoConversionProfileEntry] AS [vcd_vcpe] ON [vcd].[VideoConversionProfileEntryID] = [vcd_vcpe].[VideoConversionProfileEntryID] ";
		//		if (this.Depth > 1)
		//			sqlCmdText += "INNER  JOIN [core].[VideoConversionProfile] AS [vcd_vcpe_vcp] ON [vcd_vcpe].[VideoConversionProfileID] = [vcd_vcpe_vcp].[VideoConversionProfileID] ";
		//		if (this.Depth > 1)
		//			sqlCmdText += "INNER  JOIN [core].[VisualMediaDimensions] AS [vcd_vcpe_vmd] ON [vcd_vcpe].[VisualMediaDimensionsID] = [vcd_vcpe_vmd].[VisualMediaDimensionsID] ";
		//		if (this.Depth > 1)
		//			sqlCmdText += "INNER  JOIN [core].[VideoCodec] AS [vcd_vcpe_vc] ON [vcd_vcpe].[VideoCodecID] = [vcd_vcpe_vc].[VideoCodecID] ";


		//		sqlCmdText = parameters.BuildQuery(sqlCmdText);
		//		SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		//		foreach (KeyValuePair<string, object> argument in parameters.Arguments)
		//			sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

		//		SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

		//		if (!sqlReader.HasRows || !sqlReader.Read())
		//		{
		//			IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("vcd", "customloadmany", "notfound"), "VideoContentData list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
		//			if (this.Logger.IsDebugEnabled)
		//				this.Logger.Debug(builder.ToString());
		//			sqlReader.Close();
		//			return new List<VideoContentData>();
		//		}

		//		SqlQuery query = new SqlQuery(sqlReader);

		//		VideoContentDataTable vcdTable = new VideoContentDataTable(query);
		//		VideoContentTable vcd_vcTable = (this.Depth > 0) ? new VideoContentTable(query) : null;
		//		ContentTable vcd_vc_cTable = (this.Depth > 1) ? new ContentTable(query) : null;
		//		VideoConversionProfileEntryTable vcd_vcpeTable = (this.Depth > 0) ? new VideoConversionProfileEntryTable(query) : null;
		//		VideoConversionProfileTable vcd_vcpe_vcpTable = (this.Depth > 1) ? new VideoConversionProfileTable(query) : null;
		//		VisualMediaDimensionsTable vcd_vcpe_vmdTable = (this.Depth > 1) ? new VisualMediaDimensionsTable(query) : null;
		//		VideoCodecTable vcd_vcpe_vcTable = (this.Depth > 1) ? new VideoCodecTable(query) : null;

		//		List<VideoContentData> result = new List<VideoContentData>();
		//		do
		//		{

		//			Content vcd_vc_cObject = (this.Depth > 1) ? vcd_vc_cTable.CreateInstance() : null;
		//			VideoContent vcd_vcObject = (this.Depth > 0) ? vcd_vcTable.CreateInstance(vcd_vc_cObject) : null;
		//			VideoConversionProfile vcd_vcpe_vcpObject = (this.Depth > 1) ? vcd_vcpe_vcpTable.CreateInstance() : null;
		//			VisualMediaDimensions vcd_vcpe_vmdObject = (this.Depth > 1) ? vcd_vcpe_vmdTable.CreateInstance() : null;
		//			VideoCodec vcd_vcpe_vcObject = (this.Depth > 1) ? vcd_vcpe_vcTable.CreateInstance() : null;
		//			VideoConversionProfileEntry vcd_vcpeObject = (this.Depth > 0) ? vcd_vcpeTable.CreateInstance(vcd_vcpe_vcpObject, vcd_vcpe_vmdObject, vcd_vcpe_vcObject) : null;
		//			VideoContentData vcdObject = (this.Depth > -1) ? vcdTable.CreateInstance(vcd_vcObject, vcd_vcpeObject) : null;
		//			result.Add(vcdObject);

		//		} while (sqlReader.Read());
		//		sqlReader.Close();

		//		return result;
		//	}
		//	catch (Exception ex)
		//	{
		//		database.HandleException(ex);
		//		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("vcd", "customloadmany", "exception"), "VideoContentData list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
		//		if (this.Logger.IsErrorEnabled)
		//			this.Logger.Error(builder.ToString(), ex);
		//		throw new DataOperationException(DataOperation.Load, "VideoContentData", "Exception while loading (custom/many) VideoContentData object from database. See inner exception for details.", ex);
		//	}
		//}

	}
}

