using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IQuizContentServiceConfigurationManager : IDataManager<QuizContentServiceConfiguration> 
  {
	

  }

  public partial class QuizContentServiceConfiguration : MobilePaywallObject<IQuizContentServiceConfigurationManager> 
  {
		private QuizContent _quizContent;
		private Service _service;
		private int _numberOfQuestions = -1;
		private int _timePeriodInDays = -1;
		private bool _isActive = false;
		

		public QuizContent QuizContent 
		{
			get
			{
				if (this._quizContent != null &&
						this._quizContent.IsEmpty)
					if (this.ConnectionContext != null)
						this._quizContent = QuizContent.CreateManager().LazyLoad(this.ConnectionContext, this._quizContent.ID) as QuizContent;
					else
						this._quizContent = QuizContent.CreateManager().LazyLoad(this._quizContent.ID) as QuizContent;
				return this._quizContent;
			}
			set { _quizContent = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public int NumberOfQuestions{ get {return this._numberOfQuestions; } set { this._numberOfQuestions = value;} }
		public int TimePeriodInDays{ get {return this._timePeriodInDays; } set { this._timePeriodInDays = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public QuizContentServiceConfiguration()
    { 
    }

    public QuizContentServiceConfiguration(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public QuizContentServiceConfiguration(int id,  QuizContent quizContent, Service service, int numberOfQuestions, int timePeriodInDays, bool isActive, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._quizContent = quizContent;
			this._service = service;
			this._numberOfQuestions = numberOfQuestions;
			this._timePeriodInDays = timePeriodInDays;
			this._isActive = isActive;
			
    }

    public override object Clone(bool deepClone)
    {
      return new QuizContentServiceConfiguration(-1,  this.QuizContent, this.Service,this.NumberOfQuestions,this.TimePeriodInDays,this.IsActive, DateTime.Now, DateTime.Now);
    }
  }
}

