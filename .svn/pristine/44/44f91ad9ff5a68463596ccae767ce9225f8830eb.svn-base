using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Senti.Localization;

namespace MobilePaywall.Localization
{
  public class ErrorLocalizationGroup : ILocalizationGroup 
  {
    public static readonly ErrorLocalizationGroup Empty = new ErrorLocalizationGroup();

    private MobilePaywallLocalization _localization = null;

    protected bool IsEmpty { get { return this._localization == null; } }
    protected MobilePaywallLocalization Localization { get { return this._localization; } }

    private string _errInternal = null;
		private string _errApplication = null;
		private string _errService = null;
		private string _errCountry = null;
		private string _errSubscriptionNotFound = null;
		private string _errTitle = null;
		private string _errSubscriptionCancelledAlready = null;
		

    public string ErrInternal { get { return this._errInternal ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrInternal : string.Empty); } }
		public string ErrApplication { get { return this._errApplication ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrApplication : string.Empty); } }
		public string ErrService { get { return this._errService ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrService : string.Empty); } }
		public string ErrCountry { get { return this._errCountry ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrCountry : string.Empty); } }
		public string ErrSubscriptionNotFound { get { return this._errSubscriptionNotFound ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrSubscriptionNotFound : string.Empty); } }
		public string ErrTitle { get { return this._errTitle ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrTitle : string.Empty); } }
		public string ErrSubscriptionCancelledAlready { get { return this._errSubscriptionCancelledAlready ?? ((this.Localization.HasFallback && this.Localization.Fallback.Error != null) ? this.Localization.Fallback.Error.ErrSubscriptionCancelledAlready : string.Empty); } }
		

    private ErrorLocalizationGroup()
    {
      this._errInternal = string.Empty;
				this._errApplication = string.Empty;
				this._errService = string.Empty;
				this._errCountry = string.Empty;
				this._errSubscriptionNotFound = string.Empty;
				this._errTitle = string.Empty;
				this._errSubscriptionCancelledAlready = string.Empty;
				
    }

    public ErrorLocalizationGroup(MobilePaywallLocalization localization)
    {
      this._localization = localization;
    }

    public string GetValue(string key)
    {
      switch (key)
      {
        case "ErrInternal":
					return this.ErrInternal;
				case "ErrApplication":
					return this.ErrApplication;
				case "ErrService":
					return this.ErrService;
				case "ErrCountry":
					return this.ErrCountry;
				case "ErrSubscriptionNotFound":
					return this.ErrSubscriptionNotFound;
				case "ErrTitle":
					return this.ErrTitle;
				case "ErrSubscriptionCancelledAlready":
					return this.ErrSubscriptionCancelledAlready;
				
        default:
          return null;
      }
    }

    public bool AssignValue(string key, string value)
    {
      switch (key)
      {
        case "ErrInternal":
					this._errInternal = value;
					return true;
				case "ErrApplication":
					this._errApplication = value;
					return true;
				case "ErrService":
					this._errService = value;
					return true;
				case "ErrCountry":
					this._errCountry = value;
					return true;
				case "ErrSubscriptionNotFound":
					this._errSubscriptionNotFound = value;
					return true;
				case "ErrTitle":
					this._errTitle = value;
					return true;
				case "ErrSubscriptionCancelledAlready":
					this._errSubscriptionCancelledAlready = value;
					return true;
				
        default:
          return false;
      }
    }
  }
}
