using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class LookupSessionResultTable : TableBase<LookupSessionResult>
  {
    public static string GetColumnNames()
    {
      return TableBase<LookupSessionResult>.GetColumnNames(string.Empty, LookupSessionResultTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<LookupSessionResult>.GetColumnNames(tablePrefix, LookupSessionResultTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription LookupSessionResultID = new ColumnDescription("LookupSessionResultID", 0, typeof(int));
			public static readonly ColumnDescription LookupSessionID = new ColumnDescription("LookupSessionID", 1, typeof(int));
			public static readonly ColumnDescription IsSuccessful = new ColumnDescription("IsSuccessful", 2, typeof(bool));
			public static readonly ColumnDescription IsFinalResult = new ColumnDescription("IsFinalResult", 3, typeof(bool));
			public static readonly ColumnDescription IdentificationResultGuid = new ColumnDescription("IdentificationResultGuid", 4, typeof(Guid));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 5, typeof(int));
			public static readonly ColumnDescription Msisdn = new ColumnDescription("Msisdn", 6, typeof(string));
			public static readonly ColumnDescription EncryptedMsisdn = new ColumnDescription("EncryptedMsisdn", 7, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 8, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 9, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				LookupSessionResultID,
				LookupSessionID,
				IsSuccessful,
				IsFinalResult,
				IdentificationResultGuid,
				MobileOperatorID,
				Msisdn,
				EncryptedMsisdn,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public LookupSessionResultTable(SqlQuery query) : base(query) { }
    public LookupSessionResultTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int LookupSessionResultID { get { return this.Reader.GetInt32(this.GetIndex(Columns.LookupSessionResultID)); } }
		public int LookupSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.LookupSessionID)); } }
		public bool IsSuccessful { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsSuccessful)); } }
		public bool IsFinalResult { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsFinalResult)); } }
		
		public Guid? IdentificationResultGuid 
		{
			get
			{
				int index = this.GetIndex(Columns.IdentificationResultGuid);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetGuid(index);
			}
		}

		
		public int? MobileOperatorID 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public string Msisdn 
		{
			get
			{
				int index = this.GetIndex(Columns.Msisdn);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string EncryptedMsisdn 
		{
			get
			{
				int index = this.GetIndex(Columns.EncryptedMsisdn);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public LookupSessionResult CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new LookupSessionResult(this.LookupSessionResultID,new LookupSession(this.LookupSessionID), this.IsSuccessful,this.IsFinalResult,this.IdentificationResultGuid,(MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Msisdn,this.EncryptedMsisdn,this.Updated,this.Created); 
		}
		public LookupSessionResult CreateInstance(LookupSession lookupSession)  
		{ 
			if (!this.HasData) return null;
			return new LookupSessionResult(this.LookupSessionResultID,lookupSession ?? new LookupSession(this.LookupSessionID), this.IsSuccessful,this.IsFinalResult,this.IdentificationResultGuid,(MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Msisdn,this.EncryptedMsisdn,this.Updated,this.Created); 
		}
		public LookupSessionResult CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new LookupSessionResult(this.LookupSessionResultID,new LookupSession(this.LookupSessionID), this.IsSuccessful,this.IsFinalResult,this.IdentificationResultGuid,mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Msisdn,this.EncryptedMsisdn,this.Updated,this.Created); 
		}
		public LookupSessionResult CreateInstance(LookupSession lookupSession, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new LookupSessionResult(this.LookupSessionResultID,lookupSession ?? new LookupSession(this.LookupSessionID), this.IsSuccessful,this.IsFinalResult,this.IdentificationResultGuid,mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Msisdn,this.EncryptedMsisdn,this.Updated,this.Created); 
		}
		

  }
}

