using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ICustomerManager : IDataManager<Customer> 
  {
	

  }

  public partial class Customer : MobilePaywallObject<ICustomerManager> 
  {
		private Guid _guid;
		private CustomerStatus _customerStatus;
		private Service _service;
		private Country _country;
		private MobileOperator _mobileOperator;
		private Guid? _externalCustomerGuid;
		private string _msisdn = String.Empty;
		private string _encryptedMsisdn = String.Empty;
		private string _username = String.Empty;
		private byte[] _encryptedPassword = null;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public CustomerStatus CustomerStatus  { get { return this._customerStatus; } set { this._customerStatus = value; } }
		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public Guid? ExternalCustomerGuid { get { return this._externalCustomerGuid; } set { this._externalCustomerGuid = value;}}
		public string Msisdn{ get {return this._msisdn; } set { this._msisdn = value;} }
		public string EncryptedMsisdn{ get {return this._encryptedMsisdn; } set { this._encryptedMsisdn = value;} }
		public string Username{ get {return this._username; } set { this._username = value;} }
		public byte[] EncryptedPassword { get { return this._encryptedPassword; } set { this._encryptedPassword = value;}  }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Customer()
    { 
    }

    public Customer(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }
		

		public Customer(int id,  Guid guid, CustomerStatus customerStatus, Service service, Country country, MobileOperator mobileOperator, Guid? externalCustomerGuid, string msisdn, string encryptedMsisdn, string username, byte[] encryptedPassword, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._customerStatus = customerStatus;
			this._service = service;
			this._country = country;
			this._mobileOperator = mobileOperator;
			this._externalCustomerGuid = externalCustomerGuid;
			this._msisdn = msisdn;
			this._encryptedMsisdn = encryptedMsisdn;
			this._username = username;
			this._encryptedPassword = encryptedPassword;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Customer(-1, this.Guid, this.CustomerStatus, this.Service, this.Country, this.MobileOperator,this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword, DateTime.Now, DateTime.Now);
    }
  }
}

