using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ICustomPageDataManager : IDataManager<CustomPageData> 
  {
	

  }

  public partial class CustomPageData : MobilePaywallObject<ICustomPageDataManager> 
  {
		private CustomPage _customPage;
		private PaymentProvider _paymentProvider;
		private Service _service;
		private MobileOperator _mobileOperator;
		private bool? _isPlainText = false;
		private bool? _useLayout = false;
		private bool? _usePredefinedDiv = false;
		private string _title = String.Empty;
		private string _data = String.Empty;
		

		public CustomPage CustomPage 
		{
			get
			{
				if (this._customPage != null &&
						this._customPage.IsEmpty)
					if (this.ConnectionContext != null)
						this._customPage = CustomPage.CreateManager().LazyLoad(this.ConnectionContext, this._customPage.ID) as CustomPage;
					else
						this._customPage = CustomPage.CreateManager().LazyLoad(this._customPage.ID) as CustomPage;
				return this._customPage;
			}
			set { _customPage = value; }
		}

		public PaymentProvider PaymentProvider 
		{
			get
			{
				if (this._paymentProvider != null &&
						this._paymentProvider.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this.ConnectionContext, this._paymentProvider.ID) as PaymentProvider;
					else
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this._paymentProvider.ID) as PaymentProvider;
				return this._paymentProvider;
			}
			set { _paymentProvider = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public bool? IsPlainText {get {return this._isPlainText; } set { this._isPlainText = value;} }
		public bool? UseLayout {get {return this._useLayout; } set { this._useLayout = value;} }
		public bool? UsePredefinedDiv {get {return this._usePredefinedDiv; } set { this._usePredefinedDiv = value;} }
		public string Title{ get {return this._title; } set { this._title = value;} }
		public string Data{ get {return this._data; } set { this._data = value;} }
		

    public override bool IsInsertable { get { return true;} }

  //  public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public CustomPageData()
    { 
    }

    public CustomPageData(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public CustomPageData(int id,  CustomPage customPage, PaymentProvider paymentProvider, Service service, MobileOperator mobileOperator, bool? isPlainText, bool? useLayout, bool? usePredefinedDiv, string title, string data, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._customPage = customPage;
			this._paymentProvider = paymentProvider;
			this._service = service;
			this._mobileOperator = mobileOperator;
			this._isPlainText = isPlainText;
			this._useLayout = useLayout;
			this._usePredefinedDiv = usePredefinedDiv;
			this._title = title;
			this._data = data;
			
    }

    public override object Clone(bool deepClone)
    {
      return new CustomPageData(-1,  this.CustomPage, this.PaymentProvider, this.Service, this.MobileOperator,this.IsPlainText,this.UseLayout,this.UsePredefinedDiv,this.Title,this.Data, DateTime.Now, DateTime.Now);
    }
  }
}

