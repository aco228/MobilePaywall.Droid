using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ClientComponentAccessPolicyManager : IClientComponentAccessPolicyManager
  {

    public ClientComponentAccessPolicy Load(Client client, Component component)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, client, component);
    }

    public ClientComponentAccessPolicy Load(IConnectionInfo connection, Client client, Component component)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, client, component);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, client, component);
    }

    public ClientComponentAccessPolicy Load(ISqlConnectionInfo connection, Client client, Component component)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[ccap].ClientID = @ClientID AND [ccap].ComponentID = @ComponentID";
      parameters.Arguments.Add("ClientID", client.ID);
      parameters.Arguments.Add("ComponentID", component.ID);
      return this.Load(connection, parameters);
    }

    public List<ClientComponentAccessPolicy> Load(Client client)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, client);
    }

    public List<ClientComponentAccessPolicy> Load(IConnectionInfo connection, Client client)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, client);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, client);
    }

    public List<ClientComponentAccessPolicy> Load(ISqlConnectionInfo connection, Client client)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[ccap].ClientID = @ClientID";
      parameters.Arguments.Add("ClientID", client.ID);
      return this.LoadMany(connection, parameters);
    }
    
    public List<ClientComponentAccessPolicy> Load()
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection );
    }

    public List<ClientComponentAccessPolicy> Load(IConnectionInfo connection )
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection );
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection );
    }

    public List<ClientComponentAccessPolicy> Load(ISqlConnectionInfo connection )
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      return this.LoadMany(connection, parameters);
    }


  }
}

