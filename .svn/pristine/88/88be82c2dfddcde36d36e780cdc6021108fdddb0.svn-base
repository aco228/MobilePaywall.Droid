using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(ClientAccessPolicy))] 
  public partial class ClientAccessPolicyManager : MobilePaywall.Data.Sql.SqlManagerBase<ClientAccessPolicy>, IClientAccessPolicyManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override ClientAccessPolicy LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ClientAccessPolicyTable.GetColumnNames("[cap]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[cap_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[cap_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cap_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cap_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cap_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[cap_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_m_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ProductTable.GetColumnNames("[cap_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_p_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cap_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cap_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cap_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cap_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cap_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cap_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cap_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cap_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cap_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[cap_s_t]") : string.Empty) + 
					" FROM [core].[ClientAccessPolicy] AS [cap] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [cap_c] ON [cap].[ClientID] = [cap_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [cap_c_ct] ON [cap_c].[ClientTypeID] = [cap_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_i] ON [cap].[InstanceID] = [cap_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_a] ON [cap].[ApplicationID] = [cap_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_a_i] ON [cap_a].[InstanceID] = [cap_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cap_a_rt] ON [cap_a].[RuntimeTypeID] = [cap_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_m] ON [cap].[MerchantID] = [cap_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_m_i] ON [cap_m].[InstanceID] = [cap_m_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_p] ON [cap].[ProductID] = [cap_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_p_i] ON [cap_p].[InstanceID] = [cap_p_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cap_s] ON [cap].[ServiceID] = [cap_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_s_a] ON [cap_s].[ApplicationID] = [cap_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_s_p] ON [cap_s].[ProductID] = [cap_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_s_m] ON [cap_s].[MerchantID] = [cap_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cap_s_st] ON [cap_s].[ServiceTypeID] = [cap_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cap_s_ust] ON [cap_s].[UserSessionTypeID] = [cap_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cap_s_c] ON [cap_s].[FallbackCountryID] = [cap_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cap_s_sc] ON [cap_s].[ServiceConfigurationID] = [cap_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cap_s_bm] ON [cap_s].[BusinessModelID] = [cap_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [cap_s_t] ON [cap_s].[TemplateID] = [cap_s_t].[TemplateID] ";
				sqlCmdText += "WHERE [cap].[ClientAccessPolicyID] = @ClientAccessPolicyID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ClientAccessPolicyID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "loadinternal", "notfound"), "ClientAccessPolicy could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ClientAccessPolicyTable capTable = new ClientAccessPolicyTable(query);
				ClientTable cap_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable cap_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				InstanceTable cap_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ApplicationTable cap_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cap_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cap_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				MerchantTable cap_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable cap_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ProductTable cap_pTable = (this.Depth > 0) ? new ProductTable(query) : null;
				InstanceTable cap_p_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ServiceTable cap_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cap_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cap_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cap_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cap_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cap_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cap_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cap_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cap_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable cap_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				ClientType cap_c_ctObject = (this.Depth > 1) ? cap_c_ctTable.CreateInstance() : null;
				Client cap_cObject = (this.Depth > 0) ? cap_cTable.CreateInstance(cap_c_ctObject) : null;
				Instance cap_iObject = (this.Depth > 0) ? cap_iTable.CreateInstance() : null;
				Instance cap_a_iObject = (this.Depth > 1) ? cap_a_iTable.CreateInstance() : null;
				RuntimeType cap_a_rtObject = (this.Depth > 1) ? cap_a_rtTable.CreateInstance() : null;
				Application cap_aObject = (this.Depth > 0) ? cap_aTable.CreateInstance(cap_a_iObject, cap_a_rtObject) : null;
				Instance cap_m_iObject = (this.Depth > 1) ? cap_m_iTable.CreateInstance() : null;
				Merchant cap_mObject = (this.Depth > 0) ? cap_mTable.CreateInstance(cap_m_iObject) : null;
				Instance cap_p_iObject = (this.Depth > 1) ? cap_p_iTable.CreateInstance() : null;
				Product cap_pObject = (this.Depth > 0) ? cap_pTable.CreateInstance(cap_p_iObject) : null;
				Application cap_s_aObject = (this.Depth > 1) ? cap_s_aTable.CreateInstance() : null;
				Product cap_s_pObject = (this.Depth > 1) ? cap_s_pTable.CreateInstance() : null;
				Merchant cap_s_mObject = (this.Depth > 1) ? cap_s_mTable.CreateInstance() : null;
				ServiceType cap_s_stObject = (this.Depth > 1) ? cap_s_stTable.CreateInstance() : null;
				UserSessionType cap_s_ustObject = (this.Depth > 1) ? cap_s_ustTable.CreateInstance() : null;
				Country cap_s_cObject = (this.Depth > 1) ? cap_s_cTable.CreateInstance() : null;
				ServiceConfiguration cap_s_scObject = (this.Depth > 1) ? cap_s_scTable.CreateInstance() : null;
				BusinessModel cap_s_bmObject = (this.Depth > 1) ? cap_s_bmTable.CreateInstance() : null;
				Template cap_s_tObject = (this.Depth > 1) ? cap_s_tTable.CreateInstance() : null;
				Service cap_sObject = (this.Depth > 0) ? cap_sTable.CreateInstance(cap_s_aObject, cap_s_pObject, cap_s_mObject, cap_s_stObject, cap_s_ustObject, cap_s_cObject, cap_s_scObject, cap_s_bmObject, cap_s_tObject) : null;
				ClientAccessPolicy capObject = capTable.CreateInstance(cap_cObject, cap_iObject, cap_aObject, cap_mObject, cap_pObject, cap_sObject);
				sqlReader.Close();

				return capObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "loadinternal", "exception"), "ClientAccessPolicy could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ClientAccessPolicy", "Exception while loading ClientAccessPolicy object from database. See inner exception for details.", ex);
      }
    }

    public ClientAccessPolicy Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ClientAccessPolicyTable.GetColumnNames("[cap]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[cap_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[cap_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cap_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cap_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cap_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[cap_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_m_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ProductTable.GetColumnNames("[cap_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_p_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cap_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cap_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cap_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cap_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cap_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cap_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cap_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cap_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cap_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[cap_s_t]") : string.Empty) +  
					" FROM [core].[ClientAccessPolicy] AS [cap] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [cap_c] ON [cap].[ClientID] = [cap_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [cap_c_ct] ON [cap_c].[ClientTypeID] = [cap_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_i] ON [cap].[InstanceID] = [cap_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_a] ON [cap].[ApplicationID] = [cap_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_a_i] ON [cap_a].[InstanceID] = [cap_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cap_a_rt] ON [cap_a].[RuntimeTypeID] = [cap_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_m] ON [cap].[MerchantID] = [cap_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_m_i] ON [cap_m].[InstanceID] = [cap_m_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_p] ON [cap].[ProductID] = [cap_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_p_i] ON [cap_p].[InstanceID] = [cap_p_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cap_s] ON [cap].[ServiceID] = [cap_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_s_a] ON [cap_s].[ApplicationID] = [cap_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_s_p] ON [cap_s].[ProductID] = [cap_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_s_m] ON [cap_s].[MerchantID] = [cap_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cap_s_st] ON [cap_s].[ServiceTypeID] = [cap_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cap_s_ust] ON [cap_s].[UserSessionTypeID] = [cap_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cap_s_c] ON [cap_s].[FallbackCountryID] = [cap_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cap_s_sc] ON [cap_s].[ServiceConfigurationID] = [cap_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cap_s_bm] ON [cap_s].[BusinessModelID] = [cap_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [cap_s_t] ON [cap_s].[TemplateID] = [cap_s_t].[TemplateID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "customload", "notfound"), "ClientAccessPolicy could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ClientAccessPolicyTable capTable = new ClientAccessPolicyTable(query);
				ClientTable cap_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable cap_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				InstanceTable cap_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ApplicationTable cap_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cap_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cap_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				MerchantTable cap_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable cap_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ProductTable cap_pTable = (this.Depth > 0) ? new ProductTable(query) : null;
				InstanceTable cap_p_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ServiceTable cap_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cap_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cap_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cap_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cap_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cap_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cap_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cap_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cap_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable cap_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        
				ClientType cap_c_ctObject = (this.Depth > 1) ? cap_c_ctTable.CreateInstance() : null;
				Client cap_cObject = (this.Depth > 0) ? cap_cTable.CreateInstance(cap_c_ctObject) : null;
				Instance cap_iObject = (this.Depth > 0) ? cap_iTable.CreateInstance() : null;
				Instance cap_a_iObject = (this.Depth > 1) ? cap_a_iTable.CreateInstance() : null;
				RuntimeType cap_a_rtObject = (this.Depth > 1) ? cap_a_rtTable.CreateInstance() : null;
				Application cap_aObject = (this.Depth > 0) ? cap_aTable.CreateInstance(cap_a_iObject, cap_a_rtObject) : null;
				Instance cap_m_iObject = (this.Depth > 1) ? cap_m_iTable.CreateInstance() : null;
				Merchant cap_mObject = (this.Depth > 0) ? cap_mTable.CreateInstance(cap_m_iObject) : null;
				Instance cap_p_iObject = (this.Depth > 1) ? cap_p_iTable.CreateInstance() : null;
				Product cap_pObject = (this.Depth > 0) ? cap_pTable.CreateInstance(cap_p_iObject) : null;
				Application cap_s_aObject = (this.Depth > 1) ? cap_s_aTable.CreateInstance() : null;
				Product cap_s_pObject = (this.Depth > 1) ? cap_s_pTable.CreateInstance() : null;
				Merchant cap_s_mObject = (this.Depth > 1) ? cap_s_mTable.CreateInstance() : null;
				ServiceType cap_s_stObject = (this.Depth > 1) ? cap_s_stTable.CreateInstance() : null;
				UserSessionType cap_s_ustObject = (this.Depth > 1) ? cap_s_ustTable.CreateInstance() : null;
				Country cap_s_cObject = (this.Depth > 1) ? cap_s_cTable.CreateInstance() : null;
				ServiceConfiguration cap_s_scObject = (this.Depth > 1) ? cap_s_scTable.CreateInstance() : null;
				BusinessModel cap_s_bmObject = (this.Depth > 1) ? cap_s_bmTable.CreateInstance() : null;
				Template cap_s_tObject = (this.Depth > 1) ? cap_s_tTable.CreateInstance() : null;
				Service cap_sObject = (this.Depth > 0) ? cap_sTable.CreateInstance(cap_s_aObject, cap_s_pObject, cap_s_mObject, cap_s_stObject, cap_s_ustObject, cap_s_cObject, cap_s_scObject, cap_s_bmObject, cap_s_tObject) : null;
				ClientAccessPolicy capObject = capTable.CreateInstance(cap_cObject, cap_iObject, cap_aObject, cap_mObject, cap_pObject, cap_sObject);
				sqlReader.Close();

				return capObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "customload", "exception"), "ClientAccessPolicy could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ClientAccessPolicy", "Exception while loading (custom/single) ClientAccessPolicy object from database. See inner exception for details.", ex);
      }
    }

    public List<ClientAccessPolicy> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ClientAccessPolicyTable.GetColumnNames("[cap]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[cap_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[cap_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[cap_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[cap_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[cap_a_rt]") : string.Empty) + 
							(this.Depth > 0 ? "," + MerchantTable.GetColumnNames("[cap_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_m_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ProductTable.GetColumnNames("[cap_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[cap_p_i]") : string.Empty) + 
							(this.Depth > 0 ? "," + ServiceTable.GetColumnNames("[cap_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + ApplicationTable.GetColumnNames("[cap_s_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + ProductTable.GetColumnNames("[cap_s_p]") : string.Empty) + 
							(this.Depth > 1 ? "," + MerchantTable.GetColumnNames("[cap_s_m]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTypeTable.GetColumnNames("[cap_s_st]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTypeTable.GetColumnNames("[cap_s_ust]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[cap_s_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceConfigurationTable.GetColumnNames("[cap_s_sc]") : string.Empty) + 
							(this.Depth > 1 ? "," + BusinessModelTable.GetColumnNames("[cap_s_bm]") : string.Empty) + 
							(this.Depth > 1 ? "," + TemplateTable.GetColumnNames("[cap_s_t]") : string.Empty) +  
					" FROM [core].[ClientAccessPolicy] AS [cap] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [cap_c] ON [cap].[ClientID] = [cap_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [cap_c_ct] ON [cap_c].[ClientTypeID] = [cap_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_i] ON [cap].[InstanceID] = [cap_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_a] ON [cap].[ApplicationID] = [cap_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_a_i] ON [cap_a].[InstanceID] = [cap_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RuntimeType] AS [cap_a_rt] ON [cap_a].[RuntimeTypeID] = [cap_a_rt].[RuntimeTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_m] ON [cap].[MerchantID] = [cap_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_m_i] ON [cap_m].[InstanceID] = [cap_m_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_p] ON [cap].[ProductID] = [cap_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Instance] AS [cap_p_i] ON [cap_p].[InstanceID] = [cap_p_i].[InstanceID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Service] AS [cap_s] ON [cap].[ServiceID] = [cap_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Application] AS [cap_s_a] ON [cap_s].[ApplicationID] = [cap_s_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Product] AS [cap_s_p] ON [cap_s].[ProductID] = [cap_s_p].[ProductID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Merchant] AS [cap_s_m] ON [cap_s].[MerchantID] = [cap_s_m].[MerchantID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceType] AS [cap_s_st] ON [cap_s].[ServiceTypeID] = [cap_s_st].[ServiceTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[UserSessionType] AS [cap_s_ust] ON [cap_s].[UserSessionTypeID] = [cap_s_ust].[UserSessionTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Country] AS [cap_s_c] ON [cap_s].[FallbackCountryID] = [cap_s_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[ServiceConfiguration] AS [cap_s_sc] ON [cap_s].[ServiceConfigurationID] = [cap_s_sc].[ServiceConfigurationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[BusinessModel] AS [cap_s_bm] ON [cap_s].[BusinessModelID] = [cap_s_bm].[BusinessModelID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Template] AS [cap_s_t] ON [cap_s].[TemplateID] = [cap_s_t].[TemplateID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "customloadmany", "notfound"), "ClientAccessPolicy list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<ClientAccessPolicy>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ClientAccessPolicyTable capTable = new ClientAccessPolicyTable(query);
				ClientTable cap_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable cap_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				InstanceTable cap_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
				ApplicationTable cap_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable cap_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable cap_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;
				MerchantTable cap_mTable = (this.Depth > 0) ? new MerchantTable(query) : null;
				InstanceTable cap_m_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ProductTable cap_pTable = (this.Depth > 0) ? new ProductTable(query) : null;
				InstanceTable cap_p_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				ServiceTable cap_sTable = (this.Depth > 0) ? new ServiceTable(query) : null;
				ApplicationTable cap_s_aTable = (this.Depth > 1) ? new ApplicationTable(query) : null;
				ProductTable cap_s_pTable = (this.Depth > 1) ? new ProductTable(query) : null;
				MerchantTable cap_s_mTable = (this.Depth > 1) ? new MerchantTable(query) : null;
				ServiceTypeTable cap_s_stTable = (this.Depth > 1) ? new ServiceTypeTable(query) : null;
				UserSessionTypeTable cap_s_ustTable = (this.Depth > 1) ? new UserSessionTypeTable(query) : null;
				CountryTable cap_s_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				ServiceConfigurationTable cap_s_scTable = (this.Depth > 1) ? new ServiceConfigurationTable(query) : null;
				BusinessModelTable cap_s_bmTable = (this.Depth > 1) ? new BusinessModelTable(query) : null;
				TemplateTable cap_s_tTable = (this.Depth > 1) ? new TemplateTable(query) : null;

        List<ClientAccessPolicy> result = new List<ClientAccessPolicy>();
        do
        {
          
					ClientType cap_c_ctObject = (this.Depth > 1) ? cap_c_ctTable.CreateInstance() : null;
					Client cap_cObject = (this.Depth > 0) ? cap_cTable.CreateInstance(cap_c_ctObject) : null;
					Instance cap_iObject = (this.Depth > 0) ? cap_iTable.CreateInstance() : null;
					Instance cap_a_iObject = (this.Depth > 1) ? cap_a_iTable.CreateInstance() : null;
					RuntimeType cap_a_rtObject = (this.Depth > 1) ? cap_a_rtTable.CreateInstance() : null;
					Application cap_aObject = (this.Depth > 0) ? cap_aTable.CreateInstance(cap_a_iObject, cap_a_rtObject) : null;
					Instance cap_m_iObject = (this.Depth > 1) ? cap_m_iTable.CreateInstance() : null;
					Merchant cap_mObject = (this.Depth > 0) ? cap_mTable.CreateInstance(cap_m_iObject) : null;
					Instance cap_p_iObject = (this.Depth > 1) ? cap_p_iTable.CreateInstance() : null;
					Product cap_pObject = (this.Depth > 0) ? cap_pTable.CreateInstance(cap_p_iObject) : null;
					Application cap_s_aObject = (this.Depth > 1) ? cap_s_aTable.CreateInstance() : null;
					Product cap_s_pObject = (this.Depth > 1) ? cap_s_pTable.CreateInstance() : null;
					Merchant cap_s_mObject = (this.Depth > 1) ? cap_s_mTable.CreateInstance() : null;
					ServiceType cap_s_stObject = (this.Depth > 1) ? cap_s_stTable.CreateInstance() : null;
					UserSessionType cap_s_ustObject = (this.Depth > 1) ? cap_s_ustTable.CreateInstance() : null;
					Country cap_s_cObject = (this.Depth > 1) ? cap_s_cTable.CreateInstance() : null;
					ServiceConfiguration cap_s_scObject = (this.Depth > 1) ? cap_s_scTable.CreateInstance() : null;
					BusinessModel cap_s_bmObject = (this.Depth > 1) ? cap_s_bmTable.CreateInstance() : null;
					Template cap_s_tObject = (this.Depth > 1) ? cap_s_tTable.CreateInstance() : null;
					Service cap_sObject = (this.Depth > 0) ? cap_sTable.CreateInstance(cap_s_aObject, cap_s_pObject, cap_s_mObject, cap_s_stObject, cap_s_ustObject, cap_s_cObject, cap_s_scObject, cap_s_bmObject, cap_s_tObject) : null;
					ClientAccessPolicy capObject = (this.Depth > -1) ? capTable.CreateInstance(cap_cObject, cap_iObject, cap_aObject, cap_mObject, cap_pObject, cap_sObject) : null;
					result.Add(capObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "customloadmany", "exception"), "ClientAccessPolicy list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ClientAccessPolicy", "Exception while loading (custom/many) ClientAccessPolicy object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, ClientAccessPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[ClientAccessPolicy] ([ClientID],[InstanceID],[ApplicationID],[MerchantID],[ProductID],[ServiceID],[AccessModeID]) VALUES(@ClientID,@InstanceID,@ApplicationID,@MerchantID,@ProductID,@ServiceID,@AccessModeID); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance == null ? DBNull.Value : (object)data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@MerchantID", data.Merchant == null ? DBNull.Value : (object)data.Merchant.ID);
				sqlCmd.Parameters.AddWithValue("@ProductID", data.Product == null ? DBNull.Value : (object)data.Product.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@AccessModeID", (int)data.AccessMode);
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "insert", "noprimarykey"), "ClientAccessPolicy could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "ClientAccessPolicy", "Exception while inserting ClientAccessPolicy object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "insert", "exception"), "ClientAccessPolicy could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "ClientAccessPolicy", "Exception while inserting ClientAccessPolicy object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, ClientAccessPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[ClientAccessPolicy] SET " +
												"[ClientID] = @ClientID, " + 
												"[InstanceID] = @InstanceID, " + 
												"[ApplicationID] = @ApplicationID, " + 
												"[MerchantID] = @MerchantID, " + 
												"[ProductID] = @ProductID, " + 
												"[ServiceID] = @ServiceID, " + 
												"[AccessModeID] = @AccessModeID, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ClientAccessPolicyID] = @ClientAccessPolicyID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance == null ? DBNull.Value : (object)data.Instance.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application == null ? DBNull.Value : (object)data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@MerchantID", data.Merchant == null ? DBNull.Value : (object)data.Merchant.ID);
				sqlCmd.Parameters.AddWithValue("@ProductID", data.Product == null ? DBNull.Value : (object)data.Product.ID);
				sqlCmd.Parameters.AddWithValue("@ServiceID", data.Service == null ? DBNull.Value : (object)data.Service.ID);
				sqlCmd.Parameters.AddWithValue("@AccessModeID", (int)data.AccessMode);
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ClientAccessPolicyID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "update", "norecord"), "ClientAccessPolicy could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ClientAccessPolicy", "Exception while updating ClientAccessPolicy object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "update", "morerecords"), "ClientAccessPolicy was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ClientAccessPolicy", "Exception while updating ClientAccessPolicy object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "update", "exception"), "ClientAccessPolicy could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "ClientAccessPolicy", "Exception while updating ClientAccessPolicy object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, ClientAccessPolicy data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[ClientAccessPolicy] WHERE ClientAccessPolicyID = @ClientAccessPolicyID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ClientAccessPolicyID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "delete", "norecord"), "ClientAccessPolicy could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "ClientAccessPolicy", "Exception while deleting ClientAccessPolicy object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cap", "delete", "exception"), "ClientAccessPolicy could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "ClientAccessPolicy", "Exception while deleting ClientAccessPolicy object from database. See inner exception for details.", ex);
      }
    }
  }
}

