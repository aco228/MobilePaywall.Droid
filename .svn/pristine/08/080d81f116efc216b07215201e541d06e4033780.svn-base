using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentAccessViewManager : IDataManager<ContentAccessView> 
  {
	

  }

  public partial class ContentAccessView : MobilePaywallObject<IContentAccessViewManager> 
  {
		private Instance _instance;
		private ContentType _contentType;
		private Application _application;
		private Service _service;
		private ServiceConfigurationEntry _serviceConfigurationEntry;
		private string _viewName = String.Empty;
		private string _layoutName = String.Empty;
		

		public Instance Instance 
		{
			get
			{
				if (this._instance != null &&
						this._instance.IsEmpty)
					if (this.ConnectionContext != null)
						this._instance = Instance.CreateManager().LazyLoad(this.ConnectionContext, this._instance.ID) as Instance;
					else
						this._instance = Instance.CreateManager().LazyLoad(this._instance.ID) as Instance;
				return this._instance;
			}
			set { _instance = value; }
		}

		public ContentType ContentType 
		{
			get
			{
				if (this._contentType != null &&
						this._contentType.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentType = ContentType.CreateManager().LazyLoad(this.ConnectionContext, this._contentType.ID) as ContentType;
					else
						this._contentType = ContentType.CreateManager().LazyLoad(this._contentType.ID) as ContentType;
				return this._contentType;
			}
			set { _contentType = value; }
		}

		public Application Application 
		{
			get
			{
				if (this._application != null &&
						this._application.IsEmpty)
					if (this.ConnectionContext != null)
						this._application = Application.CreateManager().LazyLoad(this.ConnectionContext, this._application.ID) as Application;
					else
						this._application = Application.CreateManager().LazyLoad(this._application.ID) as Application;
				return this._application;
			}
			set { _application = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public ServiceConfigurationEntry ServiceConfigurationEntry 
		{
			get
			{
				if (this._serviceConfigurationEntry != null &&
						this._serviceConfigurationEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceConfigurationEntry = ServiceConfigurationEntry.CreateManager().LazyLoad(this.ConnectionContext, this._serviceConfigurationEntry.ID) as ServiceConfigurationEntry;
					else
						this._serviceConfigurationEntry = ServiceConfigurationEntry.CreateManager().LazyLoad(this._serviceConfigurationEntry.ID) as ServiceConfigurationEntry;
				return this._serviceConfigurationEntry;
			}
			set { _serviceConfigurationEntry = value; }
		}

		public string ViewName{ get {return this._viewName; } set { this._viewName = value;} }
		public string LayoutName{ get {return this._layoutName; } set { this._layoutName = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentAccessView()
    { 
    }

    public ContentAccessView(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentAccessView(int id,  Instance instance, ContentType contentType, Application application, Service service, ServiceConfigurationEntry serviceConfigurationEntry, string viewName, string layoutName, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._instance = instance;
			this._contentType = contentType;
			this._application = application;
			this._service = service;
			this._serviceConfigurationEntry = serviceConfigurationEntry;
			this._viewName = viewName;
			this._layoutName = layoutName;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentAccessView(-1,  this.Instance, this.ContentType, this.Application, this.Service, this.ServiceConfigurationEntry,this.ViewName,this.LayoutName, DateTime.Now, DateTime.Now);
    }
  }
}

