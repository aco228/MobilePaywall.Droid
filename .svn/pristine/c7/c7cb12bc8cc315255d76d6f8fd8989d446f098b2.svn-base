using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;


namespace MobilePaywall.Data.Sql
{
  public partial class ApplicationContentDetailManager : IApplicationContentDetailManager
  {
    public ApplicationContentDetail Load(ApplicationContent applicationContent, Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, applicationContent, service, language);
    }

    public ApplicationContentDetail Load(IConnectionInfo connection, ApplicationContent applicationContent, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, applicationContent, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, applicationContent, service, language);
    }

    public ApplicationContentDetail Load(ISqlConnectionInfo connection, ApplicationContent applicationContent, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].ApplicationContentID=@ApplicationContentID AND ([acd].ServiceID=@ServiceID OR [acd].ServiceID IS NULL) AND ([acd].LanguageID=@LanguageID OR [acd].LanguageID IS NULL)";
      parameters.Arguments.Add("ApplicationContentID", applicationContent.ID);
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.Load(connection, parameters);
    }

    public T Load<T>(ApplicationContent applicationContent, Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load<T>(connection, applicationContent, service, language);
    }

    public T Load<T>(IConnectionInfo connection, ApplicationContent applicationContent, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load<T>(sqlConnection, applicationContent, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load<T>(sqlConnection, applicationContent, service, language);
    }

    public T Load<T>(ISqlConnectionInfo connection, ApplicationContent applicationContent, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd_ac].ApplicationContentID = @ApplicationContentID AND ([acd_s].ServiceID = @ServiceID OR [acd_s].ServiceID IS NULL) AND ([acd_l].LanguageID = @LanguageID OR [acd_l].LanguageID IS NULL)";
      parameters.Arguments.Add("ApplicationContentID", applicationContent.ID);
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      if (typeof(T).Equals(typeof(List<VideoContentDetail>)))
        return (T)Convert.ChangeType(this.LoadMany(connection, parameters), typeof(T));
      else
        return (T)Convert.ChangeType(this.Load(connection, parameters), typeof(T));
    }


    public ApplicationContentDetail Load(ApplicationContent applicationContent, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, applicationContent, language);
    }

    public ApplicationContentDetail Load(IConnectionInfo connection, ApplicationContent applicationContent, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, applicationContent, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, applicationContent, language);
    }

    public ApplicationContentDetail Load(ISqlConnectionInfo connection, ApplicationContent applicationContent, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].ApplicationContentID = @ApplicationContentID AND [acd].LanguageID = @LanguageID";
      parameters.Arguments.Add("ApplicationContentID", applicationContent.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.Load(connection, parameters);
    }

    public List<ApplicationContentDetail> Load(ApplicationContent applicationContent)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, applicationContent);
    }

    public List<ApplicationContentDetail> Load(IConnectionInfo connection, ApplicationContent applicationContent)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, applicationContent);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, applicationContent);
    }

    public List<ApplicationContentDetail> Load(ISqlConnectionInfo connection, ApplicationContent applicationContent)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[acd].ApplicationContentID = @ApplicationContentID";
      parameters.Arguments.Add("ApplicationContentID", applicationContent.ID);
      return this.LoadMany(connection, parameters);
    }
  }
}

