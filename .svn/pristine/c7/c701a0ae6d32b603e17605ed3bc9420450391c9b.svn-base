using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ContentThumbnailDataTable : TableBase<ContentThumbnailData>
  {
    public static string GetColumnNames()
    {
      return TableBase<ContentThumbnailData>.GetColumnNames(string.Empty, ContentThumbnailDataTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ContentThumbnailData>.GetColumnNames(tablePrefix, ContentThumbnailDataTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ContentThumbnailDataID = new ColumnDescription("ContentThumbnailDataID", 0, typeof(int));
			public static readonly ColumnDescription ContentThumbnailID = new ColumnDescription("ContentThumbnailID", 1, typeof(int));
			public static readonly ColumnDescription ThumbnailConversionProfileEntryID = new ColumnDescription("ThumbnailConversionProfileEntryID", 2, typeof(int));
			public static readonly ColumnDescription IsOriginal = new ColumnDescription("IsOriginal", 3, typeof(bool));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 4, typeof(byte[]));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ContentThumbnailDataID,
				ContentThumbnailID,
				ThumbnailConversionProfileEntryID,
				IsOriginal,
				Data,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ContentThumbnailDataTable(SqlQuery query) : base(query) { }
    public ContentThumbnailDataTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ContentThumbnailDataID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentThumbnailDataID)); } }
		public int ContentThumbnailID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentThumbnailID)); } }
		public int ThumbnailConversionProfileEntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ThumbnailConversionProfileEntryID)); } }
		public bool IsOriginal { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsOriginal)); } }
		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ContentThumbnailData CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ContentThumbnailData(this.ContentThumbnailDataID,new ContentThumbnail(this.ContentThumbnailID), new ThumbnailConversionProfileEntry(this.ThumbnailConversionProfileEntryID), this.IsOriginal,this.Data,this.Updated,this.Created); 
		}
		public ContentThumbnailData CreateInstance(ContentThumbnail contentThumbnail)  
		{ 
			if (!this.HasData) return null;
			return new ContentThumbnailData(this.ContentThumbnailDataID,contentThumbnail ?? new ContentThumbnail(this.ContentThumbnailID), new ThumbnailConversionProfileEntry(this.ThumbnailConversionProfileEntryID), this.IsOriginal,this.Data,this.Updated,this.Created); 
		}
		public ContentThumbnailData CreateInstance(ThumbnailConversionProfileEntry thumbnailConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new ContentThumbnailData(this.ContentThumbnailDataID,new ContentThumbnail(this.ContentThumbnailID), thumbnailConversionProfileEntry ?? new ThumbnailConversionProfileEntry(this.ThumbnailConversionProfileEntryID), this.IsOriginal,this.Data,this.Updated,this.Created); 
		}
		public ContentThumbnailData CreateInstance(ContentThumbnail contentThumbnail, ThumbnailConversionProfileEntry thumbnailConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new ContentThumbnailData(this.ContentThumbnailDataID,contentThumbnail ?? new ContentThumbnail(this.ContentThumbnailID), thumbnailConversionProfileEntry ?? new ThumbnailConversionProfileEntry(this.ThumbnailConversionProfileEntryID), this.IsOriginal,this.Data,this.Updated,this.Created); 
		}
		

  }
}

