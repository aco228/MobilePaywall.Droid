using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(ShortMessage))] 
  public partial class ShortMessageManager : MobilePaywall.Data.Sql.SqlManagerBase<ShortMessage>, IShortMessageManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override ShortMessage LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ShortMessageTable.GetColumnNames("[sm]") + 
							(this.Depth > 0 ? "," + ShortMessageProviderTable.GetColumnNames("[sm_smp]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderTypeTable.GetColumnNames("[sm_smp_smpt]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderConfigurationTable.GetColumnNames("[sm_smp_smpc]") : string.Empty) + 
							(this.Depth > 0 ? "," + CustomerTable.GetColumnNames("[sm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[sm_c_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[sm_c_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[sm_c_mo]") : string.Empty) + 
					" FROM [core].[ShortMessage] AS [sm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProvider] AS [sm_smp] ON [sm].[ShortMessageProviderID] = [sm_smp].[ShortMessageProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderType] AS [sm_smp_smpt] ON [sm_smp].[ShortMessageProviderTypeID] = [sm_smp_smpt].[ShortMessageProviderTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderConfiguration] AS [sm_smp_smpc] ON [sm_smp].[ShortMessageProviderConfigurationID] = [sm_smp_smpc].[ShortMessageProviderConfigurationID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Customer] AS [sm_c] ON [sm].[CustomerID] = [sm_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [sm_c_s] ON [sm_c].[ServiceID] = [sm_c_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [sm_c_c] ON [sm_c].[CountryID] = [sm_c_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [sm_c_mo] ON [sm_c].[MobileOperatorID] = [sm_c_mo].[MobileOperatorID] ";
				sqlCmdText += "WHERE [sm].[ShortMessageID] = @ShortMessageID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ShortMessageID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "loadinternal", "notfound"), "ShortMessage could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ShortMessageTable smTable = new ShortMessageTable(query);
				ShortMessageProviderTable sm_smpTable = (this.Depth > 0) ? new ShortMessageProviderTable(query) : null;
				ShortMessageProviderTypeTable sm_smp_smptTable = (this.Depth > 1) ? new ShortMessageProviderTypeTable(query) : null;
				ShortMessageProviderConfigurationTable sm_smp_smpcTable = (this.Depth > 1) ? new ShortMessageProviderConfigurationTable(query) : null;
				CustomerTable sm_cTable = (this.Depth > 0) ? new CustomerTable(query) : null;
				ServiceTable sm_c_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				CountryTable sm_c_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable sm_c_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				ShortMessageProviderType sm_smp_smptObject = (this.Depth > 1) ? sm_smp_smptTable.CreateInstance() : null;
				ShortMessageProviderConfiguration sm_smp_smpcObject = (this.Depth > 1) ? sm_smp_smpcTable.CreateInstance() : null;
				ShortMessageProvider sm_smpObject = (this.Depth > 0) ? sm_smpTable.CreateInstance(sm_smp_smptObject, sm_smp_smpcObject) : null;
				Service sm_c_sObject = (this.Depth > 1) ? sm_c_sTable.CreateInstance() : null;
				Country sm_c_cObject = (this.Depth > 1) ? sm_c_cTable.CreateInstance() : null;
				MobileOperator sm_c_moObject = (this.Depth > 1) ? sm_c_moTable.CreateInstance() : null;
				Customer sm_cObject = (this.Depth > 0) ? sm_cTable.CreateInstance(sm_c_sObject, sm_c_cObject, sm_c_moObject) : null;
				ShortMessage smObject = smTable.CreateInstance(sm_smpObject, sm_cObject);
				sqlReader.Close();

				return smObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "loadinternal", "exception"), "ShortMessage could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ShortMessage", "Exception while loading ShortMessage object from database. See inner exception for details.", ex);
      }
    }

    public ShortMessage Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ShortMessageTable.GetColumnNames("[sm]") + 
							(this.Depth > 0 ? "," + ShortMessageProviderTable.GetColumnNames("[sm_smp]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderTypeTable.GetColumnNames("[sm_smp_smpt]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderConfigurationTable.GetColumnNames("[sm_smp_smpc]") : string.Empty) + 
							(this.Depth > 0 ? "," + CustomerTable.GetColumnNames("[sm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[sm_c_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[sm_c_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[sm_c_mo]") : string.Empty) +  
					" FROM [core].[ShortMessage] AS [sm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProvider] AS [sm_smp] ON [sm].[ShortMessageProviderID] = [sm_smp].[ShortMessageProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderType] AS [sm_smp_smpt] ON [sm_smp].[ShortMessageProviderTypeID] = [sm_smp_smpt].[ShortMessageProviderTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderConfiguration] AS [sm_smp_smpc] ON [sm_smp].[ShortMessageProviderConfigurationID] = [sm_smp_smpc].[ShortMessageProviderConfigurationID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Customer] AS [sm_c] ON [sm].[CustomerID] = [sm_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [sm_c_s] ON [sm_c].[ServiceID] = [sm_c_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [sm_c_c] ON [sm_c].[CountryID] = [sm_c_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [sm_c_mo] ON [sm_c].[MobileOperatorID] = [sm_c_mo].[MobileOperatorID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "customload", "notfound"), "ShortMessage could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ShortMessageTable smTable = new ShortMessageTable(query);
				ShortMessageProviderTable sm_smpTable = (this.Depth > 0) ? new ShortMessageProviderTable(query) : null;
				ShortMessageProviderTypeTable sm_smp_smptTable = (this.Depth > 1) ? new ShortMessageProviderTypeTable(query) : null;
				ShortMessageProviderConfigurationTable sm_smp_smpcTable = (this.Depth > 1) ? new ShortMessageProviderConfigurationTable(query) : null;
				CustomerTable sm_cTable = (this.Depth > 0) ? new CustomerTable(query) : null;
				ServiceTable sm_c_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				CountryTable sm_c_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable sm_c_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        
				ShortMessageProviderType sm_smp_smptObject = (this.Depth > 1) ? sm_smp_smptTable.CreateInstance() : null;
				ShortMessageProviderConfiguration sm_smp_smpcObject = (this.Depth > 1) ? sm_smp_smpcTable.CreateInstance() : null;
				ShortMessageProvider sm_smpObject = (this.Depth > 0) ? sm_smpTable.CreateInstance(sm_smp_smptObject, sm_smp_smpcObject) : null;
				Service sm_c_sObject = (this.Depth > 1) ? sm_c_sTable.CreateInstance() : null;
				Country sm_c_cObject = (this.Depth > 1) ? sm_c_cTable.CreateInstance() : null;
				MobileOperator sm_c_moObject = (this.Depth > 1) ? sm_c_moTable.CreateInstance() : null;
				Customer sm_cObject = (this.Depth > 0) ? sm_cTable.CreateInstance(sm_c_sObject, sm_c_cObject, sm_c_moObject) : null;
				ShortMessage smObject = smTable.CreateInstance(sm_smpObject, sm_cObject);
				sqlReader.Close();

				return smObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "customload", "exception"), "ShortMessage could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ShortMessage", "Exception while loading (custom/single) ShortMessage object from database. See inner exception for details.", ex);
      }
    }

    public List<ShortMessage> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ShortMessageTable.GetColumnNames("[sm]") + 
							(this.Depth > 0 ? "," + ShortMessageProviderTable.GetColumnNames("[sm_smp]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderTypeTable.GetColumnNames("[sm_smp_smpt]") : string.Empty) + 
							(this.Depth > 1 ? "," + ShortMessageProviderConfigurationTable.GetColumnNames("[sm_smp_smpc]") : string.Empty) + 
							(this.Depth > 0 ? "," + CustomerTable.GetColumnNames("[sm_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ServiceTable.GetColumnNames("[sm_c_s]") : string.Empty) + 
							(this.Depth > 1 ? "," + CountryTable.GetColumnNames("[sm_c_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + MobileOperatorTable.GetColumnNames("[sm_c_mo]") : string.Empty) +  
					" FROM [core].[ShortMessage] AS [sm] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProvider] AS [sm_smp] ON [sm].[ShortMessageProviderID] = [sm_smp].[ShortMessageProviderID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderType] AS [sm_smp_smpt] ON [sm_smp].[ShortMessageProviderTypeID] = [sm_smp_smpt].[ShortMessageProviderTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ShortMessageProviderConfiguration] AS [sm_smp_smpc] ON [sm_smp].[ShortMessageProviderConfigurationID] = [sm_smp_smpc].[ShortMessageProviderConfigurationID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Customer] AS [sm_c] ON [sm].[CustomerID] = [sm_c].[CustomerID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Service] AS [sm_c_s] ON [sm_c].[ServiceID] = [sm_c_s].[ServiceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [sm_c_c] ON [sm_c].[CountryID] = [sm_c_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[MobileOperator] AS [sm_c_mo] ON [sm_c].[MobileOperatorID] = [sm_c_mo].[MobileOperatorID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "customloadmany", "notfound"), "ShortMessage list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<ShortMessage>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ShortMessageTable smTable = new ShortMessageTable(query);
				ShortMessageProviderTable sm_smpTable = (this.Depth > 0) ? new ShortMessageProviderTable(query) : null;
				ShortMessageProviderTypeTable sm_smp_smptTable = (this.Depth > 1) ? new ShortMessageProviderTypeTable(query) : null;
				ShortMessageProviderConfigurationTable sm_smp_smpcTable = (this.Depth > 1) ? new ShortMessageProviderConfigurationTable(query) : null;
				CustomerTable sm_cTable = (this.Depth > 0) ? new CustomerTable(query) : null;
				ServiceTable sm_c_sTable = (this.Depth > 1) ? new ServiceTable(query) : null;
				CountryTable sm_c_cTable = (this.Depth > 1) ? new CountryTable(query) : null;
				MobileOperatorTable sm_c_moTable = (this.Depth > 1) ? new MobileOperatorTable(query) : null;

        List<ShortMessage> result = new List<ShortMessage>();
        do
        {
          
					ShortMessageProviderType sm_smp_smptObject = (this.Depth > 1) ? sm_smp_smptTable.CreateInstance() : null;
					ShortMessageProviderConfiguration sm_smp_smpcObject = (this.Depth > 1) ? sm_smp_smpcTable.CreateInstance() : null;
					ShortMessageProvider sm_smpObject = (this.Depth > 0) ? sm_smpTable.CreateInstance(sm_smp_smptObject, sm_smp_smpcObject) : null;
					Service sm_c_sObject = (this.Depth > 1) ? sm_c_sTable.CreateInstance() : null;
					Country sm_c_cObject = (this.Depth > 1) ? sm_c_cTable.CreateInstance() : null;
					MobileOperator sm_c_moObject = (this.Depth > 1) ? sm_c_moTable.CreateInstance() : null;
					Customer sm_cObject = (this.Depth > 0) ? sm_cTable.CreateInstance(sm_c_sObject, sm_c_cObject, sm_c_moObject) : null;
					ShortMessage smObject = (this.Depth > -1) ? smTable.CreateInstance(sm_smpObject, sm_cObject) : null;
					result.Add(smObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "customloadmany", "exception"), "ShortMessage list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ShortMessage", "Exception while loading (custom/many) ShortMessage object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, ShortMessage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[ShortMessage] ([ShortMessageGuid],[ShortMessageProviderID],[CustomerID],[Text],[ReferenceID],[ShortMessageStatusID]) VALUES(@ShortMessageGuid,@ShortMessageProviderID,@CustomerID,@Text,@ReferenceID,@ShortMessageStatusID); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ShortMessageGuid", data.Guid);
				sqlCmd.Parameters.AddWithValue("@ShortMessageProviderID", data.ShortMessageProvider.ID);
				sqlCmd.Parameters.AddWithValue("@CustomerID", data.Customer.ID);
				sqlCmd.Parameters.AddWithValue("@Text", data.Text).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@ReferenceID", !string.IsNullOrEmpty(data.ReferenceID) ? (object)data.ReferenceID : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ShortMessageStatusID", (int)data.ShortMessageStatus);
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "insert", "noprimarykey"), "ShortMessage could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "ShortMessage", "Exception while inserting ShortMessage object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "insert", "exception"), "ShortMessage could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "ShortMessage", "Exception while inserting ShortMessage object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, ShortMessage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[ShortMessage] SET " +
												"[ShortMessageGuid] = @ShortMessageGuid, " + 
												"[ShortMessageProviderID] = @ShortMessageProviderID, " + 
												"[CustomerID] = @CustomerID, " + 
												"[Text] = @Text, " + 
												"[ReferenceID] = @ReferenceID, " + 
												"[ShortMessageStatusID] = @ShortMessageStatusID, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ShortMessageID] = @ShortMessageID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ShortMessageGuid", data.Guid);
				sqlCmd.Parameters.AddWithValue("@ShortMessageProviderID", data.ShortMessageProvider.ID);
				sqlCmd.Parameters.AddWithValue("@CustomerID", data.Customer.ID);
				sqlCmd.Parameters.AddWithValue("@Text", data.Text).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@ReferenceID", !string.IsNullOrEmpty(data.ReferenceID) ? (object)data.ReferenceID : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ShortMessageStatusID", (int)data.ShortMessageStatus);
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ShortMessageID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "update", "norecord"), "ShortMessage could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ShortMessage", "Exception while updating ShortMessage object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "update", "morerecords"), "ShortMessage was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ShortMessage", "Exception while updating ShortMessage object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "update", "exception"), "ShortMessage could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "ShortMessage", "Exception while updating ShortMessage object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, ShortMessage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[ShortMessage] WHERE ShortMessageID = @ShortMessageID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ShortMessageID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "delete", "norecord"), "ShortMessage could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "ShortMessage", "Exception while deleting ShortMessage object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("sm", "delete", "exception"), "ShortMessage could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "ShortMessage", "Exception while deleting ShortMessage object from database. See inner exception for details.", ex);
      }
    }
  }
}

