using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class QuizResultTable : TableBase<QuizResult>
  {
    public static string GetColumnNames()
    {
      return TableBase<QuizResult>.GetColumnNames(string.Empty, QuizResultTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<QuizResult>.GetColumnNames(tablePrefix, QuizResultTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription QuizResultID = new ColumnDescription("QuizResultID", 0, typeof(int));
			public static readonly ColumnDescription QuizContentID = new ColumnDescription("QuizContentID", 1, typeof(int));
			public static readonly ColumnDescription LanguageID = new ColumnDescription("LanguageID", 2, typeof(int));
			public static readonly ColumnDescription Title = new ColumnDescription("Title", 3, typeof(string));
			public static readonly ColumnDescription Description = new ColumnDescription("Description", 4, typeof(string));
			public static readonly ColumnDescription FromWeight = new ColumnDescription("FromWeight", 5, typeof(int));
			public static readonly ColumnDescription ToWeight = new ColumnDescription("ToWeight", 6, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				QuizResultID,
				QuizContentID,
				LanguageID,
				Title,
				Description,
				FromWeight,
				ToWeight,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public QuizResultTable(SqlQuery query) : base(query) { }
    public QuizResultTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int QuizResultID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QuizResultID)); } }
		public int QuizContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QuizContentID)); } }
		public int LanguageID { get { return this.Reader.GetInt32(this.GetIndex(Columns.LanguageID)); } }
		public string Title { get { return this.Reader.GetString(this.GetIndex(Columns.Title)); } }
		public string Description { get { return this.Reader.GetString(this.GetIndex(Columns.Description)); } }
		public int FromWeight { get { return this.Reader.GetInt32(this.GetIndex(Columns.FromWeight)); } }
		public int ToWeight { get { return this.Reader.GetInt32(this.GetIndex(Columns.ToWeight)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public QuizResult CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new QuizResult(this.QuizResultID,new QuizContent(this.QuizContentID), new Language(this.LanguageID), this.Title,this.Description,this.FromWeight,this.ToWeight,this.Updated,this.Created); 
		}
		public QuizResult CreateInstance(Language language)  
		{ 
			if (!this.HasData) return null;
			return new QuizResult(this.QuizResultID,new QuizContent(this.QuizContentID), language ?? new Language(this.LanguageID), this.Title,this.Description,this.FromWeight,this.ToWeight,this.Updated,this.Created); 
		}
		public QuizResult CreateInstance(QuizContent quizContent)  
		{ 
			if (!this.HasData) return null;
			return new QuizResult(this.QuizResultID,quizContent ?? new QuizContent(this.QuizContentID), new Language(this.LanguageID), this.Title,this.Description,this.FromWeight,this.ToWeight,this.Updated,this.Created); 
		}
		public QuizResult CreateInstance(QuizContent quizContent, Language language)  
		{ 
			if (!this.HasData) return null;
			return new QuizResult(this.QuizResultID,quizContent ?? new QuizContent(this.QuizContentID), language ?? new Language(this.LanguageID), this.Title,this.Description,this.FromWeight,this.ToWeight,this.Updated,this.Created); 
		}
		

  }
}

