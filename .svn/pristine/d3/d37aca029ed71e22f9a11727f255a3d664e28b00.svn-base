using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAuctionBidManager : IDataManager<AuctionBid> 
  {
	

  }

  public partial class AuctionBid : MobilePaywallObject<IAuctionBidManager> 
  {
		private AuctionRound _auctionRound;
		private Customer _customer;
		private decimal _amount = 0;
		

		public AuctionRound AuctionRound 
		{
			get
			{
				if (this._auctionRound != null &&
						this._auctionRound.IsEmpty)
					if (this.ConnectionContext != null)
						this._auctionRound = AuctionRound.CreateManager().LazyLoad(this.ConnectionContext, this._auctionRound.ID) as AuctionRound;
					else
						this._auctionRound = AuctionRound.CreateManager().LazyLoad(this._auctionRound.ID) as AuctionRound;
				return this._auctionRound;
			}
			set { _auctionRound = value; }
		}

		public Customer Customer 
		{
			get
			{
				if (this._customer != null &&
						this._customer.IsEmpty)
					if (this.ConnectionContext != null)
						this._customer = Customer.CreateManager().LazyLoad(this.ConnectionContext, this._customer.ID) as Customer;
					else
						this._customer = Customer.CreateManager().LazyLoad(this._customer.ID) as Customer;
				return this._customer;
			}
			set { _customer = value; }
		}

		public decimal Amount { get { return this._amount; } set { this._amount = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public AuctionBid()
    { 
    }

    public AuctionBid(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public AuctionBid(int id,  AuctionRound auctionRound, Customer customer, decimal amount, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._auctionRound = auctionRound;
			this._customer = customer;
			this._amount = amount;
			
    }

    public override object Clone(bool deepClone)
    {
      return new AuctionBid(-1,  this.AuctionRound, this.Customer,this.Amount, DateTime.Now, DateTime.Now);
    }
  }
}

