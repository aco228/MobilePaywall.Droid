using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentAccessPolicyManager : IDataManager<ContentAccessPolicy> 
  {
	

  }

  public partial class ContentAccessPolicy : MobilePaywallObject<IContentAccessPolicyManager> 
  {
		private BusinessModel _businessModel;
		private BusinessModelEntry _businessModelEntry;
		private Service _service;
		private ContentGroup _contentGroup;
		private Content _content;
		private TemporarySetupAccessMode _temporarySetupAccessMode;
		private int? _temporaryAccessInSeconds = -1;
		private int? _numberOfItems = -1;
		private int? _numberOfItemDownloads = -1;
		private int? _numberOfTotalDownloads = -1;
		private int? _intervalInSeconds = -1;
		

		public BusinessModel BusinessModel 
		{
			get
			{
				if (this._businessModel != null &&
						this._businessModel.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModel = BusinessModel.CreateManager().LazyLoad(this.ConnectionContext, this._businessModel.ID) as BusinessModel;
					else
						this._businessModel = BusinessModel.CreateManager().LazyLoad(this._businessModel.ID) as BusinessModel;
				return this._businessModel;
			}
			set { _businessModel = value; }
		}

		public BusinessModelEntry BusinessModelEntry 
		{
			get
			{
				if (this._businessModelEntry != null &&
						this._businessModelEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this.ConnectionContext, this._businessModelEntry.ID) as BusinessModelEntry;
					else
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this._businessModelEntry.ID) as BusinessModelEntry;
				return this._businessModelEntry;
			}
			set { _businessModelEntry = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public ContentGroup ContentGroup 
		{
			get
			{
				if (this._contentGroup != null &&
						this._contentGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this.ConnectionContext, this._contentGroup.ID) as ContentGroup;
					else
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this._contentGroup.ID) as ContentGroup;
				return this._contentGroup;
			}
			set { _contentGroup = value; }
		}

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public TemporarySetupAccessMode TemporarySetupAccessMode  { get { return this._temporarySetupAccessMode; } set { this._temporarySetupAccessMode = value; } }
		public int? TemporaryAccessInSeconds{ get {return this._temporaryAccessInSeconds; } set { this._temporaryAccessInSeconds = value;} }
		public int? NumberOfItems{ get {return this._numberOfItems; } set { this._numberOfItems = value;} }
		public int? NumberOfItemDownloads{ get {return this._numberOfItemDownloads; } set { this._numberOfItemDownloads = value;} }
		public int? NumberOfTotalDownloads{ get {return this._numberOfTotalDownloads; } set { this._numberOfTotalDownloads = value;} }
		public int? IntervalInSeconds{ get {return this._intervalInSeconds; } set { this._intervalInSeconds = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentAccessPolicy()
    { 
    }

    public ContentAccessPolicy(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentAccessPolicy(int id,  BusinessModel businessModel, BusinessModelEntry businessModelEntry, Service service, ContentGroup contentGroup, Content content, TemporarySetupAccessMode temporarySetupAccessMode, int? temporaryAccessInSeconds, int? numberOfItems, int? numberOfItemDownloads, int? numberOfTotalDownloads, int? intervalInSeconds, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._businessModel = businessModel;
			this._businessModelEntry = businessModelEntry;
			this._service = service;
			this._contentGroup = contentGroup;
			this._content = content;
			this._temporarySetupAccessMode = temporarySetupAccessMode;
			this._temporaryAccessInSeconds = temporaryAccessInSeconds;
			this._numberOfItems = numberOfItems;
			this._numberOfItemDownloads = numberOfItemDownloads;
			this._numberOfTotalDownloads = numberOfTotalDownloads;
			this._intervalInSeconds = intervalInSeconds;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentAccessPolicy(-1,  this.BusinessModel, this.BusinessModelEntry, this.Service, this.ContentGroup, this.Content, this.TemporarySetupAccessMode,this.TemporaryAccessInSeconds,this.NumberOfItems,this.NumberOfItemDownloads,this.NumberOfTotalDownloads,this.IntervalInSeconds, DateTime.Now, DateTime.Now);
    }
  }
}

