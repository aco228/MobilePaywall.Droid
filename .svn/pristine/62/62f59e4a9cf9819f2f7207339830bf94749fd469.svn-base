using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class VersionTable : TableBase<Version>
  {
    public static string GetColumnNames()
    {
      return TableBase<Version>.GetColumnNames(string.Empty, VersionTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Version>.GetColumnNames(tablePrefix, VersionTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription VersionID = new ColumnDescription("VersionID", 0, typeof(int));
			public static readonly ColumnDescription PlatformID = new ColumnDescription("PlatformID", 1, typeof(int));
			public static readonly ColumnDescription ArchitectureTypeID = new ColumnDescription("ArchitectureTypeID", 2, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 3, typeof(string));
			public static readonly ColumnDescription Code = new ColumnDescription("Code", 4, typeof(string));
			public static readonly ColumnDescription Index = new ColumnDescription("Index", 5, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 6, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				VersionID,
				PlatformID,
				ArchitectureTypeID,
				Name,
				Code,
				Index,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public VersionTable(SqlQuery query) : base(query) { }
    public VersionTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int VersionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VersionID)); } }
		public int PlatformID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PlatformID)); } }
		
		public int? ArchitectureTypeID 
		{
			get
			{
				int index = this.GetIndex(Columns.ArchitectureTypeID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public string Name 
		{
			get
			{
				int index = this.GetIndex(Columns.Name);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string Code 
		{
			get
			{
				int index = this.GetIndex(Columns.Code);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public int Index { get { return this.Reader.GetInt32(this.GetIndex(Columns.Index)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Version CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Version(this.VersionID,new Platform(this.PlatformID), (ArchitectureTypeID.HasValue ? new ArchitectureType(this.ArchitectureTypeID.Value) : null), this.Name,this.Code,this.Index,this.Updated,this.Created); 
		}
		public Version CreateInstance(ArchitectureType architectureType)  
		{ 
			if (!this.HasData) return null;
			return new Version(this.VersionID,new Platform(this.PlatformID), architectureType ?? (this.ArchitectureTypeID.HasValue ? new ArchitectureType(this.ArchitectureTypeID.Value) : null), this.Name,this.Code,this.Index,this.Updated,this.Created); 
		}
		public Version CreateInstance(Platform platform)  
		{ 
			if (!this.HasData) return null;
			return new Version(this.VersionID,platform ?? new Platform(this.PlatformID), (ArchitectureTypeID.HasValue ? new ArchitectureType(this.ArchitectureTypeID.Value) : null), this.Name,this.Code,this.Index,this.Updated,this.Created); 
		}
		public Version CreateInstance(Platform platform, ArchitectureType architectureType)  
		{ 
			if (!this.HasData) return null;
			return new Version(this.VersionID,platform ?? new Platform(this.PlatformID), architectureType ?? (this.ArchitectureTypeID.HasValue ? new ArchitectureType(this.ArchitectureTypeID.Value) : null), this.Name,this.Code,this.Index,this.Updated,this.Created); 
		}
		

  }
}

