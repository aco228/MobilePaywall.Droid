using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentThumbnailDataManager : IDataManager<ContentThumbnailData> 
  {
	

  }

  public partial class ContentThumbnailData : MobilePaywallObject<IContentThumbnailDataManager> 
  {
    private bool _cacheData = false;
		private ContentThumbnail _contentThumbnail;
		private ThumbnailConversionProfileEntry _thumbnailConversionProfileEntry;
		private bool _isOriginal = false;
		private byte[] _data = null;

    public bool CacheData { get { return this._cacheData; } set { this._cacheData = value; } }

		public ContentThumbnail ContentThumbnail 
		{
			get
			{
				if (this._contentThumbnail != null &&
						this._contentThumbnail.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentThumbnail = ContentThumbnail.CreateManager().LazyLoad(this.ConnectionContext, this._contentThumbnail.ID) as ContentThumbnail;
					else
						this._contentThumbnail = ContentThumbnail.CreateManager().LazyLoad(this._contentThumbnail.ID) as ContentThumbnail;
				return this._contentThumbnail;
			}
			set { _contentThumbnail = value; }
		}

		public ThumbnailConversionProfileEntry ThumbnailConversionProfileEntry 
		{
			get
			{
				if (this._thumbnailConversionProfileEntry != null &&
						this._thumbnailConversionProfileEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._thumbnailConversionProfileEntry = ThumbnailConversionProfileEntry.CreateManager().LazyLoad(this.ConnectionContext, this._thumbnailConversionProfileEntry.ID) as ThumbnailConversionProfileEntry;
					else
						this._thumbnailConversionProfileEntry = ThumbnailConversionProfileEntry.CreateManager().LazyLoad(this._thumbnailConversionProfileEntry.ID) as ThumbnailConversionProfileEntry;
				return this._thumbnailConversionProfileEntry;
			}
			set { _thumbnailConversionProfileEntry = value; }
		}

		public bool IsOriginal {get {return this._isOriginal; } set { this._isOriginal = value;} }
		public byte[] Data { get { return this._data; } set { this._data = value;}  }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentThumbnailData()
    { 
    }

    public ContentThumbnailData(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentThumbnailData(int id,  ContentThumbnail contentThumbnail, ThumbnailConversionProfileEntry thumbnailConversionProfileEntry, bool isOriginal, byte[] data, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._contentThumbnail = contentThumbnail;
			this._thumbnailConversionProfileEntry = thumbnailConversionProfileEntry;
			this._isOriginal = isOriginal;
			this._data = data;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentThumbnailData(-1,  this.ContentThumbnail, this.ThumbnailConversionProfileEntry,this.IsOriginal,this.Data, DateTime.Now, DateTime.Now);
    }
  }
}

