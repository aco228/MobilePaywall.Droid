using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAuctionRoundManager : IDataManager<AuctionRound> 
  {
	

  }

  public partial class AuctionRound : MobilePaywallObject<IAuctionRoundManager> 
  {
		private Service _service;
		private ContentGroup _contentGroup;
		private Content _content;
		private AuctionBid _auctionBid;
		private Interval _interval;
		private int _intervalValue = -1;
		private DateTime _validFrom = DateTime.MinValue;
		private DateTime? _validTo = DateTime.MinValue;
		

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public ContentGroup ContentGroup 
		{
			get
			{
				if (this._contentGroup != null &&
						this._contentGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this.ConnectionContext, this._contentGroup.ID) as ContentGroup;
					else
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this._contentGroup.ID) as ContentGroup;
				return this._contentGroup;
			}
			set { _contentGroup = value; }
		}

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public AuctionBid AuctionBid 
		{
			get
			{
				if (this._auctionBid != null &&
						this._auctionBid.IsEmpty)
					if (this.ConnectionContext != null)
						this._auctionBid = AuctionBid.CreateManager().LazyLoad(this.ConnectionContext, this._auctionBid.ID) as AuctionBid;
					else
						this._auctionBid = AuctionBid.CreateManager().LazyLoad(this._auctionBid.ID) as AuctionBid;
				return this._auctionBid;
			}
			set { _auctionBid = value; }
		}

		public Interval Interval  { get { return this._interval; } set { this._interval = value; } }
		public int IntervalValue{ get {return this._intervalValue; } set { this._intervalValue = value;} }
		public DateTime ValidFrom { get { return this._validFrom; } set { this._validFrom = value;} }
		public DateTime? ValidTo { get { return this._validTo; } set { this._validTo = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public AuctionRound()
    { 
    }

    public AuctionRound(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public AuctionRound(int id,  Service service, ContentGroup contentGroup, Content content, AuctionBid auctionBid, Interval interval, int intervalValue, DateTime validFrom, DateTime? validTo, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._service = service;
			this._contentGroup = contentGroup;
			this._content = content;
			this._auctionBid = auctionBid;
			this._interval = interval;
			this._intervalValue = intervalValue;
			this._validFrom = validFrom;
			this._validTo = validTo;
			
    }

    public override object Clone(bool deepClone)
    {
      return new AuctionRound(-1,  this.Service, this.ContentGroup, this.Content, this.AuctionBid, this.Interval,this.IntervalValue,this.ValidFrom,this.ValidTo, DateTime.Now, DateTime.Now);
    }
  }
}

