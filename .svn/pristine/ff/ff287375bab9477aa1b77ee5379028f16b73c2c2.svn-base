using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ClickInformationTable : TableBase<ClickInformation>
  {
    public static string GetColumnNames()
    {
      return TableBase<ClickInformation>.GetColumnNames(string.Empty, ClickInformationTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ClickInformation>.GetColumnNames(tablePrefix, ClickInformationTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ClickInformationID = new ColumnDescription("ClickInformationID", 0, typeof(int));
			public static readonly ColumnDescription ClickInformationDeviceID = new ColumnDescription("ClickInformationDeviceID", 1, typeof(int));
			public static readonly ColumnDescription UserSessionID = new ColumnDescription("UserSessionID", 2, typeof(int));
			public static readonly ColumnDescription DeviceFamily = new ColumnDescription("DeviceFamily", 3, typeof(string));
			public static readonly ColumnDescription DeviceModel = new ColumnDescription("DeviceModel", 4, typeof(string));
			public static readonly ColumnDescription DeviceName = new ColumnDescription("DeviceName", 5, typeof(string));
			public static readonly ColumnDescription DeviceVendor = new ColumnDescription("DeviceVendor", 6, typeof(string));
			public static readonly ColumnDescription DeviceOEM = new ColumnDescription("DeviceOEM", 7, typeof(string));
			public static readonly ColumnDescription PlatformName = new ColumnDescription("PlatformName", 8, typeof(string));
			public static readonly ColumnDescription PlatformVendor = new ColumnDescription("PlatformVendor", 9, typeof(string));
			public static readonly ColumnDescription PlatformVersion = new ColumnDescription("PlatformVersion", 10, typeof(string));
			public static readonly ColumnDescription BrowserName = new ColumnDescription("BrowserName", 11, typeof(string));
			public static readonly ColumnDescription BrowserVendor = new ColumnDescription("BrowserVendor", 12, typeof(string));
			public static readonly ColumnDescription BrowserVersion = new ColumnDescription("BrowserVersion", 13, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 14, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 15, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ClickInformationID,
				ClickInformationDeviceID,
				UserSessionID,
				DeviceFamily,
				DeviceModel,
				DeviceName,
				DeviceVendor,
				DeviceOEM,
				PlatformName,
				PlatformVendor,
				PlatformVersion,
				BrowserName,
				BrowserVendor,
				BrowserVersion,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ClickInformationTable(SqlQuery query) : base(query) { }
    public ClickInformationTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ClickInformationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClickInformationID)); } }
		public int ClickInformationDeviceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClickInformationDeviceID)); } }
		public int UserSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserSessionID)); } }
		
		public string DeviceFamily 
		{
			get
			{
				int index = this.GetIndex(Columns.DeviceFamily);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string DeviceModel 
		{
			get
			{
				int index = this.GetIndex(Columns.DeviceModel);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string DeviceName 
		{
			get
			{
				int index = this.GetIndex(Columns.DeviceName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string DeviceVendor 
		{
			get
			{
				int index = this.GetIndex(Columns.DeviceVendor);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string DeviceOEM 
		{
			get
			{
				int index = this.GetIndex(Columns.DeviceOEM);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string PlatformName 
		{
			get
			{
				int index = this.GetIndex(Columns.PlatformName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string PlatformVendor 
		{
			get
			{
				int index = this.GetIndex(Columns.PlatformVendor);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string PlatformVersion 
		{
			get
			{
				int index = this.GetIndex(Columns.PlatformVersion);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string BrowserName 
		{
			get
			{
				int index = this.GetIndex(Columns.BrowserName);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string BrowserVendor 
		{
			get
			{
				int index = this.GetIndex(Columns.BrowserVendor);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string BrowserVersion 
		{
			get
			{
				int index = this.GetIndex(Columns.BrowserVersion);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ClickInformation CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ClickInformation(this.ClickInformationID,(ClickInformationDevice)this.ClickInformationDeviceID,new UserSession(this.UserSessionID), this.DeviceFamily,this.DeviceModel,this.DeviceName,this.DeviceVendor,this.DeviceOEM,this.PlatformName,this.PlatformVendor,this.PlatformVersion,this.BrowserName,this.BrowserVendor,this.BrowserVersion,this.Updated,this.Created); 
		}
		public ClickInformation CreateInstance(UserSession userSession)  
		{ 
			if (!this.HasData) return null;
			return new ClickInformation(this.ClickInformationID,(ClickInformationDevice)this.ClickInformationDeviceID,userSession ?? new UserSession(this.UserSessionID), this.DeviceFamily,this.DeviceModel,this.DeviceName,this.DeviceVendor,this.DeviceOEM,this.PlatformName,this.PlatformVendor,this.PlatformVersion,this.BrowserName,this.BrowserVendor,this.BrowserVersion,this.Updated,this.Created); 
		}
		

  }
}

