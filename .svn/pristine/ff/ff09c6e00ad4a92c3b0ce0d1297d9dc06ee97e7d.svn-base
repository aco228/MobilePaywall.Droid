using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class AutomationTable : TableBase<Automation>
  {
    public static string GetColumnNames()
    {
      return TableBase<Automation>.GetColumnNames(string.Empty, AutomationTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Automation>.GetColumnNames(tablePrefix, AutomationTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription AutomationID = new ColumnDescription("AutomationID", 0, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 1, typeof(string));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 2, typeof(int));
			public static readonly ColumnDescription AutomationGroupID = new ColumnDescription("AutomationGroupID", 3, typeof(int));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 4, typeof(int));
			public static readonly ColumnDescription Limit = new ColumnDescription("Limit", 5, typeof(int));
			public static readonly ColumnDescription ExternalOfferName = new ColumnDescription("ExternalOfferName", 6, typeof(string));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 7, typeof(bool));
			public static readonly ColumnDescription Index = new ColumnDescription("Index", 8, typeof(int));
			public static readonly ColumnDescription Comment = new ColumnDescription("Comment", 9, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 10, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 11, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				AutomationID,
				Name,
				ServiceID,
				AutomationGroupID,
				MobileOperatorID,
				Limit,
				ExternalOfferName,
				IsActive,
				Index,
				Comment,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public AutomationTable(SqlQuery query) : base(query) { }
    public AutomationTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int AutomationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AutomationID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		public int AutomationGroupID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AutomationGroupID)); } }
		
		public int? MobileOperatorID 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public int Limit { get { return this.Reader.GetInt32(this.GetIndex(Columns.Limit)); } }
		public string ExternalOfferName { get { return this.Reader.GetString(this.GetIndex(Columns.ExternalOfferName)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		public int Index { get { return this.Reader.GetInt32(this.GetIndex(Columns.Index)); } }
		
		public string Comment 
		{
			get
			{
				int index = this.GetIndex(Columns.Comment);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Automation CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,new Service(this.ServiceID), new AutomationGroup(this.AutomationGroupID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(AutomationGroup automationGroup)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,new Service(this.ServiceID), automationGroup ?? new AutomationGroup(this.AutomationGroupID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,new Service(this.ServiceID), new AutomationGroup(this.AutomationGroupID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,service ?? new Service(this.ServiceID), new AutomationGroup(this.AutomationGroupID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(AutomationGroup automationGroup, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,new Service(this.ServiceID), automationGroup ?? new AutomationGroup(this.AutomationGroupID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(Service service, AutomationGroup automationGroup)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,service ?? new Service(this.ServiceID), automationGroup ?? new AutomationGroup(this.AutomationGroupID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(Service service, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,service ?? new Service(this.ServiceID), new AutomationGroup(this.AutomationGroupID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		public Automation CreateInstance(Service service, AutomationGroup automationGroup, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Automation(this.AutomationID,this.Name,service ?? new Service(this.ServiceID), automationGroup ?? new AutomationGroup(this.AutomationGroupID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.Limit,this.ExternalOfferName,this.IsActive,this.Index,this.Comment,this.Updated,this.Created); 
		}
		

  }
}

