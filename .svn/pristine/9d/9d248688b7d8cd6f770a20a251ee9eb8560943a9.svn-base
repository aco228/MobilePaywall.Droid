using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class UserHttpRequestTable : TableBase<UserHttpRequest>
  {
    public static string GetColumnNames()
    {
      return TableBase<UserHttpRequest>.GetColumnNames(string.Empty, UserHttpRequestTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<UserHttpRequest>.GetColumnNames(tablePrefix, UserHttpRequestTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription UserHttpRequestID = new ColumnDescription("UserHttpRequestID", 0, typeof(int));
			public static readonly ColumnDescription UserHttpRequestGuid = new ColumnDescription("UserHttpRequestGuid", 1, typeof(Guid));
			public static readonly ColumnDescription UserSessionID = new ColumnDescription("UserSessionID", 2, typeof(int));
			public static readonly ColumnDescription ContentID = new ColumnDescription("ContentID", 3, typeof(int));
			public static readonly ColumnDescription RequestedUrl = new ColumnDescription("RequestedUrl", 4, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				UserHttpRequestID,
				UserHttpRequestGuid,
				UserSessionID,
				ContentID,
				RequestedUrl,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public UserHttpRequestTable(SqlQuery query) : base(query) { }
    public UserHttpRequestTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int UserHttpRequestID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserHttpRequestID)); } }
		public Guid UserHttpRequestGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.UserHttpRequestGuid)); } }
		public int UserSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserSessionID)); } }
		
		public int? ContentID 
		{
			get
			{
				int index = this.GetIndex(Columns.ContentID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public string RequestedUrl { get { return this.Reader.GetString(this.GetIndex(Columns.RequestedUrl)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public UserHttpRequest CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new UserHttpRequest(this.UserHttpRequestID,this.UserHttpRequestGuid,new UserSession(this.UserSessionID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), this.RequestedUrl,this.Updated,this.Created); 
		}
		public UserHttpRequest CreateInstance(Content content)  
		{ 
			if (!this.HasData) return null;
			return new UserHttpRequest(this.UserHttpRequestID,this.UserHttpRequestGuid,new UserSession(this.UserSessionID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), this.RequestedUrl,this.Updated,this.Created); 
		}
		public UserHttpRequest CreateInstance(UserSession userSession)  
		{ 
			if (!this.HasData) return null;
			return new UserHttpRequest(this.UserHttpRequestID,this.UserHttpRequestGuid,userSession ?? new UserSession(this.UserSessionID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), this.RequestedUrl,this.Updated,this.Created); 
		}
		public UserHttpRequest CreateInstance(UserSession userSession, Content content)  
		{ 
			if (!this.HasData) return null;
			return new UserHttpRequest(this.UserHttpRequestID,this.UserHttpRequestGuid,userSession ?? new UserSession(this.UserSessionID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), this.RequestedUrl,this.Updated,this.Created); 
		}
		

  }
}

