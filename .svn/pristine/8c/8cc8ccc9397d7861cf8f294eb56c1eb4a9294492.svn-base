using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IQuizContentManager : IDataManager<QuizContent> 
  {
	

  }

  public partial class QuizContent : MobilePaywallObject<IQuizContentManager> 
  {
		private Content _content;
		private QuizContentType _quizContentType;
		private string _title = String.Empty;
		private string _description = String.Empty;
		private int _numOfQuestions = -1;
		

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public QuizContentType QuizContentType 
		{
			get
			{
				if (this._quizContentType != null &&
						this._quizContentType.IsEmpty)
					if (this.ConnectionContext != null)
						this._quizContentType = QuizContentType.CreateManager().LazyLoad(this.ConnectionContext, this._quizContentType.ID) as QuizContentType;
					else
						this._quizContentType = QuizContentType.CreateManager().LazyLoad(this._quizContentType.ID) as QuizContentType;
				return this._quizContentType;
			}
			set { _quizContentType = value; }
		}

		public string Title{ get {return this._title; } set { this._title = value;} }
		public string Description{ get {return this._description; } set { this._description = value;} }
		public int NumOfQuestions{ get {return this._numOfQuestions; } set { this._numOfQuestions = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public QuizContent()
    { 
    }

    public QuizContent(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public QuizContent(int id,  Content content, QuizContentType quizContentType, string title, string description, int numOfQuestions, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._content = content;
			this._quizContentType = quizContentType;
			this._title = title;
			this._description = description;
			this._numOfQuestions = numOfQuestions;
			
    }

    public override object Clone(bool deepClone)
    {
      return new QuizContent(-1,  this.Content, this.QuizContentType,this.Title,this.Description,this.NumOfQuestions, DateTime.Now, DateTime.Now);
    }
  }
}

