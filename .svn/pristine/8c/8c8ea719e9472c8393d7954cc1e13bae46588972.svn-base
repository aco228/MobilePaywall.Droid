using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(ContentThumbnail))] 
  public partial class ContentThumbnailManager : MobilePaywall.Data.Sql.SqlManagerBase<ContentThumbnail>, IContentThumbnailManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override ContentThumbnail LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							ContentThumbnailTable.GetColumnNames("[ct]") + 
							(this.Depth > 0 ? "," + ContentTable.GetColumnNames("[ct_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTable.GetColumnNames("[ct_c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentTypeTable.GetColumnNames("[ct_c_ct]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTable.GetColumnNames("[ct_c_cs]") : string.Empty) + 
					" FROM [core].[ContentThumbnail] AS [ct] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Content] AS [ct_c] ON [ct].[ContentID] = [ct_c].[ContentID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [ct_c_cg] ON [ct_c].[ContentGroupID] = [ct_c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [ct_c_ct] ON [ct_c].[ContentTypeID] = [ct_c_ct].[ContentTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [ct_c_cs] ON [ct_c].[ContentStorageID] = [ct_c_cs].[ContentStorageID] ";
				sqlCmdText += "WHERE [ct].[ContentThumbnailID] = @ContentThumbnailID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentThumbnailID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "loadinternal", "notfound"), "ContentThumbnail could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentThumbnailTable ctTable = new ContentThumbnailTable(query);
				ContentTable ct_cTable = (this.Depth > 0) ? new ContentTable(query) : null;
				ContentGroupTable ct_c_cgTable = (this.Depth > 1) ? new ContentGroupTable(query) : null;
				ContentTypeTable ct_c_ctTable = (this.Depth > 1) ? new ContentTypeTable(query) : null;
				ContentStorageTable ct_c_csTable = (this.Depth > 1) ? new ContentStorageTable(query) : null;

        
				ContentGroup ct_c_cgObject = (this.Depth > 1) ? ct_c_cgTable.CreateInstance() : null;
				ContentType ct_c_ctObject = (this.Depth > 1) ? ct_c_ctTable.CreateInstance() : null;
				ContentStorage ct_c_csObject = (this.Depth > 1) ? ct_c_csTable.CreateInstance() : null;
				Content ct_cObject = (this.Depth > 0) ? ct_cTable.CreateInstance(ct_c_cgObject, ct_c_ctObject, ct_c_csObject) : null;
				ContentThumbnail ctObject = ctTable.CreateInstance(ct_cObject);
				sqlReader.Close();

				return ctObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "loadinternal", "exception"), "ContentThumbnail could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentThumbnail", "Exception while loading ContentThumbnail object from database. See inner exception for details.", ex);
      }
    }

    public ContentThumbnail Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentThumbnailTable.GetColumnNames("[ct]") + 
							(this.Depth > 0 ? "," + ContentTable.GetColumnNames("[ct_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTable.GetColumnNames("[ct_c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentTypeTable.GetColumnNames("[ct_c_ct]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTable.GetColumnNames("[ct_c_cs]") : string.Empty) +  
					" FROM [core].[ContentThumbnail] AS [ct] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Content] AS [ct_c] ON [ct].[ContentID] = [ct_c].[ContentID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [ct_c_cg] ON [ct_c].[ContentGroupID] = [ct_c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [ct_c_ct] ON [ct_c].[ContentTypeID] = [ct_c_ct].[ContentTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [ct_c_cs] ON [ct_c].[ContentStorageID] = [ct_c_cs].[ContentStorageID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "customload", "notfound"), "ContentThumbnail could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentThumbnailTable ctTable = new ContentThumbnailTable(query);
				ContentTable ct_cTable = (this.Depth > 0) ? new ContentTable(query) : null;
				ContentGroupTable ct_c_cgTable = (this.Depth > 1) ? new ContentGroupTable(query) : null;
				ContentTypeTable ct_c_ctTable = (this.Depth > 1) ? new ContentTypeTable(query) : null;
				ContentStorageTable ct_c_csTable = (this.Depth > 1) ? new ContentStorageTable(query) : null;

        
				ContentGroup ct_c_cgObject = (this.Depth > 1) ? ct_c_cgTable.CreateInstance() : null;
				ContentType ct_c_ctObject = (this.Depth > 1) ? ct_c_ctTable.CreateInstance() : null;
				ContentStorage ct_c_csObject = (this.Depth > 1) ? ct_c_csTable.CreateInstance() : null;
				Content ct_cObject = (this.Depth > 0) ? ct_cTable.CreateInstance(ct_c_cgObject, ct_c_ctObject, ct_c_csObject) : null;
				ContentThumbnail ctObject = ctTable.CreateInstance(ct_cObject);
				sqlReader.Close();

				return ctObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "customload", "exception"), "ContentThumbnail could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentThumbnail", "Exception while loading (custom/single) ContentThumbnail object from database. See inner exception for details.", ex);
      }
    }

    public List<ContentThumbnail> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							ContentThumbnailTable.GetColumnNames("[ct]") + 
							(this.Depth > 0 ? "," + ContentTable.GetColumnNames("[ct_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentGroupTable.GetColumnNames("[ct_c_cg]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentTypeTable.GetColumnNames("[ct_c_ct]") : string.Empty) + 
							(this.Depth > 1 ? "," + ContentStorageTable.GetColumnNames("[ct_c_cs]") : string.Empty) +  
					" FROM [core].[ContentThumbnail] AS [ct] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Content] AS [ct_c] ON [ct].[ContentID] = [ct_c].[ContentID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentGroup] AS [ct_c_cg] ON [ct_c].[ContentGroupID] = [ct_c_cg].[ContentGroupID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentType] AS [ct_c_ct] ON [ct_c].[ContentTypeID] = [ct_c_ct].[ContentTypeID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ContentStorage] AS [ct_c_cs] ON [ct_c].[ContentStorageID] = [ct_c_cs].[ContentStorageID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "customloadmany", "notfound"), "ContentThumbnail list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<ContentThumbnail>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				ContentThumbnailTable ctTable = new ContentThumbnailTable(query);
				ContentTable ct_cTable = (this.Depth > 0) ? new ContentTable(query) : null;
				ContentGroupTable ct_c_cgTable = (this.Depth > 1) ? new ContentGroupTable(query) : null;
				ContentTypeTable ct_c_ctTable = (this.Depth > 1) ? new ContentTypeTable(query) : null;
				ContentStorageTable ct_c_csTable = (this.Depth > 1) ? new ContentStorageTable(query) : null;

        List<ContentThumbnail> result = new List<ContentThumbnail>();
        do
        {
          
					ContentGroup ct_c_cgObject = (this.Depth > 1) ? ct_c_cgTable.CreateInstance() : null;
					ContentType ct_c_ctObject = (this.Depth > 1) ? ct_c_ctTable.CreateInstance() : null;
					ContentStorage ct_c_csObject = (this.Depth > 1) ? ct_c_csTable.CreateInstance() : null;
					Content ct_cObject = (this.Depth > 0) ? ct_cTable.CreateInstance(ct_c_cgObject, ct_c_ctObject, ct_c_csObject) : null;
					ContentThumbnail ctObject = (this.Depth > -1) ? ctTable.CreateInstance(ct_cObject) : null;
					result.Add(ctObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "customloadmany", "exception"), "ContentThumbnail list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "ContentThumbnail", "Exception while loading (custom/many) ContentThumbnail object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, ContentThumbnail data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[ContentThumbnail] ([ContentID],[IsDefault]) VALUES(@ContentID,@IsDefault); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ContentID", data.Content.ID);
				sqlCmd.Parameters.AddWithValue("@IsDefault", data.IsDefault).SqlDbType = SqlDbType.Bit;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "insert", "noprimarykey"), "ContentThumbnail could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "ContentThumbnail", "Exception while inserting ContentThumbnail object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "insert", "exception"), "ContentThumbnail could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "ContentThumbnail", "Exception while inserting ContentThumbnail object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, ContentThumbnail data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[ContentThumbnail] SET " +
												"[ContentID] = @ContentID, " + 
												"[IsDefault] = @IsDefault, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [ContentThumbnailID] = @ContentThumbnailID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ContentID", data.Content.ID);
				sqlCmd.Parameters.AddWithValue("@IsDefault", data.IsDefault).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@ContentThumbnailID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "update", "norecord"), "ContentThumbnail could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ContentThumbnail", "Exception while updating ContentThumbnail object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "update", "morerecords"), "ContentThumbnail was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "ContentThumbnail", "Exception while updating ContentThumbnail object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "update", "exception"), "ContentThumbnail could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "ContentThumbnail", "Exception while updating ContentThumbnail object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, ContentThumbnail data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[ContentThumbnail] WHERE ContentThumbnailID = @ContentThumbnailID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@ContentThumbnailID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "delete", "norecord"), "ContentThumbnail could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "ContentThumbnail", "Exception while deleting ContentThumbnail object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ct", "delete", "exception"), "ContentThumbnail could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "ContentThumbnail", "Exception while deleting ContentThumbnail object from database. See inner exception for details.", ex);
      }
    }
  }
}

