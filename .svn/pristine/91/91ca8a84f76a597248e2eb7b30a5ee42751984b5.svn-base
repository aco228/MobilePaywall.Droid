@model List<ITask>
@{
  Client client = PaywallHttpContext.Current.ClientSession.Client;
  bool isAdministrator = client.ClientType.Name.Equals("Administrator");
  bool isMerchant = client.ClientType.Name.Equals("Merchant") || client.ClientType.Name.Equals("MerchantUser");
}

@{
  if (Model.Count == 0)
  {
    <h4>No results found</h4>
  }
  else
  {
    <table id="tasks_table" class="table table-striped table-condensed table-hover">
      <thead>
        <tr>
          <th> # </th>
          <th> Task Title </th>
          <th> Creator </th>
          <th> Assigned To </th>
          <th> Resolver </th>
          <th> Action Type </th>
          <th> Status </th>
          <th> Created </th>
          <th> Completed </th>
          <th> Actions </th>
        </tr>
      </thead>
      <tbody>
        @{
          foreach (ITask task in Model)
          {
            bool isCreator = task.TaskData.Creator.ID == client.ID;
            bool isOwner = ((isCreator && task.TaskData.Resolver == null) || (task.TaskData.Resolver != null && task.TaskData.Resolver.ID == client.ID)) && task.TaskData.TaskStatus != TaskStatus.Waiting; //creator is owner until he sends the task, after that resolver is the owner. If the TaskStatus is Waiting there is no owner and task needs to be assigned
            TaskStatus taskStatus = task.TaskData.TaskStatus;
            string label = task.TaskData.TaskStatus == TaskStatus.Done ? "label-success" : task.TaskData.TaskStatus == TaskStatus.Waiting ? "label-danger" : task.TaskData.TaskStatus == TaskStatus.Incomplete ? "label-warning" : task.TaskData.TaskStatus == TaskStatus.Processing ? "label-primary" : task.TaskData.TaskStatus == TaskStatus.Cancelled ? "label-default" : task.TaskData.TaskStatus == TaskStatus.Paused ? "label-info" : task.TaskData.TaskStatus == TaskStatus.Requested ? "bg-purple-studio" : "label-default";

            if (task.TaskData.TaskType.Name.Equals("ServiceTask"))
            {
              ConfigurationModel cModel = task.Deserialize<ConfigurationModel>();
              <tr>
                <td>@task.TaskData.ID</td>
                <td>@cModel.Service.Name</td>
                <td>@task.TaskData.Creator.Username</td>
                <td>@(task.TaskData.Resolver != null && taskStatus != TaskStatus.Cancelled && taskStatus != TaskStatus.Declined ? task.TaskData.Resolver.Username : null)</td>
                <td>@(taskStatus == TaskStatus.Done || taskStatus == TaskStatus.Cancelled || taskStatus == TaskStatus.Declined ? task.TaskData.Resolver.Username : null)</td>
                <td>@task.TaskData.TaskAction</td>
                <td><span class="label label-sm @label">@taskStatus</span></td>
                <td>@task.TaskData.Created.ToString("dd-MMM-yyyy")</td>
                <td>@(taskStatus == TaskStatus.Done ? task.TaskData.Updated.ToString("dd-MMM-yyyy") : null)</td>
                <td>
                  @if (isOwner && taskStatus != TaskStatus.Done && taskStatus != TaskStatus.Declined && taskStatus != TaskStatus.Cancelled)
                  {
                    <a href="/task/@task.TaskData.ID" target="_blank" class="btn default btn-sm @(isMerchant ? "blue" : "purple")">
                      <i class="fa fa-edit"></i> Edit
                    </a>
                  }
                  else if (isCreator || isAdministrator)
                  {
                    <a href="/task/@task.TaskData.ID" target="_blank" class="btn default btn-sm black">
                      <i class="fa fa-eye"></i> View
                    </a>
                  }
                  @if ((isCreator || isAdministrator) && !isMerchant && taskStatus == TaskStatus.Waiting)
                  {
                    <a href="#send_task_modal@(task.TaskData.ID)" class="btn default btn-sm blue" data-toggle="modal" id="btn_assign@(task.TaskData.ID)">
                      <i class="fa fa-share"></i> Assign
                    </a>

                    <div id="send_task_modal@(task.TaskData.ID)" class="modal fade" tabindex="-1" data-backdrop="static" data-keyboard="false">
                      @Html.Partial("~/Views/Task/_Assign.cshtml", task)
                    </div>
                  }
                  @if ((isOwner && taskStatus != TaskStatus.Done && taskStatus != TaskStatus.Declined && taskStatus != TaskStatus.Cancelled))
                  {
                    <a class="cancel-task btn default btn-sm grey-silver" data-task-id="@task.TaskData.ID" data-action="cancel">
                      <i class="fa fa-times"></i> Cancel
                    </a>
                  }
                  @if (isAdministrator && taskStatus == TaskStatus.Requested)
                  {
                    <a class="accept-task btn default btn-sm green-haze" data-task-id="@task.TaskData.ID" data-action="accept">
                      <i class="fa fa-check"></i> Accept
                    </a>
                    <a class="decline-task btn default btn-sm red-pink" data-task-id="@task.TaskData.ID" data-action="decline">
                      <i class="fa fa-ban"></i> Decline
                    </a>
                  }
                </td>
              </tr>
            }
          }
        }
      </tbody>
    </table>
          }
}