using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ContentGroupTypeContentTypeMapManager : IContentGroupTypeContentTypeMapManager
  {

		public List<ContentGroupTypeContentTypeMap> Load(ContentGroupType contentGroupType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroupType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(IConnectionInfo connection, ContentGroupType contentGroupType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroupType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroupType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(ISqlConnectionInfo connection, ContentGroupType contentGroupType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cgtctm].ContentGrouptTypeID = @ContentGroupTypeID";
			parameters.Arguments.Add("ContentGroupTypeID", contentGroupType.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroupTypeContentTypeMap> Load(ContentType contentType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(IConnectionInfo connection, ContentType contentType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(ISqlConnectionInfo connection, ContentType contentType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cgctm].ContentTypeID = @ContentTypeID";
			parameters.Arguments.Add("ContentTypeID", contentType.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<ContentGroupTypeContentTypeMap> Load(ContentGroupType contentGroupType, ContentType contentType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroupType, contentType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(IConnectionInfo connection, ContentGroupType contentGroupType, ContentType contentType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroupType, contentType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroupType, contentType);
		}

		public List<ContentGroupTypeContentTypeMap> Load(ISqlConnectionInfo connection, ContentGroupType contentGroupType, ContentType contentType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[cgctm].ContentGroupTypeID = @ContentGroupTypeID AND [cgctm].ContentTypeID = @ContentTypeID";
			parameters.Arguments.Add("ContentGroupTypeID", contentGroupType.ID);
			parameters.Arguments.Add("ContentTypeID", contentType.ID);
			return this.LoadMany(connection, parameters);
		}

  }
}

