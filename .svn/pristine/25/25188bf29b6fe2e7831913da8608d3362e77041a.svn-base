using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ImageContentDataTable : TableBase<ImageContentData>
  {
    public static string GetColumnNames()
    {
      return TableBase<ImageContentData>.GetColumnNames(string.Empty, ImageContentDataTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ImageContentData>.GetColumnNames(tablePrefix, ImageContentDataTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ImageContentDataID = new ColumnDescription("ImageContentDataID", 0, typeof(int));
			public static readonly ColumnDescription ImageContentID = new ColumnDescription("ImageContentID", 1, typeof(int));
			public static readonly ColumnDescription VideoConversionProfileEntryID = new ColumnDescription("VideoConversionProfileEntryID", 2, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 3, typeof(byte[]));
			public static readonly ColumnDescription Width = new ColumnDescription("Width", 4, typeof(int));
			public static readonly ColumnDescription Height = new ColumnDescription("Height", 5, typeof(int));
			public static readonly ColumnDescription Size = new ColumnDescription("Size", 6, typeof(int));
			public static readonly ColumnDescription IsOriginal = new ColumnDescription("IsOriginal", 7, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 8, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 9, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ImageContentDataID,
				ImageContentID,
				VideoConversionProfileEntryID,
				Data,
				Width,
				Height,
				Size,
				IsOriginal,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ImageContentDataTable(SqlQuery query) : base(query) { }
    public ImageContentDataTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ImageContentDataID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ImageContentDataID)); } }
		public int ImageContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ImageContentID)); } }
		
		public int? VideoConversionProfileEntryID 
		{
			get
			{
				int index = this.GetIndex(Columns.VideoConversionProfileEntryID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public int Width { get { return this.Reader.GetInt32(this.GetIndex(Columns.Width)); } }
		public int Height { get { return this.Reader.GetInt32(this.GetIndex(Columns.Height)); } }
		public int Size { get { return this.Reader.GetInt32(this.GetIndex(Columns.Size)); } }
		public bool IsOriginal { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsOriginal)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ImageContentData CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ImageContentData(this.ImageContentDataID,new ImageContent(this.ImageContentID), (VideoConversionProfileEntryID.HasValue ? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID.Value) : null), this.Data,this.Width,this.Height,this.Size,this.IsOriginal,this.Updated,this.Created); 
		}
		public ImageContentData CreateInstance(ImageContent imageContent)  
		{ 
			if (!this.HasData) return null;
			return new ImageContentData(this.ImageContentDataID,imageContent ?? new ImageContent(this.ImageContentID), (VideoConversionProfileEntryID.HasValue ? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID.Value) : null), this.Data,this.Width,this.Height,this.Size,this.IsOriginal,this.Updated,this.Created); 
		}
		public ImageContentData CreateInstance(VideoConversionProfileEntry videoConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new ImageContentData(this.ImageContentDataID,new ImageContent(this.ImageContentID), videoConversionProfileEntry ?? (this.VideoConversionProfileEntryID.HasValue ? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID.Value) : null), this.Data,this.Width,this.Height,this.Size,this.IsOriginal,this.Updated,this.Created); 
		}
		public ImageContentData CreateInstance(ImageContent imageContent, VideoConversionProfileEntry videoConversionProfileEntry)  
		{ 
			if (!this.HasData) return null;
			return new ImageContentData(this.ImageContentDataID,imageContent ?? new ImageContent(this.ImageContentID), videoConversionProfileEntry ?? (this.VideoConversionProfileEntryID.HasValue ? new VideoConversionProfileEntry(this.VideoConversionProfileEntryID.Value) : null), this.Data,this.Width,this.Height,this.Size,this.IsOriginal,this.Updated,this.Created); 
		}
		

  }
}

