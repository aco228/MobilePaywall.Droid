using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ShortMessageTable : TableBase<ShortMessage>
  {
    public static string GetColumnNames()
    {
      return TableBase<ShortMessage>.GetColumnNames(string.Empty, ShortMessageTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ShortMessage>.GetColumnNames(tablePrefix, ShortMessageTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ShortMessageID = new ColumnDescription("ShortMessageID", 0, typeof(int));
			public static readonly ColumnDescription ShortMessageGuid = new ColumnDescription("ShortMessageGuid", 1, typeof(Guid));
			public static readonly ColumnDescription ShortMessageProviderID = new ColumnDescription("ShortMessageProviderID", 2, typeof(int));
			public static readonly ColumnDescription CustomerID = new ColumnDescription("CustomerID", 3, typeof(int));
			public static readonly ColumnDescription Text = new ColumnDescription("Text", 4, typeof(string));
			public static readonly ColumnDescription ReferenceID = new ColumnDescription("ReferenceID", 5, typeof(string));
			public static readonly ColumnDescription ShortMessageStatusID = new ColumnDescription("ShortMessageStatusID", 6, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ShortMessageID,
				ShortMessageGuid,
				ShortMessageProviderID,
				CustomerID,
				Text,
				ReferenceID,
				ShortMessageStatusID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ShortMessageTable(SqlQuery query) : base(query) { }
    public ShortMessageTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ShortMessageID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageID)); } }
		public Guid ShortMessageGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.ShortMessageGuid)); } }
		public int ShortMessageProviderID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageProviderID)); } }
		public int CustomerID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomerID)); } }
		public string Text { get { return this.Reader.GetString(this.GetIndex(Columns.Text)); } }
		
		public string ReferenceID 
		{
			get
			{
				int index = this.GetIndex(Columns.ReferenceID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public int ShortMessageStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageStatusID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ShortMessage CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ShortMessage(this.ShortMessageID,this.ShortMessageGuid,new ShortMessageProvider(this.ShortMessageProviderID), new Customer(this.CustomerID), this.Text,this.ReferenceID,(ShortMessageStatus)this.ShortMessageStatusID,this.Updated,this.Created); 
		}
		public ShortMessage CreateInstance(Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessage(this.ShortMessageID,this.ShortMessageGuid,new ShortMessageProvider(this.ShortMessageProviderID), customer ?? new Customer(this.CustomerID), this.Text,this.ReferenceID,(ShortMessageStatus)this.ShortMessageStatusID,this.Updated,this.Created); 
		}
		public ShortMessage CreateInstance(ShortMessageProvider shortMessageProvider)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessage(this.ShortMessageID,this.ShortMessageGuid,shortMessageProvider ?? new ShortMessageProvider(this.ShortMessageProviderID), new Customer(this.CustomerID), this.Text,this.ReferenceID,(ShortMessageStatus)this.ShortMessageStatusID,this.Updated,this.Created); 
		}
		public ShortMessage CreateInstance(ShortMessageProvider shortMessageProvider, Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessage(this.ShortMessageID,this.ShortMessageGuid,shortMessageProvider ?? new ShortMessageProvider(this.ShortMessageProviderID), customer ?? new Customer(this.CustomerID), this.Text,this.ReferenceID,(ShortMessageStatus)this.ShortMessageStatusID,this.Updated,this.Created); 
		}
		

  }
}

