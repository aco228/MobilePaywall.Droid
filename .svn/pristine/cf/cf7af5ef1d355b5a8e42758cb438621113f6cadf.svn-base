using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

namespace MobilePaywall.Data
{
  public partial interface ITimelineManager : IDataManager<Timeline> 
  {
	

  }

  public partial class Timeline : MobilePaywallObject<ITimelineManager> 
  {
		private TimelineType _timelineType;
		private Instance _instance;
		private Application _application;
		private Merchant _merchant;
		private Service _service;
		private Client _client;
		private string _text = String.Empty;
		

		public TimelineType TimelineType  { get { return this._timelineType; } set { this._timelineType = value; } }
		public Instance Instance 
		{
			get
			{
				if (this._instance != null &&
						this._instance.IsEmpty)
					if (this.ConnectionContext != null)
						this._instance = Instance.CreateManager().LazyLoad(this.ConnectionContext, this._instance.ID) as Instance;
					else
						this._instance = Instance.CreateManager().LazyLoad(this._instance.ID) as Instance;
				return this._instance;
			}
			set { _instance = value; }
		}

		public Application Application 
		{
			get
			{
				if (this._application != null &&
						this._application.IsEmpty)
					if (this.ConnectionContext != null)
						this._application = Application.CreateManager().LazyLoad(this.ConnectionContext, this._application.ID) as Application;
					else
						this._application = Application.CreateManager().LazyLoad(this._application.ID) as Application;
				return this._application;
			}
			set { _application = value; }
		}

		public Merchant Merchant 
		{
			get
			{
				if (this._merchant != null &&
						this._merchant.IsEmpty)
					if (this.ConnectionContext != null)
						this._merchant = Merchant.CreateManager().LazyLoad(this.ConnectionContext, this._merchant.ID) as Merchant;
					else
						this._merchant = Merchant.CreateManager().LazyLoad(this._merchant.ID) as Merchant;
				return this._merchant;
			}
			set { _merchant = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public string Text{ get {return this._text; } set { this._text = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Timeline()
    { 
    }

    public Timeline(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Timeline(int id,  TimelineType timelineType, Instance instance, Application application, Merchant merchant, Service service, Client client, string text, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._timelineType = timelineType;
			this._instance = instance;
			this._application = application;
			this._merchant = merchant;
			this._service = service;
			this._client = client;
			this._text = text;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Timeline(-1,  this.TimelineType, this.Instance, this.Application, this.Merchant, this.Service, this.Client,this.Text, DateTime.Now, DateTime.Now);
    }
  }
}

