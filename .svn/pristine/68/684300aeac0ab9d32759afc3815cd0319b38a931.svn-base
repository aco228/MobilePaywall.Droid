using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PublishSessionTable : TableBase<PublishSession>
  {
    public static string GetColumnNames()
    {
      return TableBase<PublishSession>.GetColumnNames(string.Empty, PublishSessionTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<PublishSession>.GetColumnNames(tablePrefix, PublishSessionTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PublishSessionID = new ColumnDescription("PublishSessionID", 0, typeof(int));
			public static readonly ColumnDescription ClientID = new ColumnDescription("ClientID", 1, typeof(int));
			public static readonly ColumnDescription ApplicationID = new ColumnDescription("ApplicationID", 2, typeof(int));
			public static readonly ColumnDescription IsSuccessfull = new ColumnDescription("IsSuccessfull", 3, typeof(bool));
			public static readonly ColumnDescription ElapsedTime = new ColumnDescription("ElapsedTime", 4, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PublishSessionID,
				ClientID,
				ApplicationID,
				IsSuccessfull,
				ElapsedTime,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PublishSessionTable(SqlQuery query) : base(query) { }
    public PublishSessionTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PublishSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PublishSessionID)); } }
		public int ClientID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientID)); } }
		public int ApplicationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ApplicationID)); } }
		public bool IsSuccessfull { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsSuccessfull)); } }
		
		public string ElapsedTime 
		{
			get
			{
				int index = this.GetIndex(Columns.ElapsedTime);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public PublishSession CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new PublishSession(this.PublishSessionID,new Client(this.ClientID), new Application(this.ApplicationID), this.IsSuccessfull,this.ElapsedTime,this.Updated,this.Created); 
		}
		public PublishSession CreateInstance(Application application)  
		{ 
			if (!this.HasData) return null;
			return new PublishSession(this.PublishSessionID,new Client(this.ClientID), application ?? new Application(this.ApplicationID), this.IsSuccessfull,this.ElapsedTime,this.Updated,this.Created); 
		}
		public PublishSession CreateInstance(Client client)  
		{ 
			if (!this.HasData) return null;
			return new PublishSession(this.PublishSessionID,client ?? new Client(this.ClientID), new Application(this.ApplicationID), this.IsSuccessfull,this.ElapsedTime,this.Updated,this.Created); 
		}
		public PublishSession CreateInstance(Client client, Application application)  
		{ 
			if (!this.HasData) return null;
			return new PublishSession(this.PublishSessionID,client ?? new Client(this.ClientID), application ?? new Application(this.ApplicationID), this.IsSuccessfull,this.ElapsedTime,this.Updated,this.Created); 
		}
		

  }
}

