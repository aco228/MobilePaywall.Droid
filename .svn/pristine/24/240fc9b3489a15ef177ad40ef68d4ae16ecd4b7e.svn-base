using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IVideoConversionProfileEntryManager : IDataManager<VideoConversionProfileEntry> 
  {
	

  }

  public partial class VideoConversionProfileEntry : MobilePaywallObject<IVideoConversionProfileEntryManager> 
  {
		private VideoConversionProfile _videoConversionProfile;
		private VisualMediaDimensions _visualMediaDimensions;
		private VideoCodec _videoCodec;
		

		public VideoConversionProfile VideoConversionProfile 
		{
			get
			{
				if (this._videoConversionProfile != null &&
						this._videoConversionProfile.IsEmpty)
					if (this.ConnectionContext != null)
						this._videoConversionProfile = VideoConversionProfile.CreateManager().LazyLoad(this.ConnectionContext, this._videoConversionProfile.ID) as VideoConversionProfile;
					else
						this._videoConversionProfile = VideoConversionProfile.CreateManager().LazyLoad(this._videoConversionProfile.ID) as VideoConversionProfile;
				return this._videoConversionProfile;
			}
			set { _videoConversionProfile = value; }
		}

		public VisualMediaDimensions VisualMediaDimensions 
		{
			get
			{
				if (this._visualMediaDimensions != null &&
						this._visualMediaDimensions.IsEmpty)
					if (this.ConnectionContext != null)
						this._visualMediaDimensions = VisualMediaDimensions.CreateManager().LazyLoad(this.ConnectionContext, this._visualMediaDimensions.ID) as VisualMediaDimensions;
					else
						this._visualMediaDimensions = VisualMediaDimensions.CreateManager().LazyLoad(this._visualMediaDimensions.ID) as VisualMediaDimensions;
				return this._visualMediaDimensions;
			}
			set { _visualMediaDimensions = value; }
		}

		public VideoCodec VideoCodec 
		{
			get
			{
				if (this._videoCodec != null &&
						this._videoCodec.IsEmpty)
					if (this.ConnectionContext != null)
						this._videoCodec = VideoCodec.CreateManager().LazyLoad(this.ConnectionContext, this._videoCodec.ID) as VideoCodec;
					else
						this._videoCodec = VideoCodec.CreateManager().LazyLoad(this._videoCodec.ID) as VideoCodec;
				return this._videoCodec;
			}
			set { _videoCodec = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public VideoConversionProfileEntry()
    { 
    }

    public VideoConversionProfileEntry(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public VideoConversionProfileEntry(int id,  VideoConversionProfile videoConversionProfile, VisualMediaDimensions visualMediaDimensions, VideoCodec videoCodec, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._videoConversionProfile = videoConversionProfile;
			this._visualMediaDimensions = visualMediaDimensions;
			this._videoCodec = videoCodec;
			
    }

    public override object Clone(bool deepClone)
    {
      return new VideoConversionProfileEntry(-1,  this.VideoConversionProfile, this.VisualMediaDimensions, this.VideoCodec, DateTime.Now, DateTime.Now);
    }
  }
}

