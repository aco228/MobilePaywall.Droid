using log4net;
using MobilePaywall.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;

namespace MobilePaywall.Web.Controllers._Specific.MY
{
  public class MYAltrecoController : Controller
  {
    #region #logging#
    private static ILog _log = null;

    protected static ILog Log
    {
      get
      {
        if (MYAltrecoController._log == null)
          MYAltrecoController._log = LogManager.GetLogger(typeof(MYAltrecoController));
        return MYAltrecoController._log;
      }
    }
    #endregion
    // GET: MYAltreco
    public ActionResult Index()
    {
      string msisdn = Request["msisdn"] != null ? this.FixNumber(Request["msisdn"].ToString()) : "";
      string returnUrl = Request["returnUrl"] != null ? Request["returnUrl"].ToString() : "http://" + PaywallHttpContext.Current.Service.ServiceData.Name + "/";
      char continueChar = returnUrl.Contains('?') ? '&' : '?';

      if(string.IsNullOrEmpty(msisdn))
      {
        returnUrl +=
          continueChar + "sessionID=" + PaywallHttpContext.Current.Session.SessionData.Guid +
          "&sessionIntID=" + PaywallHttpContext.Current.Session.SessionData.ID +
          "&lang=" + PaywallHttpContext.Current.Service.ServiceData.FallbackCountry.TwoLetterIsoCode +
          "&err=true";
        return Redirect(returnUrl);
      }

      PaywallHttpContext.Current.Session.SessionData.Referrer = Request.UrlReferrer != null ? Request.UrlReferrer.ToString() : null;
      PaywallHttpContext.Current.Session.SessionData.Update();

      Customer customer = Customer.CreateManager().Load(PaywallHttpContext.Current.Service.ServiceData, msisdn, CustomerIdentifier.Msisdn).FirstOrDefault();
      if (customer == null)
      {
        customer = new Customer(-1, Guid.NewGuid(), CustomerStatus.Pending, PaywallHttpContext.Current.Service.ServiceData,
          PaywallHttpContext.Current.Service.ServiceData.FallbackCountry, null, null, msisdn, "", "", new byte[] { 0 }, DateTime.Now, DateTime.Now);
        customer.Insert();
        customer.SetUsernameAndPassword();
      }
      else if (customer.CustomerStatus == CustomerStatus.Active)
        return this.Redirect("/");

      PaywallHttpContext.Current.Session.SessionData.Customer = customer;
      PaywallHttpContext.Current.Session.SessionData.Update();
      (new OLCacher()).Synchronize(PaywallHttpContext.Current.Session.SessionData);

      returnUrl +=
        continueChar + "sessionID=" + PaywallHttpContext.Current.Session.SessionData.Guid +
        "&sessionIntID=" + PaywallHttpContext.Current.Session.SessionData.ID +
        "&lang=" + PaywallHttpContext.Current.Service.ServiceData.FallbackCountry.TwoLetterIsoCode + 
        "&customerID=" + customer.ID + 
        "&err=false";

      return Redirect(returnUrl);
    }

    public ActionResult PostMsisdn()
    {
      string msisdn = Request["msisdn"] != null ? this.FixNumber(Request["msisdn"].ToString()) : "";
      string sessionID = Request["sessionID"] != null ? Request["sessionID"].ToString() : "";
      msisdn = this.FixNumber(msisdn);
      if (string.IsNullOrEmpty(msisdn))
      {
        Log.Error("MYAltreco:: Input is empty");
        return this.Json(new { status = false, message = "Jekk jogħġbok ipprovdi n-numru MSISDN tiegħek" }, JsonRequestBehavior.AllowGet);
      }

      int _sessionID;
      if (!Int32.TryParse(sessionID, out _sessionID))
        return this.Json(new { status = false, message = "no sessionID" }, JsonRequestBehavior.AllowGet);

      UserSession us = UserSession.CreateManager().Load(_sessionID);
      if (us == null)
        return this.Json(new { status = false, message = "no US with id:" + _sessionID }, JsonRequestBehavior.AllowGet);

      PaywallHttpContext.Current.SetTemplateSession(us.Instantiate(PaywallHttpContext.Current.Service));
      
      Customer customer = Customer.CreateManager().Load(PaywallHttpContext.Current.Service.ServiceData, msisdn, CustomerIdentifier.Msisdn).FirstOrDefault();
      if (customer == null)
      {
        customer = new Customer(-1, Guid.NewGuid(), CustomerStatus.Pending, PaywallHttpContext.Current.Service.ServiceData,
          PaywallHttpContext.Current.Service.ServiceData.FallbackCountry, null, null, msisdn, "", "", new byte[] { 0 }, DateTime.Now, DateTime.Now);
        customer.Insert();
        customer.SetUsernameAndPassword();
      }
      else if (customer.CustomerStatus == CustomerStatus.Active)
      {
        Log.Error("MYAltreco:: Active Customer");
        return this.Json(new { status = false, message = "klijent attiva" }, JsonRequestBehavior.AllowGet);
      }

      PaywallHttpContext.Current.Session.SessionData.Customer = customer;
      PaywallHttpContext.Current.Session.SessionData.Update();
      (new OLCacher()).Synchronize(PaywallHttpContext.Current.Session.SessionData);

      return this.Json(new { status = true, message = "success" }, JsonRequestBehavior.AllowGet);
    }

    public string FixNumber(string msisdn)
    {
      msisdn = Regex.Replace(msisdn, "[^0-9]", "");
      if (string.IsNullOrEmpty(msisdn))
        return msisdn;

      if (msisdn.StartsWith("00"))
        msisdn = msisdn.Substring(2);
      if (msisdn[0] == '0')
        msisdn = msisdn.Substring(1);
      if (!msisdn.StartsWith("60"))
        msisdn = "60" + msisdn;
      return msisdn;
    }

  }
}