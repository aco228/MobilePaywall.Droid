using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ContentManager : IContentManager
  {
    public List<Content> Load()
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection);
    }

    public List<Content> Load(IConnectionInfo connection)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection);
    }

    public List<Content> Load(ISqlConnectionInfo connection)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      return this.LoadMany(connection, parameters);
    }

		public List<Content> Load(ContentGroup contentGroup)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroup);
		}

		public List<Content> Load(IConnectionInfo connection, ContentGroup contentGroup)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroup);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroup);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentGroup contentGroup)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[c].ContentGroupID = @ContentGroupID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentGroupID", contentGroup.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentType contentType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentType);
		}

		public List<Content> Load(IConnectionInfo connection, ContentType contentType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentType);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentType contentType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentTypeID = @ContentTypeID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentTypeID", contentType.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentStorage contentStorage)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentStorage);
		}

		public List<Content> Load(IConnectionInfo connection, ContentStorage contentStorage)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentStorage);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentStorage);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentStorage contentStorage)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentStorageID = @ContentStorageID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentGroup contentGroup, ContentType contentType)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroup, contentType);
		}

		public List<Content> Load(IConnectionInfo connection, ContentGroup contentGroup, ContentType contentType)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroup, contentType);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroup, contentType);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentGroup contentGroup, ContentType contentType)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentGroupID = @ContentGroupID AND [c].ContentTypeID = @ContentTypeID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentGroupID", contentGroup.ID);
			parameters.Arguments.Add("ContentTypeID", contentType.ID );
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentGroup contentGroup, ContentStorage contentStorage)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroup, contentStorage);
		}

		public List<Content> Load(IConnectionInfo connection, ContentGroup contentGroup, ContentStorage contentStorage)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroup, contentStorage);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroup, contentStorage);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentGroup contentGroup, ContentStorage contentStorage)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentGroupID = @ContentGroupID AND [c].ContentStorageID = @ContentStorageID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentGroupID", contentGroup.ID);
			parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentGroup contentGroup, ContentType contentType, ContentStorage contentStorage)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentGroup, contentType, contentStorage);
		}

		public List<Content> Load(IConnectionInfo connection, ContentGroup contentGroup, ContentType contentType, ContentStorage contentStorage)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentGroup, contentType, contentStorage);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentGroup, contentType, contentStorage);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentGroup contentGroup, ContentType contentType, ContentStorage contentStorage)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentGroupID = @ContentGroupID AND [c].ContentTypeID = @ContentTypeID AND [c].ContentStorageID = @ContentStorageID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentGroupID", contentGroup.ID);
			parameters.Arguments.Add("ContentType", contentType.ID);
			parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
			return this.LoadMany(connection, parameters);
		}


		public List<Content> Load(ContentType contentType, ContentStorage contentStorage)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, contentType, contentStorage);
		}

		public List<Content> Load(IConnectionInfo connection, ContentType contentType, ContentStorage contentStorage)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, contentType, contentStorage);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, contentType, contentStorage);
		}

		public List<Content> Load(ISqlConnectionInfo connection, ContentType contentType, ContentStorage contentStorage)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[c].ContentTypeID = @ContentTypeID AND [c].ContentStorageID = @ContentStorageID AND [c].IsEnabled=1";
			parameters.Arguments.Add("ContentTypeID", contentType.ID);
			parameters.Arguments.Add("ContentStorageID", contentStorage.ID);
			return this.LoadMany(connection, parameters);
		}


  }
}

