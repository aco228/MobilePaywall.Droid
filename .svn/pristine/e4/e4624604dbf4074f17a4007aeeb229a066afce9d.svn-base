using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentGroupTypeContentTypeMapManager : IDataManager<ContentGroupTypeContentTypeMap> 
  {
	

  }

  public partial class ContentGroupTypeContentTypeMap : MobilePaywallObject<IContentGroupTypeContentTypeMapManager> 
  {
		private ContentGroupType _contentGroupType;
		private ContentType _contentType;
		

		public ContentGroupType ContentGroupType 
		{
			get
			{
				if (this._contentGroupType != null &&
						this._contentGroupType.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentGroupType = ContentGroupType.CreateManager().LazyLoad(this.ConnectionContext, this._contentGroupType.ID) as ContentGroupType;
					else
						this._contentGroupType = ContentGroupType.CreateManager().LazyLoad(this._contentGroupType.ID) as ContentGroupType;
				return this._contentGroupType;
			}
			set { _contentGroupType = value; }
		}

		public ContentType ContentType  { get { return this._contentType; } set { this._contentType = value; } }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ContentGroupTypeContentTypeMap()
    { 
    }

    public ContentGroupTypeContentTypeMap(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ContentGroupTypeContentTypeMap(int id,  ContentGroupType contentGroupType, ContentType contentType, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._contentGroupType = contentGroupType;
			this._contentType = contentType;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ContentGroupTypeContentTypeMap(-1,  this.ContentGroupType, this.ContentType, DateTime.Now, DateTime.Now);
    }
  }
}

