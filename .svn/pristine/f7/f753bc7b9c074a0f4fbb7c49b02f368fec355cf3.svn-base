using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PaymentTable : TableBase<Payment>
  {
    public static string GetColumnNames()
    {
      return TableBase<Payment>.GetColumnNames(string.Empty, PaymentTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Payment>.GetColumnNames(tablePrefix, PaymentTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 0, typeof(int));
			public static readonly ColumnDescription PaymentGuid = new ColumnDescription("PaymentGuid", 1, typeof(Guid));
			public static readonly ColumnDescription PaymentTypeID = new ColumnDescription("PaymentTypeID", 2, typeof(int));
			public static readonly ColumnDescription ExternalPaymentGuid = new ColumnDescription("ExternalPaymentGuid", 3, typeof(Guid));
			public static readonly ColumnDescription PaymentStatusID = new ColumnDescription("PaymentStatusID", 4, typeof(int));
			public static readonly ColumnDescription PaymentRequestID = new ColumnDescription("PaymentRequestID", 5, typeof(int));
			public static readonly ColumnDescription CustomerID = new ColumnDescription("CustomerID", 6, typeof(int));
			public static readonly ColumnDescription ServiceOfferID = new ColumnDescription("ServiceOfferID", 7, typeof(int));
			public static readonly ColumnDescription BusinessModelEntryID = new ColumnDescription("BusinessModelEntryID", 8, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 9, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 10, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PaymentID,
				PaymentGuid,
				PaymentTypeID,
				ExternalPaymentGuid,
				PaymentStatusID,
				PaymentRequestID,
				CustomerID,
				ServiceOfferID,
				BusinessModelEntryID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PaymentTable(SqlQuery query) : base(query) { }
    public PaymentTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PaymentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentID)); } }
		public Guid PaymentGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.PaymentGuid)); } }
		public int PaymentTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentTypeID)); } }
		
		public Guid? ExternalPaymentGuid 
		{
			get
			{
				int index = this.GetIndex(Columns.ExternalPaymentGuid);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetGuid(index);
			}
		}

		public int PaymentStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentStatusID)); } }
		public int PaymentRequestID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentRequestID)); } }
		public int CustomerID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomerID)); } }
		public int ServiceOfferID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceOfferID)); } }
		public int BusinessModelEntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.BusinessModelEntryID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Payment CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(ServiceOffer serviceOffer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(Customer customer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(Customer customer, ServiceOffer serviceOffer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, ServiceOffer serviceOffer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, Customer customer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(Customer customer, ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, Customer customer, ServiceOffer serviceOffer)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		public Payment CreateInstance(PaymentRequest paymentRequest, Customer customer, ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry)  
		{ 
			if (!this.HasData) return null;
			return new Payment(this.PaymentID,this.PaymentGuid,(PaymentType)this.PaymentTypeID,this.ExternalPaymentGuid,(PaymentStatus)this.PaymentStatusID,paymentRequest ?? new PaymentRequest(this.PaymentRequestID), customer ?? new Customer(this.CustomerID), serviceOffer ?? new ServiceOffer(this.ServiceOfferID), businessModelEntry ?? new BusinessModelEntry(this.BusinessModelEntryID), this.Updated,this.Created); 
		}
		

  }
}

