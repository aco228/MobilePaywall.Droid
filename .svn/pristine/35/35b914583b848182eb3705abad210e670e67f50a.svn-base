using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class CustomerTable : TableBase<Customer>
  {
    public static string GetColumnNames()
    {
      return TableBase<Customer>.GetColumnNames(string.Empty, CustomerTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<Customer>.GetColumnNames(tablePrefix, CustomerTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription CustomerID = new ColumnDescription("CustomerID", 0, typeof(int));
			public static readonly ColumnDescription CustomerGuid = new ColumnDescription("CustomerGuid", 1, typeof(Guid));
			public static readonly ColumnDescription CustomerStatusID = new ColumnDescription("CustomerStatusID", 2, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 3, typeof(int));
			public static readonly ColumnDescription CountryID = new ColumnDescription("CountryID", 4, typeof(int));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 5, typeof(int));
			public static readonly ColumnDescription ExternalCustomerGuid = new ColumnDescription("ExternalCustomerGuid", 6, typeof(Guid));
			public static readonly ColumnDescription Msisdn = new ColumnDescription("Msisdn", 7, typeof(string));
			public static readonly ColumnDescription EncryptedMsisdn = new ColumnDescription("EncryptedMsisdn", 8, typeof(string));
			public static readonly ColumnDescription Username = new ColumnDescription("Username", 9, typeof(string));
			public static readonly ColumnDescription EncryptedPassword = new ColumnDescription("EncryptedPassword", 10, typeof(byte[]));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 11, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 12, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				CustomerID,
				CustomerGuid,
				CustomerStatusID,
				ServiceID,
				CountryID,
				MobileOperatorID,
				ExternalCustomerGuid,
				Msisdn,
				EncryptedMsisdn,
				Username,
				EncryptedPassword,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public CustomerTable(SqlQuery query) : base(query) { }
    public CustomerTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int CustomerID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomerID)); } }
		public Guid CustomerGuid { get { return this.Reader.GetGuid(this.GetIndex(Columns.CustomerGuid)); } }
		public int CustomerStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomerStatusID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		public int CountryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CountryID)); } }
		
		public int? MobileOperatorID 
		{
			get
			{
				int index = this.GetIndex(Columns.MobileOperatorID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		
		public Guid? ExternalCustomerGuid 
		{
			get
			{
				int index = this.GetIndex(Columns.ExternalCustomerGuid);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetGuid(index);
			}
		}

		
		public string Msisdn 
		{
			get
			{
				int index = this.GetIndex(Columns.Msisdn);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string EncryptedMsisdn 
		{
			get
			{
				int index = this.GetIndex(Columns.EncryptedMsisdn);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public string Username 
		{
			get
			{
				int index = this.GetIndex(Columns.Username);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		
		public byte[] EncryptedPassword {
			 get
			{
				int index = this.GetIndex(Columns.EncryptedPassword);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public Customer CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,new Service(this.ServiceID), new Country(this.CountryID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Country country)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,new Service(this.ServiceID), country ?? new Country(this.CountryID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,new Service(this.ServiceID), new Country(this.CountryID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,service ?? new Service(this.ServiceID), new Country(this.CountryID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Country country, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,new Service(this.ServiceID), country ?? new Country(this.CountryID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Service service, Country country)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,service ?? new Service(this.ServiceID), country ?? new Country(this.CountryID), (MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Service service, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,service ?? new Service(this.ServiceID), new Country(this.CountryID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		public Customer CreateInstance(Service service, Country country, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new Customer(this.CustomerID,this.CustomerGuid,(CustomerStatus)this.CustomerStatusID,service ?? new Service(this.ServiceID), country ?? new Country(this.CountryID), mobileOperator ?? (this.MobileOperatorID.HasValue ? new MobileOperator(this.MobileOperatorID.Value) : null), this.ExternalCustomerGuid,this.Msisdn,this.EncryptedMsisdn,this.Username,this.EncryptedPassword,this.Updated,this.Created); 
		}
		

  }
}

