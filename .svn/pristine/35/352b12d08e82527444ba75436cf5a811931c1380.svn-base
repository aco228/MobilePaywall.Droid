using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ServiceLookupMethodMapManager : IServiceLookupMethodMapManager
  {

    public ServiceLookupMethodMap Load(Service service, Country country, LookupMethod lookupMethod)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service, country, lookupMethod);
    }

    public ServiceLookupMethodMap Load(IConnectionInfo connection, Service service, Country country, LookupMethod lookupMethod)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service, country, lookupMethod);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service, country, lookupMethod);
    }

    public ServiceLookupMethodMap Load(ISqlConnectionInfo connection, Service service, Country country, LookupMethod lookupMethod)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "slmm.ServiceID=@ServiceID AND slmm.CountryID=@CountryID AND slmm.LookupMethodID = @LookupMethodID";
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("CountryID", country.ID);
      parameters.Arguments.Add("LookupMethodID", (int)lookupMethod);
      return this.Load(connection, parameters);
    }    

    public List<ServiceLookupMethodMap> Load(PaymentConfiguration paymentConfig)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, paymentConfig);
    }

    public List<ServiceLookupMethodMap> Load(IConnectionInfo connection, PaymentConfiguration paymentConfig)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, paymentConfig);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, paymentConfig);
    }

    public List<ServiceLookupMethodMap> Load(ISqlConnectionInfo connection, PaymentConfiguration paymentConfig)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[slmm].PaymentConfigurationID = @PaymentConfigurationID";
      parameters.Arguments.Add("PaymentConfigurationID", paymentConfig.ID);
      return this.LoadMany(connection, parameters);
    }



    public List<ServiceLookupMethodMap> Load(Service service)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service);
    }

    public List<ServiceLookupMethodMap> Load(IConnectionInfo connection, Service service)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service);
    }

    public List<ServiceLookupMethodMap> Load(ISqlConnectionInfo connection, Service service)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[slmm].ServiceID = @ServiceID";
      parameters.Arguments.Add("ServiceID", service.ID);
      return this.LoadMany(connection, parameters);
    }


  }
}

