using Cashflow.Client;
using Cashflow.Message;
using Cashflow.Message.Mobile;
using MobilePaywall.Data;
using MobilePaywall.Data.Sql;
using Senti.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MobilePaywall.Resolve
{
  public class Program
  {
    public static void Main(string[] args)
    {
      Database db = null;
      Cashflow.Data.Sql.Database cDb = null;
      DataLayerRuntime runtime = new DataLayerRuntime();

      Program program = new Program();
      program.Resolve();
    }

    public void Resolve()
    {
      List<ServiceOffer> offers = new List<ServiceOffer>();

      //List<Customer> customers = (from c in Customer.Load() where string.IsNullOrEmpty(c.Msisdn) select c).ToList();

      List<Payment> payments = Payment.CreateManager().Load();
      List<Customer> customers = (from p in payments where string.IsNullOrEmpty(p.Customer.Msisdn) select p.Customer).ToList();
      foreach (Customer customer in customers)
      {
        // aco commented this
        //Cashflow.Data.MobileSubscriber mobileSubscriber = Cashflow.Data.MobileSubscriber.Load(customer.EncryptedMsisdn);
        //if (mobileSubscriber == null || string.IsNullOrEmpty(mobileSubscriber.Msisdn) || this.IsEncrypted(mobileSubscriber.Msisdn))
        //  continue;

        //customer.Msisdn = mobileSubscriber.Msisdn;
        //customer.Update();

        //MobileExtensionClient mobileClient = new MobileExtensionClient();
        //ResolveEncryptedMsisdnRequest resolveRequest =
        //        new ResolveEncryptedMsisdnRequest(RequestMode.Default,
        //                                          customer.Guid.ToString(),
        //                                          offer.PaymentConfiguration.PaymentCredentials.Username,
        //                                          offer.PaymentConfiguration.PaymentCredentials.Password,
        //                                          customer.EncryptedMsisdn,
        //                                          offer.PaymentConfiguration.PaymentInterface.ExternalPaymentInterfaceGuid,
        //                                          customer.Country.TwoLetterIsoCode.ToLower(),
        //                                          offer.PaymentConfiguration.PaymentProvider.ExternalPaymentProviderGuid,
        //                                          null,
        //                                          null);

        //ResolveEncryptedMsisdnResponse resolveResponse = mobileClient.ResolveEncryptedMsisdn(resolveRequest, null);
        //switch (resolveResponse.Status.Code)
        //{
        //  case MessageStatusCode.Success:
        //    if (string.IsNullOrEmpty(resolveResponse.MobileSubscriber.Msisdn))
        //      break;

        //    customer.Msisdn = resolveResponse.MobileSubscriber.Msisdn;
        //    customer.Update();
        //    break;
        //  default:
        //    break;
        //}
      }
    }

    public bool IsEncrypted(string value)
    {
      if (string.IsNullOrEmpty(value))
        return true;

      return !value.All(Char.IsDigit);
    }
  }
}
