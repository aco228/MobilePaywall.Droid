using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPublishSvnLogManager : IDataManager<PublishSvnLog> 
  {
	

  }

  public partial class PublishSvnLog : MobilePaywallObject<IPublishSvnLogManager> 
  {
		private PublishSession _publishSession;
		private Client _client;
		private string _data = String.Empty;
		

		public PublishSession PublishSession 
		{
			get
			{
				if (this._publishSession != null &&
						this._publishSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._publishSession = PublishSession.CreateManager().LazyLoad(this.ConnectionContext, this._publishSession.ID) as PublishSession;
					else
						this._publishSession = PublishSession.CreateManager().LazyLoad(this._publishSession.ID) as PublishSession;
				return this._publishSession;
			}
			set { _publishSession = value; }
		}

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public string Data{ get {return this._data; } set { this._data = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public PublishSvnLog()
    { 
    }

    public PublishSvnLog(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public PublishSvnLog(int id,  PublishSession publishSession, Client client, string data, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._publishSession = publishSession;
			this._client = client;
			this._data = data;
			
    }

    public override object Clone(bool deepClone)
    {
      return new PublishSvnLog(-1,  this.PublishSession, this.Client,this.Data, DateTime.Now, DateTime.Now);
    }
  }
}

