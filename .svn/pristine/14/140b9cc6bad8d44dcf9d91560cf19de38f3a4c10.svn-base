using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;


namespace MobilePaywall.Data
{
  public partial interface IQualityAssuranceReportScreenshotManager : IDataManager<QualityAssuranceReportScreenshot> 
  {
	

  }

  public partial class QualityAssuranceReportScreenshot : MobilePaywallObject<IQualityAssuranceReportScreenshotManager> 
  {
		private QualityAssuranceReport _qualityAssuranceReport;
		private string _title = String.Empty;
		private string _url = String.Empty;
		private string _remark = String.Empty;
		private bool _hasError = false;
		private byte[] _data = null;
		

		public QualityAssuranceReport QualityAssuranceReport 
		{
			get
			{
				if (this._qualityAssuranceReport != null &&
						this._qualityAssuranceReport.IsEmpty)
					if (this.ConnectionContext != null)
						this._qualityAssuranceReport = QualityAssuranceReport.CreateManager().LazyLoad(this.ConnectionContext, this._qualityAssuranceReport.ID) as QualityAssuranceReport;
					else
						this._qualityAssuranceReport = QualityAssuranceReport.CreateManager().LazyLoad(this._qualityAssuranceReport.ID) as QualityAssuranceReport;
				return this._qualityAssuranceReport;
			}
			set { _qualityAssuranceReport = value; }
		}

		public string Title{ get {return this._title; } set { this._title = value;} }
		public string Url{ get {return this._url; } set { this._url = value;} }
		public string Remark{ get {return this._remark; } set { this._remark = value;} }
		public bool HasError {get {return this._hasError; } set { this._hasError = value;} }
		public byte[] Data { get { return this._data; } set { this._data = value;}  }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return true;} }

    public override bool IsUpdatable { get { return true;} }

    public QualityAssuranceReportScreenshot()
    { 
    }

    public QualityAssuranceReportScreenshot(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public QualityAssuranceReportScreenshot(int id,  QualityAssuranceReport qualityAssuranceReport, string title, string url, string remark, bool hasError, byte[] data, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._qualityAssuranceReport = qualityAssuranceReport;
			this._title = title;
			this._url = url;
			this._remark = remark;
			this._hasError = hasError;
			this._data = data;
			
    }

    public override object Clone(bool deepClone)
    {
      return new QualityAssuranceReportScreenshot(-1,  this.QualityAssuranceReport,this.Title,this.Url,this.Remark,this.HasError,this.Data, DateTime.Now, DateTime.Now);
    }
  }
}

