using MobilePaywall.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MobilePaywall.CustomerCare.Models
{
  public class ClientEditModel
  {
    private Client _client = null;
    private static List<Instance> _instances = null;
    private static List<Data.Application> _applications = null;
    private static List<MobilePaywall.Data.Merchant> _merhcants = null;
    private static List<Product> _products = null;
    private static List<Service> _services = null;

    #region Static Properties

    public static List<Instance> Instances
    {
      get
      {
        if (_instances == null)
          _instances = Instance.CreateManager().Load();
        return _instances;
      }
    }
    public static List<Data.Application> Applications
    {
      get
      {
        if (_applications == null)
          _applications = Data.Application.CreateManager().Load();
        return _applications;
      }
    }
    public static List<MobilePaywall.Data.Merchant> Merchants
    {
      get
      {
        if (_merhcants == null)
          _merhcants = MobilePaywall.Data.Merchant.CreateManager().Load();
        return _merhcants;
      }
    }
    public static List<Product> Products
    {
      get
      {
        if (_products == null)
          _products = Product.CreateManager().Load();
        return _products;
      }
    }
    public static List<Service> Services
    {
      get
      {
        if (_services == null)
          _services = Service.CreateManager().Load();
        return _services;
      }
    }

    #endregion

    public List<ClientType> ClienTypes { get; set; }
    public Client Client { get { return this._client; } set { this._client = value; } }
    public List<Component> Components { get; set; }
    public List<ClientAccessPolicy> AccessPolicy { get; set; }
    public List<ClientComponentAccessPolicy> ComponentsAccessPolicy { get; set; }

    public ClientEditModel()
    {
      this.ClienTypes = ClientType.CreateManager().Load();
      this.Components = Component.CreateManager().Load();
    }

    public string HasComponentAccess(Component component)
    {
      foreach (ClientComponentAccessPolicy ccap in this.ComponentsAccessPolicy)
        if (ccap.Component.ID == component.ID && ccap.AccessMode == AccessMode.Allowed)
          return "checked";
      return string.Empty;
    }

  }
}

