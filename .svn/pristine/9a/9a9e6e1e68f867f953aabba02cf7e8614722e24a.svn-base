using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPaymentRequestManager : IDataManager<PaymentRequest> 
  {
	

  }

  public partial class PaymentRequest : MobilePaywallObject<IPaymentRequestManager> 
  {
		private Guid _guid;
		private PaymentType _paymentType;
		private PaymentRequestStatus _paymentRequestStatus;
		private LookupSession _lookupSession;
		private Customer _customer;
		private UserSession _userSession;
		private ServiceOffer _serviceOffer;
		private BusinessModelEntry _businessModelEntry;
		private Guid? _externalPaymentRequestGuid;
		private UserHttpRequest _userHttpRequest;
		private string _paymentRedirectUrl = String.Empty;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public PaymentType PaymentType  { get { return this._paymentType; } set { this._paymentType = value; } }
		public PaymentRequestStatus PaymentRequestStatus  { get { return this._paymentRequestStatus; } set { this._paymentRequestStatus = value; } }
		public LookupSession LookupSession 
		{
			get
			{
				if (this._lookupSession != null &&
						this._lookupSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._lookupSession = LookupSession.CreateManager().LazyLoad(this.ConnectionContext, this._lookupSession.ID) as LookupSession;
					else
						this._lookupSession = LookupSession.CreateManager().LazyLoad(this._lookupSession.ID) as LookupSession;
				return this._lookupSession;
			}
			set { _lookupSession = value; }
		}

		public Customer Customer 
		{
			get
			{
				if (this._customer != null &&
						this._customer.IsEmpty)
					if (this.ConnectionContext != null)
						this._customer = Customer.CreateManager().LazyLoad(this.ConnectionContext, this._customer.ID) as Customer;
					else
						this._customer = Customer.CreateManager().LazyLoad(this._customer.ID) as Customer;
				return this._customer;
			}
			set { _customer = value; }
		}

		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public ServiceOffer ServiceOffer 
		{
			get
			{
				if (this._serviceOffer != null &&
						this._serviceOffer.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this.ConnectionContext, this._serviceOffer.ID) as ServiceOffer;
					else
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this._serviceOffer.ID) as ServiceOffer;
				return this._serviceOffer;
			}
			set { _serviceOffer = value; }
		}

		public BusinessModelEntry BusinessModelEntry 
		{
			get
			{
				if (this._businessModelEntry != null &&
						this._businessModelEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this.ConnectionContext, this._businessModelEntry.ID) as BusinessModelEntry;
					else
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this._businessModelEntry.ID) as BusinessModelEntry;
				return this._businessModelEntry;
			}
			set { _businessModelEntry = value; }
		}

		public Guid? ExternalPaymentRequestGuid { get { return this._externalPaymentRequestGuid; } set { this._externalPaymentRequestGuid = value;}}
		public UserHttpRequest UserHttpRequest 
		{
			get
			{
				if (this._userHttpRequest != null &&
						this._userHttpRequest.IsEmpty)
					if (this.ConnectionContext != null)
						this._userHttpRequest = UserHttpRequest.CreateManager().LazyLoad(this.ConnectionContext, this._userHttpRequest.ID) as UserHttpRequest;
					else
						this._userHttpRequest = UserHttpRequest.CreateManager().LazyLoad(this._userHttpRequest.ID) as UserHttpRequest;
				return this._userHttpRequest;
			}
			set { _userHttpRequest = value; }
		}

		public string PaymentRedirectUrl{ get {return this._paymentRedirectUrl; } set { this._paymentRedirectUrl = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public PaymentRequest()
    { 
    }

    public PaymentRequest(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public PaymentRequest(int id,  Guid guid, PaymentType paymentType, PaymentRequestStatus paymentRequestStatus, LookupSession lookupSession, Customer customer, UserSession userSession, ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry, Guid? externalPaymentRequestGuid, UserHttpRequest userHttpRequest, string paymentRedirectUrl, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._paymentType = paymentType;
			this._paymentRequestStatus = paymentRequestStatus;
			this._lookupSession = lookupSession;
			this._customer = customer;
			this._userSession = userSession;
			this._serviceOffer = serviceOffer;
			this._businessModelEntry = businessModelEntry;
			this._externalPaymentRequestGuid = externalPaymentRequestGuid;
			this._userHttpRequest = userHttpRequest;
			this._paymentRedirectUrl = paymentRedirectUrl;
			
    }

    public override object Clone(bool deepClone)
    {
      return new PaymentRequest(-1, this.Guid, this.PaymentType, this.PaymentRequestStatus, this.LookupSession, this.Customer, this.UserSession, this.ServiceOffer, this.BusinessModelEntry,this.ExternalPaymentRequestGuid, this.UserHttpRequest,this.PaymentRedirectUrl, DateTime.Now, DateTime.Now);
    }
  }
}

