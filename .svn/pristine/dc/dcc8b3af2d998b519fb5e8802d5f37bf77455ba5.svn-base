using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(Statistic))]
  public partial class StatisticManager : MobilePaywall.Data.Sql.SqlManagerBase<Statistic>, IStatisticManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override Statistic LoadInternal(ISqlConnectionInfo connection, int id)
    {
      //IDatabase database = connection.Database;
      //if (database == null)
      //	throw new ArgumentNullException("database", "Error initializing database connection.");
      //string sqlCmdText = string.Empty;
      //try
      //{
      //	sqlCmdText = "SELECT " + 
      //				DashboardViewTable.GetColumnNames("[a]") + 
      //				(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[a_i]") : string.Empty) + 
      //				(this.Depth > 0 ? "," + RuntimeTypeTable.GetColumnNames("[a_rt]") : string.Empty) + 
      //		" FROM [core].[DashboardView] AS [a] ";
      //	if (this.Depth > 0)
      //		sqlCmdText += "INNER  JOIN [core].[Instance] AS [a_i] ON [a].[InstanceID] = [a_i].[InstanceID] ";
      //	if (this.Depth > 0)
      //		sqlCmdText += "INNER  JOIN [core].[RuntimeType] AS [a_rt] ON [a].[RuntimeTypeID] = [a_rt].[RuntimeTypeID] ";
      //	sqlCmdText += "WHERE [a].[DashboardViewID] = @DashboardViewID;";

      //	SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewID", id);
      //	SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

      //	if (!sqlReader.HasRows || !sqlReader.Read())
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "loadinternal", "notfound"), "DashboardView could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
      //		if (this.Logger.IsWarnEnabled)
      //			this.Logger.Warn(builder.ToString());
      //		sqlReader.Close();
      //		return null;
      //	}

      //	SqlQuery query = new SqlQuery(sqlReader);

      //	DashboardViewTable aTable = new DashboardViewTable(query);
      //	InstanceTable a_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
      //	RuntimeTypeTable a_rtTable = (this.Depth > 0) ? new RuntimeTypeTable(query) : null;


      //	Instance a_iObject = (this.Depth > 0) ? a_iTable.CreateInstance() : null;
      //	RuntimeType a_rtObject = (this.Depth > 0) ? a_rtTable.CreateInstance() : null;
      //	DashboardView aObject = aTable.CreateInstance(a_iObject, a_rtObject);
      //	sqlReader.Close();

      //	return aObject;

      //}
      //catch (Exception ex)
      //{
      //	database.HandleException(ex);
      //	IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "loadinternal", "exception"), "DashboardView could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
      //	if (this.Logger.IsErrorEnabled)
      //		this.Logger.Error(builder.ToString(), ex);
      //	throw new DataOperationException(DataOperation.Load, "DashboardView", "Exception while loading DashboardView object from database. See inner exception for details.", ex);
      //}

      return null;
    }

    public Statistic Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      //IDatabase database = connection.Database;
      //if (database == null)
      //	throw new ArgumentNullException("database", "Error initializing database connection.");
      //if (parameters == null)
      //	throw new ArgumentNullException("parameters");
      //string sqlCmdText = string.Empty;
      //try
      //{
      //	sqlCmdText = "SELECT {0} " + 
      //				DashboardViewTable.GetColumnNames("[a]") + 
      //				(this.Depth > 0 ? "," + InstanceTable.GetColumnNames("[a_i]") : string.Empty) + 
      //				(this.Depth > 0 ? "," + RuntimeTypeTable.GetColumnNames("[a_rt]") : string.Empty) +  
      //		" FROM [core].[DashboardView] AS [a] ";
      //	if (this.Depth > 0)
      //		sqlCmdText += "INNER  JOIN [core].[Instance] AS [a_i] ON [a].[InstanceID] = [a_i].[InstanceID] ";
      //	if (this.Depth > 0)
      //		sqlCmdText += "INNER  JOIN [core].[RuntimeType] AS [a_rt] ON [a].[RuntimeTypeID] = [a_rt].[RuntimeTypeID] ";


      //	parameters.Top = 1;
      //	sqlCmdText = parameters.BuildQuery(sqlCmdText);       
      //	SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
      //	foreach (KeyValuePair<string, object> argument in parameters.Arguments)
      //		sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

      //	SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

      //	if (!sqlReader.HasRows || !sqlReader.Read())
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "customload", "notfound"), "DashboardView could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
      //		if (this.Logger.IsDebugEnabled)
      //			this.Logger.Debug(builder.ToString());
      //		sqlReader.Close();
      //		return null;
      //	}

      //	SqlQuery query = new SqlQuery(sqlReader);

      //	DashboardViewTable aTable = new DashboardViewTable(query);
      //	InstanceTable a_iTable = (this.Depth > 0) ? new InstanceTable(query) : null;
      //	RuntimeTypeTable a_rtTable = (this.Depth > 0) ? new RuntimeTypeTable(query) : null;


      //	Instance a_iObject = (this.Depth > 0) ? a_iTable.CreateInstance() : null;
      //	RuntimeType a_rtObject = (this.Depth > 0) ? a_rtTable.CreateInstance() : null;
      //	DashboardView aObject = aTable.CreateInstance(a_iObject, a_rtObject);
      //	sqlReader.Close();

      //	return aObject;

      //}
      //catch (Exception ex)
      //{
      //	database.HandleException(ex);
      //	IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "customload", "exception"), "DashboardView could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
      //	if (this.Logger.IsErrorEnabled)
      //		this.Logger.Error(builder.ToString(), ex);
      //	throw new DataOperationException(DataOperation.Load, "DashboardView", "Exception while loading (custom/single) DashboardView object from database. See inner exception for details.", ex);
      //}

      return null;
    }

    public List<Statistic> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " +
              StatisticTable.GetColumnNames("[s]") +
          " FROM [core].[Statistic] AS [s] WITH (NOLOCK) ";

        sqlCmdText = parameters.BuildQuery(sqlCmdText);
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "customloadmany", "notfound"), "DashboardView list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<Statistic>();
        }

        SqlQuery query = new SqlQuery(sqlReader);
        StatisticTable aTable = new StatisticTable(query);
        List<Statistic> result = new List<Statistic>();
        do
        {
          Statistic aObject = (this.Depth > -1) ? aTable.CreateInstance() : null;
          result.Add(aObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "customloadmany", "exception"), "DashboardView list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "DashboardView", "Exception while loading (custom/many) DashboardView object from database. See inner exception for details.", ex);
      }
    }

    public override int? Insert(ISqlConnectionInfo connection, Statistic data)
    {
      //IDatabase database = connection.Database;
      //if (database == null)
      //	throw new ArgumentNullException("database", "Error initializing database connection.");
      //if (data == null)
      //	throw new ArgumentNullException("data");
      //string sqlCmdText = string.Empty;
      //try
      //{
      //	sqlCmdText = "INSERT INTO [core].[DashboardView] ([InstanceID],[DashboardViewTypeID],[RuntimeTypeID],[Name],[DashboardViewName]) VALUES(@InstanceID,@DashboardViewTypeID,@RuntimeTypeID,@Name,@DashboardViewName); SELECT SCOPE_IDENTITY();";
      //	SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;

      //	sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance.ID);
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewTypeID", (int)data.DashboardViewType);
      //	sqlCmd.Parameters.AddWithValue("@RuntimeTypeID", data.RuntimeType.ID);
      //	sqlCmd.Parameters.AddWithValue("@Name", data.Name).SqlDbType = SqlDbType.NVarChar;
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewName", data.DashboardViewName).SqlDbType = SqlDbType.NVarChar;

      //	object idObj = sqlCmd.ExecuteScalar();
      //	if (idObj == null || DBNull.Value.Equals(idObj))
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "insert", "noprimarykey"), "DashboardView could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
      //		if (this.Logger.IsErrorEnabled)
      //			this.Logger.Error(builder.ToString());
      //		throw new DataOperationException(DataOperation.Insert, "DashboardView", "Exception while inserting DashboardView object in database.");
      //	}
      //	return (int)((decimal)idObj);
      //}
      //catch (Exception ex)
      //{
      //	database.HandleException(ex);
      //	IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "insert", "exception"), "DashboardView could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
      //	if (this.Logger.IsErrorEnabled)
      //		this.Logger.Error(builder.ToString(), ex);
      //	throw new DataOperationException(DataOperation.Insert, "DashboardView", "Exception while inserting DashboardView object in database. See inner exception for details.", ex);
      //}
      return null;
    }

    public override bool Update(ISqlConnectionInfo connection, Statistic data)
    {
      //IDatabase database = connection.Database;
      //if (database == null)
      //	throw new ArgumentNullException("database", "Error initializing database connection.");
      //if (data == null)
      //	throw new ArgumentNullException("data");
      //string sqlCmdText = string.Empty;
      //try
      //{
      //	data.Updated = DateTime.Now;
      //	sqlCmdText = "UPDATE [core].[DashboardView] SET " +
      //									"[InstanceID] = @InstanceID, " + 
      //									"[DashboardViewTypeID] = @DashboardViewTypeID, " + 
      //									"[RuntimeTypeID] = @RuntimeTypeID, " + 
      //									"[Name] = @Name, " + 
      //									"[DashboardViewName] = @DashboardViewName, " + 
      //									"[Updated] = GETDATE() " + 
      //								"WHERE [DashboardViewID] = @DashboardViewID;";
      //	SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;

      //	sqlCmd.Parameters.AddWithValue("@InstanceID", data.Instance.ID);
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewTypeID", (int)data.DashboardViewType);
      //	sqlCmd.Parameters.AddWithValue("@RuntimeTypeID", data.RuntimeType.ID);
      //	sqlCmd.Parameters.AddWithValue("@Name", data.Name).SqlDbType = SqlDbType.NVarChar;
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewName", data.DashboardViewName).SqlDbType = SqlDbType.NVarChar;
      //	sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewID", data.ID);

      //	int rowCount = sqlCmd.ExecuteNonQuery();
      //	if (rowCount < 1)
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "update", "norecord"), "DashboardView could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
      //		if (this.Logger.IsErrorEnabled)
      //			this.Logger.Error(builder.ToString());
      //		throw new DataOperationException(DataOperation.Update, "DashboardView", "Exception while updating DashboardView object in database. No record found for this id.");
      //	}
      //	else if (rowCount > 1)
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "update", "morerecords"), "DashboardView was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
      //		if (this.Logger.IsFatalEnabled)
      //			this.Logger.Fatal(builder.ToString());
      //		throw new DataOperationException(DataOperation.Update, "DashboardView", "Exception while updating DashboardView object in database. More than one record found for this statement (update statement where clause broken?!).");
      //	}
      //	return true;
      //}
      //catch (Exception ex)
      //{
      //	database.HandleException(ex);
      //	IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "update", "exception"), "DashboardView could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
      //	if (this.Logger.IsErrorEnabled)
      //		this.Logger.Error(builder.ToString(), ex);
      //	throw new DataOperationException(DataOperation.Update, "DashboardView", "Exception while updating DashboardView object in database. See inner exception for details.", ex);
      //}

      return false;
    }

    public override bool Delete(ISqlConnectionInfo connection, Statistic data)
    {
      //IDatabase database = connection.Database;
      //if (database == null)
      //	throw new ArgumentNullException("database", "Error initializing database connection.");
      //if (data == null)
      //	throw new ArgumentNullException("data");
      //string sqlCmdText = string.Empty;
      //try
      //{
      //	sqlCmdText =  "DELETE FROM [core].[DashboardView] WHERE DashboardViewID = @DashboardViewID;";
      //	SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
      //	sqlCmd.Parameters.AddWithValue("@DashboardViewID", data.ID);

      //	int success = sqlCmd.ExecuteNonQuery();

      //	if (success == -1)        
      //	{
      //		IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "delete", "norecord"), "DashboardView could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
      //		if (this.Logger.IsErrorEnabled)
      //			this.Logger.Error(builder.ToString());
      //		throw new DataOperationException(DataOperation.Delete, "DashboardView", "Exception while deleting DashboardView object from database. No such record found.");
      //	}

      //	return true;
      //}
      //catch (Exception ex)
      //{
      //	database.HandleException(ex);
      //	IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("a", "delete", "exception"), "DashboardView could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
      //	if (this.Logger.IsErrorEnabled)
      //		this.Logger.Error(builder.ToString(), ex);
      //	throw new DataOperationException(DataOperation.Delete, "DashboardView", "Exception while deleting DashboardView object from database. See inner exception for details.", ex);
      //}
      return false;
    }
  }
}

