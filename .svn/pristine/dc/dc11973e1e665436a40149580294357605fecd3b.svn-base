using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class DeamonTaskTable : TableBase<DeamonTask>
  {
    public static string GetColumnNames()
    {
      return TableBase<DeamonTask>.GetColumnNames(string.Empty, DeamonTaskTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<DeamonTask>.GetColumnNames(tablePrefix, DeamonTaskTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription DeamonTaskID = new ColumnDescription("DeamonTaskID", 0, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 1, typeof(string));
			public static readonly ColumnDescription Namespace = new ColumnDescription("Namespace", 2, typeof(string));
			public static readonly ColumnDescription DemandKey = new ColumnDescription("DemandKey", 3, typeof(string));
			public static readonly ColumnDescription Day = new ColumnDescription("Day", 4, typeof(int));
			public static readonly ColumnDescription Hour = new ColumnDescription("Hour", 5, typeof(int));
			public static readonly ColumnDescription Minute = new ColumnDescription("Minute", 6, typeof(int));
			public static readonly ColumnDescription LastExecution = new ColumnDescription("LastExecution", 7, typeof(DateTime));
			public static readonly ColumnDescription ExecuteOnlyOnDemand = new ColumnDescription("ExecuteOnlyOnDemand", 8, typeof(bool));
			public static readonly ColumnDescription IsRunning = new ColumnDescription("IsRunning", 9, typeof(bool));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 10, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 11, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 12, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				DeamonTaskID,
				Name,
				Namespace,
				DemandKey,
				Day,
				Hour,
				Minute,
				LastExecution,
				ExecuteOnlyOnDemand,
				IsRunning,
				IsActive,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public DeamonTaskTable(SqlQuery query) : base(query) { }
    public DeamonTaskTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int DeamonTaskID { get { return this.Reader.GetInt32(this.GetIndex(Columns.DeamonTaskID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		public string Namespace { get { return this.Reader.GetString(this.GetIndex(Columns.Namespace)); } }
		
		public string DemandKey 
		{
			get
			{
				int index = this.GetIndex(Columns.DemandKey);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public int Day { get { return this.Reader.GetInt32(this.GetIndex(Columns.Day)); } }
		public int Hour { get { return this.Reader.GetInt32(this.GetIndex(Columns.Hour)); } }
		public int Minute { get { return this.Reader.GetInt32(this.GetIndex(Columns.Minute)); } }
		
		public DateTime? LastExecution 
		{
			get
			{
				int index = this.GetIndex(Columns.LastExecution);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		public bool ExecuteOnlyOnDemand { get { return this.Reader.GetBoolean(this.GetIndex(Columns.ExecuteOnlyOnDemand)); } }
		public bool IsRunning { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsRunning)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public DeamonTask CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new DeamonTask(this.DeamonTaskID,this.Name,this.Namespace,this.DemandKey,this.Day,this.Hour,this.Minute,this.LastExecution,this.ExecuteOnlyOnDemand,this.IsRunning,this.IsActive,this.Updated,this.Created); 
		}
		

  }
}

