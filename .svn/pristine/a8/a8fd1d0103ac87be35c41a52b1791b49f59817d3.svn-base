using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IClientComponentAccessPolicyManager : IDataManager<ClientComponentAccessPolicy> 
  {
  }

  public partial class ClientComponentAccessPolicy : MobilePaywallObject<IClientComponentAccessPolicyManager> 
  {
		private Client _client;
		private Component _component;
		private AccessMode _accessMode;
		

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public Component Component 
		{
			get
			{
				if (this._component != null &&
						this._component.IsEmpty)
					if (this.ConnectionContext != null)
						this._component = Component.CreateManager().LazyLoad(this.ConnectionContext, this._component.ID) as Component;
					else
						this._component = Component.CreateManager().LazyLoad(this._component.ID) as Component;
				return this._component;
			}
			set { _component = value; }
		}

		public AccessMode AccessMode  { get { return this._accessMode; } set { this._accessMode = value; } }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ClientComponentAccessPolicy()
    { 
    }

    public ClientComponentAccessPolicy(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ClientComponentAccessPolicy(int id,  Client client, Component component, AccessMode accessMode, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._client = client;
			this._component = component;
			this._accessMode = accessMode;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ClientComponentAccessPolicy(-1,  this.Client, this.Component, this.AccessMode, DateTime.Now, DateTime.Now);
    }
  }
}

