using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

namespace MobilePaywall.Data
{
  public partial interface IQualityAssuranceReportManager : IDataManager<QualityAssuranceReport> 
  {
	

  }

  public partial class QualityAssuranceReport : MobilePaywallObject<IQualityAssuranceReportManager> 
  {
		private Service _service;
		private PaymentProvider _paymentProvider;
		private MobileOperator _mobileOperator;
		private Client _creator;
		private string _remark = String.Empty;
		private string _reportUrl = String.Empty;
		private DateTime _tested = DateTime.MinValue;
		private bool _hasError = false;
		

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public PaymentProvider PaymentProvider 
		{
			get
			{
				if (this._paymentProvider != null &&
						this._paymentProvider.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this.ConnectionContext, this._paymentProvider.ID) as PaymentProvider;
					else
						this._paymentProvider = PaymentProvider.CreateManager().LazyLoad(this._paymentProvider.ID) as PaymentProvider;
				return this._paymentProvider;
			}
			set { _paymentProvider = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public Client Creator 
		{
			get
			{
				if (this._creator != null &&
						this._creator.IsEmpty)
					if (this.ConnectionContext != null)
						this._creator = Client.CreateManager().LazyLoad(this.ConnectionContext, this._creator.ID) as Client;
					else
						this._creator = Client.CreateManager().LazyLoad(this._creator.ID) as Client;
				return this._creator;
			}
			set { _creator = value; }
		}

		public string Remark{ get {return this._remark; } set { this._remark = value;} }
		public string ReportUrl{ get {return this._reportUrl; } set { this._reportUrl = value;} }
		public DateTime Tested { get { return this._tested; } set { this._tested = value;} }
		public bool HasError {get {return this._hasError; } set { this._hasError = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public QualityAssuranceReport()
    { 
    }

    public QualityAssuranceReport(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public QualityAssuranceReport(int id,  Service service, PaymentProvider paymentProvider, MobileOperator mobileOperator, Client creator, string remark, string reportUrl, DateTime tested, bool hasError, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._service = service;
			this._paymentProvider = paymentProvider;
			this._mobileOperator = mobileOperator;
			this._creator = creator;
			this._remark = remark;
			this._reportUrl = reportUrl;
			this._tested = tested;
			this._hasError = hasError;
			
    }

    public override object Clone(bool deepClone)
    {
      return new QualityAssuranceReport(-1,  this.Service, this.PaymentProvider, this.MobileOperator, this.Creator,this.Remark,this.ReportUrl,this.Tested,this.HasError, DateTime.Now, DateTime.Now);
    }
  }
}

