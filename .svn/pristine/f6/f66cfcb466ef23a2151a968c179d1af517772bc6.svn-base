using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class QuizContentServiceConfigurationTable : TableBase<QuizContentServiceConfiguration>
  {
    public static string GetColumnNames()
    {
      return TableBase<QuizContentServiceConfiguration>.GetColumnNames(string.Empty, QuizContentServiceConfigurationTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<QuizContentServiceConfiguration>.GetColumnNames(tablePrefix, QuizContentServiceConfigurationTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription QuizContentServiceConfigurationID = new ColumnDescription("QuizContentServiceConfigurationID", 0, typeof(int));
			public static readonly ColumnDescription QuizContentID = new ColumnDescription("QuizContentID", 1, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 2, typeof(int));
			public static readonly ColumnDescription NumberOfQuestions = new ColumnDescription("NumberOfQuestions", 3, typeof(int));
			public static readonly ColumnDescription TimePeriodInDays = new ColumnDescription("TimePeriodInDays", 4, typeof(int));
			public static readonly ColumnDescription IsActive = new ColumnDescription("IsActive", 5, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 6, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 7, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				QuizContentServiceConfigurationID,
				QuizContentID,
				ServiceID,
				NumberOfQuestions,
				TimePeriodInDays,
				IsActive,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public QuizContentServiceConfigurationTable(SqlQuery query) : base(query) { }
    public QuizContentServiceConfigurationTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int QuizContentServiceConfigurationID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QuizContentServiceConfigurationID)); } }
		public int QuizContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.QuizContentID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		public int NumberOfQuestions { get { return this.Reader.GetInt32(this.GetIndex(Columns.NumberOfQuestions)); } }
		public int TimePeriodInDays { get { return this.Reader.GetInt32(this.GetIndex(Columns.TimePeriodInDays)); } }
		public bool IsActive { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsActive)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public QuizContentServiceConfiguration CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new QuizContentServiceConfiguration(this.QuizContentServiceConfigurationID,new QuizContent(this.QuizContentID), new Service(this.ServiceID), this.NumberOfQuestions,this.TimePeriodInDays,this.IsActive,this.Updated,this.Created); 
		}
		public QuizContentServiceConfiguration CreateInstance(QuizContent quizContent)  
		{ 
			if (!this.HasData) return null;
			return new QuizContentServiceConfiguration(this.QuizContentServiceConfigurationID,quizContent ?? new QuizContent(this.QuizContentID), new Service(this.ServiceID), this.NumberOfQuestions,this.TimePeriodInDays,this.IsActive,this.Updated,this.Created); 
		}
		public QuizContentServiceConfiguration CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new QuizContentServiceConfiguration(this.QuizContentServiceConfigurationID,new QuizContent(this.QuizContentID), service ?? new Service(this.ServiceID), this.NumberOfQuestions,this.TimePeriodInDays,this.IsActive,this.Updated,this.Created); 
		}
		public QuizContentServiceConfiguration CreateInstance(QuizContent quizContent, Service service)  
		{ 
			if (!this.HasData) return null;
			return new QuizContentServiceConfiguration(this.QuizContentServiceConfigurationID,quizContent ?? new QuizContent(this.QuizContentID), service ?? new Service(this.ServiceID), this.NumberOfQuestions,this.TimePeriodInDays,this.IsActive,this.Updated,this.Created); 
		}
		

  }
}

