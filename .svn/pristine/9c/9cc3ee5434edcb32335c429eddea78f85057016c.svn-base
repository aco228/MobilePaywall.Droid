using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IServiceContentGroupMapManager : IDataManager<ServiceContentGroupMap> 
  {
	

  }

  public partial class ServiceContentGroupMap : MobilePaywallObject<IServiceContentGroupMapManager> 
  {
		private Service _service;
		private ContentGroup _contentGroup;
		private bool _isEnabled = false;
		

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public ContentGroup ContentGroup 
		{
			get
			{
				if (this._contentGroup != null &&
						this._contentGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this.ConnectionContext, this._contentGroup.ID) as ContentGroup;
					else
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this._contentGroup.ID) as ContentGroup;
				return this._contentGroup;
			}
			set { _contentGroup = value; }
		}

		public bool IsEnabled {get {return this._isEnabled; } set { this._isEnabled = value;} }
		

    public override bool IsInsertable { get { return true;} }


    public override bool IsUpdatable { get { return true;} }

    public ServiceContentGroupMap()
    { 
    }

    public ServiceContentGroupMap(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ServiceContentGroupMap(int id,  Service service, ContentGroup contentGroup, bool isEnabled, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._service = service;
			this._contentGroup = contentGroup;
			this._isEnabled = isEnabled;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ServiceContentGroupMap(-1,  this.Service, this.ContentGroup,this.IsEnabled, DateTime.Now, DateTime.Now);
    }
  }
}

