using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class TemplateServiceMobileOperatorTable : TableBase<TemplateServiceMobileOperator>
  {
    public static string GetColumnNames()
    {
      return TableBase<TemplateServiceMobileOperator>.GetColumnNames(string.Empty, TemplateServiceMobileOperatorTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<TemplateServiceMobileOperator>.GetColumnNames(tablePrefix, TemplateServiceMobileOperatorTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription TemplateServiceMobileOperatorID = new ColumnDescription("TemplateServiceMobileOperatorID", 0, typeof(int));
			public static readonly ColumnDescription ServiceID = new ColumnDescription("ServiceID", 1, typeof(int));
			public static readonly ColumnDescription MobileOperatorID = new ColumnDescription("MobileOperatorID", 2, typeof(int));
			public static readonly ColumnDescription Active = new ColumnDescription("Active", 3, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				TemplateServiceMobileOperatorID,
				ServiceID,
				MobileOperatorID,
				Active,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public TemplateServiceMobileOperatorTable(SqlQuery query) : base(query) { }
    public TemplateServiceMobileOperatorTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int TemplateServiceMobileOperatorID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TemplateServiceMobileOperatorID)); } }
		public int ServiceID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ServiceID)); } }
		public int MobileOperatorID { get { return this.Reader.GetInt32(this.GetIndex(Columns.MobileOperatorID)); } }
		public bool Active { get { return this.Reader.GetBoolean(this.GetIndex(Columns.Active)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public TemplateServiceMobileOperator CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceMobileOperator(this.TemplateServiceMobileOperatorID,new Service(this.ServiceID), new MobileOperator(this.MobileOperatorID), this.Active,this.Updated,this.Created); 
		}
		public TemplateServiceMobileOperator CreateInstance(MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceMobileOperator(this.TemplateServiceMobileOperatorID,new Service(this.ServiceID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), this.Active,this.Updated,this.Created); 
		}
		public TemplateServiceMobileOperator CreateInstance(Service service)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceMobileOperator(this.TemplateServiceMobileOperatorID,service ?? new Service(this.ServiceID), new MobileOperator(this.MobileOperatorID), this.Active,this.Updated,this.Created); 
		}
		public TemplateServiceMobileOperator CreateInstance(Service service, MobileOperator mobileOperator)  
		{ 
			if (!this.HasData) return null;
			return new TemplateServiceMobileOperator(this.TemplateServiceMobileOperatorID,service ?? new Service(this.ServiceID), mobileOperator ?? new MobileOperator(this.MobileOperatorID), this.Active,this.Updated,this.Created); 
		}
		

  }
}

