using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class ServiceConfigurationEntryManager : IServiceConfigurationEntryManager
  {
		public List<ServiceConfigurationEntry> Load(ServiceConfiguration serviceConfiguration)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, serviceConfiguration);
		}

		public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, serviceConfiguration);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, serviceConfiguration);
		}

		public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, ServiceConfiguration serviceConfiguration)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[sce_sc].ServiceConfigurationID = @ServiceConfigurationID";
			parameters.Arguments.Add("ServiceConfigurationID", serviceConfiguration.ID);
			return this.LoadMany(connection, parameters);
		}

		public ServiceConfigurationEntry Load(ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator)
		{
			using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
				return this.Load(connection, serviceConfiguration, country, mobileOperator);
		}

		public ServiceConfigurationEntry Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator)
		{
			ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
			if (sqlConnection != null)
				return this.Load(sqlConnection, serviceConfiguration, country, mobileOperator);
			using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
				return this.Load(sqlConnection, serviceConfiguration, country, mobileOperator);
		}

		public ServiceConfigurationEntry Load(ISqlConnectionInfo connection, ServiceConfiguration serviceConfiguration, Country country, MobileOperator mobileOperator)
		{
			SqlQueryParameters parameters = new SqlQueryParameters();
			parameters.Where = "[sce_sc].ServiceConfigurationID = @ServiceConfigurationID AND " +
												"([sce_c].CountryID = @CountryID OR [sce_c].CountryID IS NULL) AND " + 
												"([sce_mo].MobileOperatorID = @MobileOperatorID OR [sce_mo].MobileOperatorID IS NULL)";
			parameters.OrderBy = "[sce_c].CountryID DESC, [sce_mo].MobileOperatorID DESC";
			parameters.Arguments.Add("ServiceConfigurationID", serviceConfiguration.ID);
			parameters.Arguments.Add("CountryID", country.ID);
			parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
			return this.Load(connection, parameters);
		}




		//public List<ServiceConfigurationEntry> Load(ServiceConfiguration serviceConfiguration)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, serviceConfiguration);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, serviceConfiguration);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, serviceConfiguration);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, ServiceConfiguration serviceConfiguration)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].ServiceConfigurationID = @ServiceConfigurationID";
		//	parameters.Arguments.Add("ServiceConfigurationID", serviceConfiguration.ID);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(Country country)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, country);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, country);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, country);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, Country country)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].CountryID = @CountryID";
		//	parameters.Arguments.Add("CountryID", country.ID);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(MobileOperator mobileOperator)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, mobileOperator);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, MobileOperator mobileOperator)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, mobileOperator);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, mobileOperator);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, MobileOperator mobileOperator)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].MobileOperatorID = @MobileOperatorID";
		//	parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(Country country, MobileOperator mobileOperator)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, country, mobileOperator);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, MobileOperator mobileOperator)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, country, mobileOperator);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, country, mobileOperator);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, Country country, MobileOperator mobileOperator)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].CountryID = @CountryID AND ([sce].MobileOperatorID = @MobileOperatorID OR [sce].MobileOperatorID IS NULL)";
		//	parameters.Arguments.Add("CountryID", country.ID);
		//	parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(Country country, bool isPaymentEnabled)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, country, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, bool isPaymentEnabled)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, country, isPaymentEnabled);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, country, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, Country country, bool isPaymentEnabled)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].CountryID = @CountryID AND [sce].IsPaymentEnabled = @IsPaymentEnabled";
		//	parameters.Arguments.Add("CountryID", country.ID);
		//	parameters.Arguments.Add("IsPaymentEnabled", isPaymentEnabled ? 1 : 0);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, mobileOperator, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, mobileOperator, isPaymentEnabled);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, mobileOperator, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce].MobileOperatorID = @MobileOperatorID AND [sce].IsPaymentEnabled = @IsPaymentEnabled";
		//	parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
		//	parameters.Arguments.Add("IsPaymentEnabled", isPaymentEnabled ? 1 : 0);
		//	return this.LoadMany(connection, parameters);
		//}

		//public List<ServiceConfigurationEntry> Load(Country country, MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, country, mobileOperator, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(IConnectionInfo connection, Country country, MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, country, mobileOperator, isPaymentEnabled);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, country, mobileOperator, isPaymentEnabled);
		//}

		//public List<ServiceConfigurationEntry> Load(ISqlConnectionInfo connection, Country country, MobileOperator mobileOperator, bool isPaymentEnabled)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "([sce].MobileOperatorID = @MobileOperatorID OR [sce].MobileOperatorID IS NULL) AND [sce].IsPaymentEnabled = @IsPaymentEnabled AND [sce].CountryID = @CountryID";
		//	parameters.Arguments.Add("CountryID", country.ID);
		//	parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
		//	parameters.Arguments.Add("IsPaymentEnabled", isPaymentEnabled ? 1 : 0);
		//	return this.LoadMany(connection, parameters);
		//}

		//public ServiceConfigurationEntry Load(ServiceConfiguration serviceConfiguration, MobileOperator mobileOperator)
		//{
		//	using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
		//		return this.Load(connection, serviceConfiguration, mobileOperator);
		//}

		//public ServiceConfigurationEntry Load(IConnectionInfo connection, ServiceConfiguration serviceConfiguration, MobileOperator mobileOperator)
		//{
		//	ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
		//	if (sqlConnection != null)
		//		return this.Load(sqlConnection, serviceConfiguration, mobileOperator);
		//	using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
		//		return this.Load(sqlConnection, serviceConfiguration, mobileOperator);
		//}

		//public ServiceConfigurationEntry Load(ISqlConnectionInfo connection, ServiceConfiguration serviceConfiguration, MobileOperator mobileOperator)
		//{
		//	SqlQueryParameters parameters = new SqlQueryParameters();
		//	parameters.Where = "[sce_sc].ServiceConfigurationID = @ServiceConfigurationID AND ([sce_mo].MobileOperatorID = @MobileOperatorID OR [sce_mo].MobileOperatorID IS NULL)";
		//	parameters.Arguments.Add("ServiceConfigurationID", serviceConfiguration.ID);
		//	parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
		//	return this.Load(connection, parameters);
		//	//return this.LoadMany(connection, parameters);
		//}
	}
}

