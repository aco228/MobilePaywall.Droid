using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ITemplateServiceMobileOperatorManager : IDataManager<TemplateServiceMobileOperator> 
  {
	

  }

  public partial class TemplateServiceMobileOperator : MobilePaywallObject<ITemplateServiceMobileOperatorManager> 
  {
		private Service _service;
		private MobileOperator _mobileOperator;
		private bool _active = false;
		

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public bool Active {get {return this._active; } set { this._active = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public TemplateServiceMobileOperator()
    { 
    }

    public TemplateServiceMobileOperator(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public TemplateServiceMobileOperator(int id,  Service service, MobileOperator mobileOperator, bool active, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._service = service;
			this._mobileOperator = mobileOperator;
			this._active = active;
			
    }

    public override object Clone(bool deepClone)
    {
      return new TemplateServiceMobileOperator(-1,  this.Service, this.MobileOperator,this.Active, DateTime.Now, DateTime.Now);
    }
  }
}

