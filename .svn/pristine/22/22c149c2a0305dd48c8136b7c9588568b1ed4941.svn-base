using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PaymentContentAccessPolicyMapTable : TableBase<PaymentContentAccessPolicyMap>
  {
    public static string GetColumnNames()
    {
      return TableBase<PaymentContentAccessPolicyMap>.GetColumnNames(string.Empty, PaymentContentAccessPolicyMapTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<PaymentContentAccessPolicyMap>.GetColumnNames(tablePrefix, PaymentContentAccessPolicyMapTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PaymentContentAccessPolicyMapID = new ColumnDescription("PaymentContentAccessPolicyMapID", 0, typeof(int));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 1, typeof(int));
			public static readonly ColumnDescription ContentID = new ColumnDescription("ContentID", 2, typeof(int));
			public static readonly ColumnDescription ContentAccessPolicyID = new ColumnDescription("ContentAccessPolicyID", 3, typeof(int));
			public static readonly ColumnDescription TransactionID = new ColumnDescription("TransactionID", 4, typeof(int));
			public static readonly ColumnDescription IsValid = new ColumnDescription("IsValid", 5, typeof(bool));
			public static readonly ColumnDescription IsTemporary = new ColumnDescription("IsTemporary", 6, typeof(bool));
			public static readonly ColumnDescription ValidFrom = new ColumnDescription("ValidFrom", 7, typeof(DateTime));
			public static readonly ColumnDescription ValidTo = new ColumnDescription("ValidTo", 8, typeof(DateTime));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 9, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 10, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PaymentContentAccessPolicyMapID,
				PaymentID,
				ContentID,
				ContentAccessPolicyID,
				TransactionID,
				IsValid,
				IsTemporary,
				ValidFrom,
				ValidTo,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PaymentContentAccessPolicyMapTable(SqlQuery query) : base(query) { }
    public PaymentContentAccessPolicyMapTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PaymentContentAccessPolicyMapID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentContentAccessPolicyMapID)); } }
		public int PaymentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentID)); } }
		
		public int? ContentID 
		{
			get
			{
				int index = this.GetIndex(Columns.ContentID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public int ContentAccessPolicyID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ContentAccessPolicyID)); } }
		
		public int? TransactionID 
		{
			get
			{
				int index = this.GetIndex(Columns.TransactionID);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetInt32(index);
			}
		}

		public bool IsValid { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsValid)); } }
		public bool IsTemporary { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsTemporary)); } }
		
		public DateTime? ValidFrom 
		{
			get
			{
				int index = this.GetIndex(Columns.ValidFrom);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		
		public DateTime? ValidTo 
		{
			get
			{
				int index = this.GetIndex(Columns.ValidTo);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetDateTime(index);
			}
		}

		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public PaymentContentAccessPolicyMap CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Content content)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(ContentAccessPolicy contentAccessPolicy)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Content content, ContentAccessPolicy contentAccessPolicy)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, Content content)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Content content, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, ContentAccessPolicy contentAccessPolicy)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(ContentAccessPolicy contentAccessPolicy, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, Content content, ContentAccessPolicy contentAccessPolicy)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), (TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Content content, ContentAccessPolicy contentAccessPolicy, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, Content content, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, ContentAccessPolicy contentAccessPolicy, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), (ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		public PaymentContentAccessPolicyMap CreateInstance(Payment payment, Content content, ContentAccessPolicy contentAccessPolicy, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new PaymentContentAccessPolicyMap(this.PaymentContentAccessPolicyMapID,payment ?? new Payment(this.PaymentID), content ?? (this.ContentID.HasValue ? new Content(this.ContentID.Value) : null), contentAccessPolicy ?? new ContentAccessPolicy(this.ContentAccessPolicyID), transaction ?? (this.TransactionID.HasValue ? new Transaction(this.TransactionID.Value) : null), this.IsValid,this.IsTemporary,this.ValidFrom,this.ValidTo,this.Updated,this.Created); 
		}
		

  }
}

