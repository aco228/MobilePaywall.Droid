using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IDeamonTaskStorageManager : IDataManager<DeamonTaskStorage> 
  {
	

  }

  public partial class DeamonTaskStorage : MobilePaywallObject<IDeamonTaskStorageManager> 
  {
		private DeamonTask _deamonTask;
		private string _key = String.Empty;
		private string _value = String.Empty;
		

		public DeamonTask DeamonTask 
		{
			get
			{
				if (this._deamonTask != null &&
						this._deamonTask.IsEmpty)
					if (this.ConnectionContext != null)
						this._deamonTask = DeamonTask.CreateManager().LazyLoad(this.ConnectionContext, this._deamonTask.ID) as DeamonTask;
					else
						this._deamonTask = DeamonTask.CreateManager().LazyLoad(this._deamonTask.ID) as DeamonTask;
				return this._deamonTask;
			}
			set { _deamonTask = value; }
		}

		public string Key{ get {return this._key; } set { this._key = value;} }
		public string Value{ get {return this._value; } set { this._value = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public DeamonTaskStorage()
    { 
    }

    public DeamonTaskStorage(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public DeamonTaskStorage(int id,  DeamonTask deamonTask, string key, string value, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._deamonTask = deamonTask;
			this._key = key;
			this._value = value;
			
    }

    public override object Clone(bool deepClone)
    {
      return new DeamonTaskStorage(-1,  this.DeamonTask,this.Key,this.Value, DateTime.Now, DateTime.Now);
    }
  }
}

