using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class LookupSessionManager : ILookupSessionManager
  {


    public LookupSession Load(Guid guid, LookupSessionGuidColumnIdentifier columnIdentifier)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, guid, columnIdentifier);
    }

    public LookupSession Load(IConnectionInfo connection, Guid guid, LookupSessionGuidColumnIdentifier columnIdentifier)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, guid, columnIdentifier);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, guid, columnIdentifier);
    }

    public LookupSession Load(ISqlConnectionInfo connection, Guid guid, LookupSessionGuidColumnIdentifier columnIdentifier)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = string.Format("[ls].{0} = @{0}", columnIdentifier.ToString());
      parameters.Arguments.Add(columnIdentifier.ToString(), guid);
      return this.Load(connection, parameters);
    }





    public LookupSession Load(UserSession userSession)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, userSession);
    }

    public LookupSession Load(IConnectionInfo connection, UserSession userSession)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, userSession);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, userSession);
    }

    public LookupSession Load(ISqlConnectionInfo connection, UserSession userSession)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[ls].UserSessionID = @UserSessionID";
      parameters.OrderBy = "[ls].Created DESC";
      parameters.Arguments.Add("UserSessionID", userSession.ID);
      return this.Load(connection, parameters);
    }


    public LookupSession Load(Guid identificationSessionGuid)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, identificationSessionGuid);
    }

    public LookupSession Load(IConnectionInfo connection, Guid identificationSessionGuid)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, identificationSessionGuid);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, identificationSessionGuid);
    }

    public LookupSession Load(ISqlConnectionInfo connection, Guid identificationSessionGuid)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[ls].IdentificationSessionGuid = @IdentificationSessionGuid";
      parameters.Arguments.Add("IdentificationSessionGuid", identificationSessionGuid);
      return this.Load(connection, parameters);
    }



  }
}

