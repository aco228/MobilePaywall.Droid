using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class PublishSvnLogTable : TableBase<PublishSvnLog>
  {
    public static string GetColumnNames()
    {
      return TableBase<PublishSvnLog>.GetColumnNames(string.Empty, PublishSvnLogTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<PublishSvnLog>.GetColumnNames(tablePrefix, PublishSvnLogTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription PublishSvnLogID = new ColumnDescription("PublishSvnLogID", 0, typeof(int));
			public static readonly ColumnDescription PublishSessionID = new ColumnDescription("PublishSessionID", 1, typeof(int));
			public static readonly ColumnDescription ClientID = new ColumnDescription("ClientID", 2, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 3, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				PublishSvnLogID,
				PublishSessionID,
				ClientID,
				Data,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public PublishSvnLogTable(SqlQuery query) : base(query) { }
    public PublishSvnLogTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int PublishSvnLogID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PublishSvnLogID)); } }
		public int PublishSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PublishSessionID)); } }
		public int ClientID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientID)); } }
		public string Data { get { return this.Reader.GetString(this.GetIndex(Columns.Data)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public PublishSvnLog CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new PublishSvnLog(this.PublishSvnLogID,new PublishSession(this.PublishSessionID), new Client(this.ClientID), this.Data,this.Updated,this.Created); 
		}
		public PublishSvnLog CreateInstance(Client client)  
		{ 
			if (!this.HasData) return null;
			return new PublishSvnLog(this.PublishSvnLogID,new PublishSession(this.PublishSessionID), client ?? new Client(this.ClientID), this.Data,this.Updated,this.Created); 
		}
		public PublishSvnLog CreateInstance(PublishSession publishSession)  
		{ 
			if (!this.HasData) return null;
			return new PublishSvnLog(this.PublishSvnLogID,publishSession ?? new PublishSession(this.PublishSessionID), new Client(this.ClientID), this.Data,this.Updated,this.Created); 
		}
		public PublishSvnLog CreateInstance(PublishSession publishSession, Client client)  
		{ 
			if (!this.HasData) return null;
			return new PublishSvnLog(this.PublishSvnLogID,publishSession ?? new PublishSession(this.PublishSessionID), client ?? new Client(this.ClientID), this.Data,this.Updated,this.Created); 
		}
		

  }
}

