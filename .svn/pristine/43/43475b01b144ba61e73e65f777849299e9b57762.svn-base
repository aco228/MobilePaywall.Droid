using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class BusinessModelEntryManager : IBusinessModelEntryManager
  {

    public List<BusinessModelEntry> Load()
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection );
    }

    public List<BusinessModelEntry> Load(IConnectionInfo connection )
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection );
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection );
    }

    public List<BusinessModelEntry> Load(ISqlConnectionInfo connection )
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      return this.LoadMany(connection, parameters);
    }


    public List<BusinessModelEntry> Load(BusinessModel businessModel)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, businessModel);
    }

    public List<BusinessModelEntry> Load(IConnectionInfo connection, BusinessModel businessModel)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, businessModel);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, businessModel);
    }

    public List<BusinessModelEntry> Load(ISqlConnectionInfo connection, BusinessModel businessModel)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[bme].BusinessModelID = @BusinessModelID";
      parameters.Arguments.Add("BusinessModelID", businessModel.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<BusinessModelEntry> Load(Country country)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, country);
    }

    public List<BusinessModelEntry> Load(IConnectionInfo connection, Country country)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, country);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, country);
    }

    public List<BusinessModelEntry> Load(ISqlConnectionInfo connection, Country country)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[bme].CountryID = @CountryID";
      parameters.Arguments.Add("CountryID", country.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<BusinessModelEntry> Load(MobileOperator mobileOperator)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, mobileOperator);
    }

    public List<BusinessModelEntry> Load(IConnectionInfo connection, MobileOperator mobileOperator)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, mobileOperator);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, mobileOperator);
    }

    public List<BusinessModelEntry> Load(ISqlConnectionInfo connection, MobileOperator mobileOperator)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[bme_mo].MobileOperatorID = @MobileOperatorID";
      parameters.Arguments.Add("MobileOperatorID", mobileOperator.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<BusinessModelEntry> Load(Country country, MobileOperator mobileOperator)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, country, mobileOperator);
    }

    public List<BusinessModelEntry> Load(IConnectionInfo connection, Country country, MobileOperator mobileOperator)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, country, mobileOperator);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, country, mobileOperator);
    }

    public List<BusinessModelEntry> Load(ISqlConnectionInfo connection, Country country, MobileOperator mobileOperator)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[bme_c].CountryID = @CountryID AND ([bme].MobileOperatorID = @MobileOperatorID OR [bme].MobileOperatorID IS NULL)";
      parameters.Arguments.Add("CountryID", country.ID);
      parameters.Arguments.Add("MobileOperatorID", mobileOperator != null ? mobileOperator.ID : (object)DBNull.Value);
      return this.LoadMany(connection, parameters);
    }
  }
}

