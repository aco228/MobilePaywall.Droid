using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace MobilePaywall.Merchant
{
  public class RouteConfig
  {
    public static void RegisterRoutes(RouteCollection routes)
    {
      routes.Clear();

      routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

      routes.MapRoute(
        name: "Dashboard",
        url: "dashboard",
        defaults: new { controller = "Dashboard", action = "Index" }
      );

      routes.MapRoute(
        name: "KeepAlive",
        url: "keep-alive",
        defaults: new { controller = "Login", action = "KeepAlive"}  
      );

      routes.MapRoute(
        name: "Lock",
        url: "lock",
        defaults: new { controller = "Login", action = "Lock" }
      );

      routes.MapRoute(
        name: "DashboardMap",
        url: "dashboard/map",
        defaults: new { controller = "Dashboard", action = "Map" }
      );

      routes.MapRoute(
        name: "DashboardChart",
        url: "dashboard/chart",
        defaults: new { controller = "Dashboard", action = "Chart" }
      );

      routes.MapRoute(
        name: "Table",
        url: "statistic/table",
        defaults: new { controller = "Statistic", action = "Table" }
      );

      routes.MapRoute(
        name: "Revenue",
        url: "statistic/revenue",
        defaults: new { controller = "Statistic", action = "Revenue" }
      );

      routes.MapRoute(
        name: "RevenueTable",
        url: "statistic/revenue-table",
        defaults: new { controller = "Statistic", action = "RevenueTable" }
      );

      routes.MapRoute(
        name: "Statistic",
        url: "statistic",
        defaults: new { controller = "Statistic", action = "Index" }
      );

      // Statistic Chart
      routes.MapRoute(
        name: "Chart",
        url: "statistic-chart",
        defaults: new { controller = "Chart", action = "Chart" }
      );

      // Statistic ajax refresh button
      routes.MapRoute(
        name: "AjaxChart",
        url: "statistic/chart",
        defaults: new { controller = "Chart", action = "AjaxChart" }
      );

      routes.MapRoute(
        name: "Statistic.Transactions",
        url: "statistic/transactions",
        defaults: new { controller = "Statistic", action = "Transactions" }
      );

      routes.MapRoute(
        name: "Statistic.Payments",
        url: "statistic/payments",
        defaults: new { controller = "Statistic", action = "Payments" }
      );

      routes.MapRoute(
        name: "Statistic.Identifications",
        url: "statistic/identifications",
        defaults: new { controller = "Statistic", action = "Identifications" }
      );

      routes.MapRoute(
        name: "Statistic.Clicks",
        url: "statistic/clicks",
        defaults: new { controller = "Statistic", action = "Clicks" }
      );

      routes.MapRoute(
        name: "GetContentGroupTypeName",
        url: "task/content-group-type",
        defaults: new { controller = "ServiceTask", action = "LoadContentGroupTypeName" }
      );

      routes.MapRoute(
        name: "UpdateTaskFormFields",
        url: "task/update-fields",
        defaults: new { controller = "ServiceTask", action = "UpdateFormFields" }
      );

      routes.MapRoute(
        name: "CheckServiceName",
        url: "task/check-service-name",
        defaults: new { controller = "ServiceTask", action = "CheckServiceName" }
      );

      routes.MapRoute(
        name: "DoesDomainExist",
        url: "task/domaincheck",
        defaults: new { controller = "ServiceTask", action = "IsDomainValid" }
      );

      routes.MapRoute(
        name: "UpdatePaymentConfigName",
        url: "task/update-pconfig-name",
        defaults: new { controller = "ServiceTask", action = "UpdatePaymentConfigName" }
      );

      routes.MapRoute(
        name: "TaskSave",
        url: "task/save",
        defaults: new { controller = "ServiceTask", action = "Save" }
      );

      routes.MapRoute(
        name: "TaskResolve",
        url: "task/resolve",
        defaults: new { controller = "ServiceTask", action = "Resolve"}
      );

      routes.MapRoute(
        name: "Task",
        url: "task/{id}",
        defaults: new { controller = "ServiceTask", action = "Index", id = UrlParameter.Optional }
      );

      routes.MapRoute(
        name: "TaskList",
        url: "task/render/{location}",
        defaults: new { controller = "Task", action = "Render", location = UrlParameter.Optional },
        constraints: new { location = "header|header-new|page" }
      );

      routes.MapRoute(
        name: "Tasks",
        url: "tasks",
        defaults: new { controller = "Task", action = "Index" }
      );

      routes.MapRoute(
        name: "AssignTask",
        url: "assign",
        defaults: new { controller = "Task", action = "Assign" }
      );

      //routes.MapRoute(
      //    name: "ServiceConfiguration",
      //    url: "task/service/configure/{id}",
      //    defaults: new { controller = "ServiceTask", action = "Configure", id = UrlParameter.Optional }
      //);

      //routes.MapRoute(
      //    name: "SaveServiceConfiguration",
      //    url: "task/service/save",
      //    defaults: new { controller = "ServiceTask", action = "SaveConfiguration" }
      //);

      routes.MapRoute(
        name: "Timeline",
        url: "timeline",
        defaults: new { controller = "Timeline", action = "Index" }
      );

      routes.MapRoute(
        name: "NewTimelineEntry",
        url: "timeline/new",
        defaults: new { controller = "Timeline", action = "New" }
      );

      routes.MapRoute(
        name: "TimelineRefresh",
        url: "timeline/refresh",
        defaults: new { controller = "Timeline", action = "Refresh" }
      );

      //routes.MapRoute(
      //    name: "SaveTest",
      //    url: "test",
      //    defaults: new { controller = "ServiceTask", action = "SaveTest" }
      //);

      routes.MapRoute(
        name: "QualityAssurance",
        url: "qa",
        defaults: new { controller = "QualityAssurance", action = "Index" }
      );

      routes.MapRoute(
        name: "Report",
        url: "qa/report/{id}",
        defaults: new { controller = "QualityAssurance", action = "Report", id = UrlParameter.Optional }
      );

      routes.MapRoute(
        name: "ReportEditor",
        url: "qa/report-editor/{id}",
        defaults: new { controller = "QualityAssurance", action = "ReportEditor", id = UrlParameter.Optional }
      );

      routes.MapRoute(
        name: "SaveReport",
        url: "qa/save-report",
        defaults: new { controller = "QualityAssurance", action = "SaveReport" }
      );

      routes.MapRoute(
        name: "QualityAssuranceTable",
        url: "qa/table",
        defaults: new { controller = "QualityAssurance", action = "Table" }
      );

      routes.MapRoute(
        name: "QualityAssuranceReportList",
        url: "qa/list",
        defaults: new { controller = "QualityAssurance", action = "ReportsList" }
      );

      routes.MapRoute(
        name: "GetOperators",
        url: "getOperators",
        defaults: new { controller = "QualityAssurance", action = "GetOperators" }
      );

      routes.MapRoute(
        name: "UpdateQAFilters",
        url: "qa/update-filters",
        defaults: new { controller = "QualityAssurance", action = "UpdateFilters" }
      );

      routes.MapRoute(
        name: "Merchants",
        url: "merchants",
        defaults: new { controller = "Merchant", action = "Index" }
      );

      routes.MapRoute(
        name: "MerchantsTable",
        url: "merchants/table",
        defaults: new { controller = "Merchant", action = "Table" }
      );

      routes.MapRoute(
        name: "MerchantsUpdateOrInsert",
        url: "merchants/update",
        defaults: new { controller = "Merchant", action = "UpdateOrInsert" }
      );

      routes.MapRoute(
        name: "GenerateDropdowns",
        url: "merchants/generate-dropdowns",
        defaults: new { controller = "Merchant", action = "GenerateDropdowns" }
      );

      routes.MapRoute(
        name: "CheckMerchantName",
        url: "merchants/check-name",
        defaults: new { controller = "Merchant", action = "CheckMerchantName" }
      );

      //For Black List
      routes.MapRoute(
        name: "BlackList",
        url: "blacklist",
        defaults: new { controller = "BlackList", action = "Index" }
      );

      //For Black List
      routes.MapRoute(
        name: "SingleMsisdn",
        url: "blacklist/view/{id}",
        defaults: new { controller = "BlackList", action = "SingleMsisdn", id = UrlParameter.Optional }
      );

      // BlackList Edit
      routes.MapRoute(
        name: "BlackListEdit",
        url: "blacklist/edit/{id}",
        defaults: new { controller = "BlackList", action = "BlackListEdit", id = UrlParameter.Optional }
      );

      //// BlackList Generate
      //routes.MapRoute(
      //  name: "BlackListGenerate",
      //  url: "blacklist/generate",
      //  defaults: new { controller = "BlackList", action = "BlackListGenerate" }
      //);

      //// BlackList Create
      //routes.MapRoute(
      //  name: "BlackListCreate",
      //  url: "blacklist/create",
      //  defaults: new { controller = "BlackList", action = "BlackListCreate" }
      //);

      // BlackList
      routes.MapRoute(
       name: "BlacklistTable",
       url: "blacklist/table",
       defaults: new { controller = "BlackList", action = "Table" }
      );

      // BlackList
      routes.MapRoute(
       name: "TableAddNew",
       url: "blacklist/table-add-new",
       defaults: new { controller = "BlackList", action = "TableAddNew" }
      );

      // BlackList
      routes.MapRoute(
        name: "GenerateDropdownsBlackList",
        url: "blacklist/generatedropdowns",
        defaults: new { controller = "BlackList", action = "GenerateDropdowns" }
      );

      //// BlackList
      //routes.MapRoute(
      //  name: "InsertMsisdns",
      //  url: "blacklist/insert-msisdns",
      //  defaults: new { controller = "BlackList", action = "InsertList" }
      //);

      //BlackListSave
      routes.MapRoute(
        name: "BlackListSave",
        url: "BlackList/Save",
        defaults: new { controller = "BlackList", action = "Save" }
      );

      routes.MapRoute(
        name: "ServiceConfigurations",
        url: "service-configurations",
        defaults: new { controller = "ServiceConfiguration", action = "Index" }
      );

      routes.MapRoute(
        name: "ServiceConfigurationEdit",
        url: "service-configuration/edit/{id}",
        defaults: new { controller = "ServiceConfiguration", action = "Edit", id = UrlParameter.Optional }
      );

      routes.MapRoute(
        name: "ServicePrice",
        url: "service-prices",
        defaults: new { controller = "ServicePrice", action = "Index" }
      );

      routes.MapRoute(
        name: "ServicePricesTable",
        url: "service-prices/table",
        defaults: new { controller = "ServicePrice", action = "Table" }
      );

      routes.MapRoute(
        name: "ServicePriceDropdowns",
        url: "service-prices/generate-dropdowns",
        defaults: new { controller = "ServicePrice", action = "GenerateDropdowns" }
      );

      routes.MapRoute(
        name: "ServicePriceUpdateDropdown",
        url: "service-prices/update-dropdown",
        defaults: new { controller = "ServicePrice", action = "UpdateDropdown" }
      );

      routes.MapRoute(
        name: "ServicePriceInsert",
        url: "service-prices/insert",
        defaults: new { controller = "ServicePrice", action = "Insert" }
      );

      routes.MapRoute(
        name: "ServicePriceUpdate",
        url: "service-prices/update",
        defaults: new { controller = "ServicePrice", action = "Update" }
      );

      routes.MapRoute(
        name: "Default",
        url: "{controller}/{action}/{id}",
        defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
      );
    }
  }
}
