using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(TemplateProviderNote))] 
  public partial class TemplateProviderNoteManager : MobilePaywall.Data.Sql.SqlManagerBase<TemplateProviderNote>, ITemplateProviderNoteManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override TemplateProviderNote LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							TemplateProviderNoteTable.GetColumnNames("[tpn]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[tpn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tpn_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentProviderTable.GetColumnNames("[tpn_pp]") : string.Empty) + 
					" FROM [core].[TemplateProviderNote] AS [tpn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [tpn_c] ON [tpn].[CountryID] = [tpn_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tpn_c_l] ON [tpn_c].[LanguageID] = [tpn_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentProvider] AS [tpn_pp] ON [tpn].[PaymentProviderID] = [tpn_pp].[PaymentProviderID] ";
				sqlCmdText += "WHERE [tpn].[TemplateProviderNoteID] = @TemplateProviderNoteID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TemplateProviderNoteID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "loadinternal", "notfound"), "TemplateProviderNote could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateProviderNoteTable tpnTable = new TemplateProviderNoteTable(query);
				CountryTable tpn_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable tpn_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentProviderTable tpn_ppTable = (this.Depth > 0) ? new PaymentProviderTable(query) : null;

        
				Language tpn_c_lObject = (this.Depth > 1) ? tpn_c_lTable.CreateInstance() : null;
				Country tpn_cObject = (this.Depth > 0) ? tpn_cTable.CreateInstance(tpn_c_lObject) : null;
				PaymentProvider tpn_ppObject = (this.Depth > 0) ? tpn_ppTable.CreateInstance() : null;
				TemplateProviderNote tpnObject = tpnTable.CreateInstance(tpn_cObject, tpn_ppObject);
				sqlReader.Close();

				return tpnObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "loadinternal", "exception"), "TemplateProviderNote could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateProviderNote", "Exception while loading TemplateProviderNote object from database. See inner exception for details.", ex);
      }
    }

    public TemplateProviderNote Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TemplateProviderNoteTable.GetColumnNames("[tpn]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[tpn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tpn_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentProviderTable.GetColumnNames("[tpn_pp]") : string.Empty) +  
					" FROM [core].[TemplateProviderNote] AS [tpn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [tpn_c] ON [tpn].[CountryID] = [tpn_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tpn_c_l] ON [tpn_c].[LanguageID] = [tpn_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentProvider] AS [tpn_pp] ON [tpn].[PaymentProviderID] = [tpn_pp].[PaymentProviderID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "customload", "notfound"), "TemplateProviderNote could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateProviderNoteTable tpnTable = new TemplateProviderNoteTable(query);
				CountryTable tpn_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable tpn_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentProviderTable tpn_ppTable = (this.Depth > 0) ? new PaymentProviderTable(query) : null;

        
				Language tpn_c_lObject = (this.Depth > 1) ? tpn_c_lTable.CreateInstance() : null;
				Country tpn_cObject = (this.Depth > 0) ? tpn_cTable.CreateInstance(tpn_c_lObject) : null;
				PaymentProvider tpn_ppObject = (this.Depth > 0) ? tpn_ppTable.CreateInstance() : null;
				TemplateProviderNote tpnObject = tpnTable.CreateInstance(tpn_cObject, tpn_ppObject);
				sqlReader.Close();

				return tpnObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "customload", "exception"), "TemplateProviderNote could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateProviderNote", "Exception while loading (custom/single) TemplateProviderNote object from database. See inner exception for details.", ex);
      }
    }

    public List<TemplateProviderNote> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							TemplateProviderNoteTable.GetColumnNames("[tpn]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[tpn_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[tpn_c_l]") : string.Empty) + 
							(this.Depth > 0 ? "," + PaymentProviderTable.GetColumnNames("[tpn_pp]") : string.Empty) +  
					" FROM [core].[TemplateProviderNote] AS [tpn] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [tpn_c] ON [tpn].[CountryID] = [tpn_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [tpn_c_l] ON [tpn_c].[LanguageID] = [tpn_c_l].[LanguageID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[PaymentProvider] AS [tpn_pp] ON [tpn].[PaymentProviderID] = [tpn_pp].[PaymentProviderID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "customloadmany", "notfound"), "TemplateProviderNote list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<TemplateProviderNote>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				TemplateProviderNoteTable tpnTable = new TemplateProviderNoteTable(query);
				CountryTable tpn_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable tpn_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				PaymentProviderTable tpn_ppTable = (this.Depth > 0) ? new PaymentProviderTable(query) : null;

        List<TemplateProviderNote> result = new List<TemplateProviderNote>();
        do
        {
          
					Language tpn_c_lObject = (this.Depth > 1) ? tpn_c_lTable.CreateInstance() : null;
					Country tpn_cObject = (this.Depth > 0) ? tpn_cTable.CreateInstance(tpn_c_lObject) : null;
					PaymentProvider tpn_ppObject = (this.Depth > 0) ? tpn_ppTable.CreateInstance() : null;
					TemplateProviderNote tpnObject = (this.Depth > -1) ? tpnTable.CreateInstance(tpn_cObject, tpn_ppObject) : null;
					result.Add(tpnObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "customloadmany", "exception"), "TemplateProviderNote list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "TemplateProviderNote", "Exception while loading (custom/many) TemplateProviderNote object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, TemplateProviderNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[TemplateProviderNote] ([CountryID],[PaymentProviderID],[Data]) VALUES(@CountryID,@PaymentProviderID,@Data); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@PaymentProviderID", data.PaymentProvider.ID);
				sqlCmd.Parameters.AddWithValue("@Data", !string.IsNullOrEmpty(data.Data) ? (object)data.Data : DBNull.Value).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "insert", "noprimarykey"), "TemplateProviderNote could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "TemplateProviderNote", "Exception while inserting TemplateProviderNote object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "insert", "exception"), "TemplateProviderNote could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "TemplateProviderNote", "Exception while inserting TemplateProviderNote object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, TemplateProviderNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[TemplateProviderNote] SET " +
												"[CountryID] = @CountryID, " + 
												"[PaymentProviderID] = @PaymentProviderID, " + 
												"[Data] = @Data, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [TemplateProviderNoteID] = @TemplateProviderNoteID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@PaymentProviderID", data.PaymentProvider.ID);
				sqlCmd.Parameters.AddWithValue("@Data", !string.IsNullOrEmpty(data.Data) ? (object)data.Data : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@TemplateProviderNoteID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "update", "norecord"), "TemplateProviderNote could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "TemplateProviderNote", "Exception while updating TemplateProviderNote object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "update", "morerecords"), "TemplateProviderNote was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "TemplateProviderNote", "Exception while updating TemplateProviderNote object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "update", "exception"), "TemplateProviderNote could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "TemplateProviderNote", "Exception while updating TemplateProviderNote object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, TemplateProviderNote data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[TemplateProviderNote] WHERE TemplateProviderNoteID = @TemplateProviderNoteID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@TemplateProviderNoteID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "delete", "norecord"), "TemplateProviderNote could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "TemplateProviderNote", "Exception while deleting TemplateProviderNote object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("tpn", "delete", "exception"), "TemplateProviderNote could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "TemplateProviderNote", "Exception while deleting TemplateProviderNote object from database. See inner exception for details.", ex);
      }
    }
  }
}

