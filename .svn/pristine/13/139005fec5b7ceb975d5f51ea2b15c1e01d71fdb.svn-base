using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ClientComponentAccessPolicyTable : TableBase<ClientComponentAccessPolicy>
  {
    public static string GetColumnNames()
    {
      return TableBase<ClientComponentAccessPolicy>.GetColumnNames(string.Empty, ClientComponentAccessPolicyTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ClientComponentAccessPolicy>.GetColumnNames(tablePrefix, ClientComponentAccessPolicyTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ClientComponentAccessPolicyID = new ColumnDescription("ClientComponentAccessPolicyID", 0, typeof(int));
			public static readonly ColumnDescription ClientID = new ColumnDescription("ClientID", 1, typeof(int));
			public static readonly ColumnDescription ComponentID = new ColumnDescription("ComponentID", 2, typeof(int));
			public static readonly ColumnDescription AccessModeID = new ColumnDescription("AccessModeID", 3, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ClientComponentAccessPolicyID,
				ClientID,
				ComponentID,
				AccessModeID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ClientComponentAccessPolicyTable(SqlQuery query) : base(query) { }
    public ClientComponentAccessPolicyTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ClientComponentAccessPolicyID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientComponentAccessPolicyID)); } }
		public int ClientID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ClientID)); } }
		public int ComponentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ComponentID)); } }
		public int AccessModeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AccessModeID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ClientComponentAccessPolicy CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ClientComponentAccessPolicy(this.ClientComponentAccessPolicyID,new Client(this.ClientID), new Component(this.ComponentID), (AccessMode)this.AccessModeID,this.Updated,this.Created); 
		}
		public ClientComponentAccessPolicy CreateInstance(Component component)  
		{ 
			if (!this.HasData) return null;
			return new ClientComponentAccessPolicy(this.ClientComponentAccessPolicyID,new Client(this.ClientID), component ?? new Component(this.ComponentID), (AccessMode)this.AccessModeID,this.Updated,this.Created); 
		}
		public ClientComponentAccessPolicy CreateInstance(Client client)  
		{ 
			if (!this.HasData) return null;
			return new ClientComponentAccessPolicy(this.ClientComponentAccessPolicyID,client ?? new Client(this.ClientID), new Component(this.ComponentID), (AccessMode)this.AccessModeID,this.Updated,this.Created); 
		}
		public ClientComponentAccessPolicy CreateInstance(Client client, Component component)  
		{ 
			if (!this.HasData) return null;
			return new ClientComponentAccessPolicy(this.ClientComponentAccessPolicyID,client ?? new Client(this.ClientID), component ?? new Component(this.ComponentID), (AccessMode)this.AccessModeID,this.Updated,this.Created); 
		}
		

  }
}

