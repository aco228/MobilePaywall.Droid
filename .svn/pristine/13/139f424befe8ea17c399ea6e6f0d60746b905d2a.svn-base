using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ConversionReportTable : TableBase<ConversionReport>
  {
    public static string GetColumnNames()
    {
      return TableBase<ConversionReport>.GetColumnNames(string.Empty, ConversionReportTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ConversionReport>.GetColumnNames(tablePrefix, ConversionReportTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ConversionReportID = new ColumnDescription("ConversionReportID", 0, typeof(int));
			public static readonly ColumnDescription UserSessionID = new ColumnDescription("UserSessionID", 1, typeof(int));
			public static readonly ColumnDescription PaymentID = new ColumnDescription("PaymentID", 2, typeof(int));
			public static readonly ColumnDescription TransactionID = new ColumnDescription("TransactionID", 3, typeof(int));
			public static readonly ColumnDescription ConversionProviderID = new ColumnDescription("ConversionProviderID", 4, typeof(int));
			public static readonly ColumnDescription ConversionActionID = new ColumnDescription("ConversionActionID", 5, typeof(int));
			public static readonly ColumnDescription ConversionReportStatusID = new ColumnDescription("ConversionReportStatusID", 6, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 7, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 8, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ConversionReportID,
				UserSessionID,
				PaymentID,
				TransactionID,
				ConversionProviderID,
				ConversionActionID,
				ConversionReportStatusID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ConversionReportTable(SqlQuery query) : base(query) { }
    public ConversionReportTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ConversionReportID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ConversionReportID)); } }
		public int UserSessionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.UserSessionID)); } }
		public int PaymentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.PaymentID)); } }
		public int TransactionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.TransactionID)); } }
		public int ConversionProviderID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ConversionProviderID)); } }
		public int ConversionActionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ConversionActionID)); } }
		public int ConversionReportStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ConversionReportStatusID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ConversionReport CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,new UserSession(this.UserSessionID), new Payment(this.PaymentID), new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,new UserSession(this.UserSessionID), new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(UserSession userSession)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,userSession ?? new UserSession(this.UserSessionID), new Payment(this.PaymentID), new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(Payment payment, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(UserSession userSession, Payment payment)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,userSession ?? new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(UserSession userSession, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,userSession ?? new UserSession(this.UserSessionID), new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		public ConversionReport CreateInstance(UserSession userSession, Payment payment, Transaction transaction)  
		{ 
			if (!this.HasData) return null;
			return new ConversionReport(this.ConversionReportID,userSession ?? new UserSession(this.UserSessionID), payment ?? new Payment(this.PaymentID), transaction ?? new Transaction(this.TransactionID), (ConversionProvider)this.ConversionProviderID,(ConversionAction)this.ConversionActionID,(ConversionReportStatus)this.ConversionReportStatusID,this.Updated,this.Created); 
		}
		

  }
}

