using MobilePaywall.Data;
using MobilePaywall.Web.Models.Specific._Template.ServiceCompareConfiguration.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MobilePaywall.Web.Models.Specific._Template.ServiceCompareConfiguration.Types
{
  class TemplateComparePaymentConfiguration : CompareGroupBase
  {
    private Service _compareService = null;
    private ServiceOffer _compareServiceOffer = null;
    private ServiceOffer _ourServiceOffer = null;

    public TemplateComparePaymentConfiguration(Service service)
      : base("PaymentConfiguration compare group")
    {
      this._compareService = service;
      this.Description = "Compare values from PaymentConfiguration";
      this.CompareTable = new CompareTable()
      {
        TableName = "PaymentConfiguration",
        ColumnName = "PaymentConfigurationID",
        SchemeName = "core"
      };

      this._compareServiceOffer = (from s in ServiceOffer.CreateManager().Load(this._compareService) where s.IsActive && s.IsDefault select s).FirstOrDefault();
      this._ourServiceOffer = (from s in ServiceOffer.CreateManager().Load(PaywallHttpContext.Current.Service.ServiceData) where s.IsActive && s.IsDefault select s).FirstOrDefault();
    }

    public override void Execute()
    {
      this.CheckPaymentCredentials();
      this.CheckPaymentInterface();
      this.CheckPaymentProvider();
      this.ChekPaymentType();
    }

    private void CheckPaymentCredentials()
    {
      CompareEntry entry = new CompareEntry(this.CompareTable, CompareEntryResult.Unknown, CompareEntryResultFix.Unknown);
      entry.ColumnName = "PaymentCredentialsID";
      entry.CompareColumnValue = this._compareServiceOffer.PaymentConfiguration.PaymentCredentials.Username;
      entry.CompareThisValue = this._ourServiceOffer.PaymentConfiguration.PaymentCredentials.Username;
      entry.IdFromCompareService = this._compareServiceOffer.PaymentConfiguration.PaymentCredentials.ID.ToString();
      entry.IdForThisService = this._ourServiceOffer.PaymentConfiguration.PaymentCredentials.ID.ToString();
      
      if (this._compareServiceOffer.PaymentConfiguration.PaymentCredentials.ID == this._ourServiceOffer.PaymentConfiguration.PaymentCredentials.ID)
      {
        entry.Result = CompareEntryResult.OK;
        entry.Fix = CompareEntryResultFix.None;
      }
      else
      {
        entry.Result = CompareEntryResult.Different;
        entry.Fix = CompareEntryResultFix.Update;
      }

      this.Entries.Add(entry);
    }
    
    private void CheckPaymentInterface()
    {
      CompareEntry entry = new CompareEntry(this.CompareTable, CompareEntryResult.Unknown, CompareEntryResultFix.Unknown);
      entry.ColumnName = "PaymentInterfaceID";
      entry.CompareColumnValue = this._compareServiceOffer.PaymentConfiguration.PaymentInterface.Name;
      entry.CompareThisValue = this._ourServiceOffer.PaymentConfiguration.PaymentInterface.Name;
      entry.IdFromCompareService = this._compareServiceOffer.PaymentConfiguration.PaymentInterface.ID.ToString();
      entry.IdForThisService = this._ourServiceOffer.PaymentConfiguration.PaymentInterface.ID.ToString();

      if (this._compareServiceOffer.PaymentConfiguration.PaymentInterface.ID == this._ourServiceOffer.PaymentConfiguration.PaymentInterface.ID)
      {
        entry.Result = CompareEntryResult.OK;
        entry.Fix = CompareEntryResultFix.None;
      }
      else
      {
        entry.Result = CompareEntryResult.Different;
        entry.Fix = CompareEntryResultFix.Update;
      }

      this.Entries.Add(entry);
    }

    private void CheckPaymentProvider()
    {
      CompareEntry entry = new CompareEntry(this.CompareTable, CompareEntryResult.Unknown, CompareEntryResultFix.Unknown);
      entry.ColumnName = "PaymentProviderID";
      entry.CompareColumnValue = this._compareServiceOffer.PaymentConfiguration.PaymentProvider.Name;
      entry.CompareThisValue = this._ourServiceOffer.PaymentConfiguration.PaymentProvider.Name;
      entry.IdFromCompareService = this._compareServiceOffer.PaymentConfiguration.PaymentProvider.ID.ToString();
      entry.IdForThisService = this._ourServiceOffer.PaymentConfiguration.PaymentProvider.ID.ToString();

      if (this._compareServiceOffer.PaymentConfiguration.PaymentProvider.ID == this._ourServiceOffer.PaymentConfiguration.PaymentProvider.ID)
      {
        entry.Result = CompareEntryResult.OK;
        entry.Fix = CompareEntryResultFix.None;
      }
      else
      {
        entry.Result = CompareEntryResult.Different;
        entry.Fix = CompareEntryResultFix.Update;
      }

      this.Entries.Add(entry);
    }

    private void ChekPaymentType()
    {
      CompareEntry entry = new CompareEntry(this.CompareTable, CompareEntryResult.Unknown, CompareEntryResultFix.Unknown);
      entry.ColumnName = "PaymentTypeID";
      entry.CompareColumnValue = this._compareServiceOffer.PaymentConfiguration.PaymentType.ToString();
      entry.CompareThisValue = this._ourServiceOffer.PaymentConfiguration.PaymentType.ToString();
      entry.IdFromCompareService = ((int)this._compareServiceOffer.PaymentConfiguration.PaymentType).ToString();
      entry.IdForThisService = ((int)this._ourServiceOffer.PaymentConfiguration.PaymentType).ToString();

      if (this._compareServiceOffer.PaymentConfiguration.PaymentType == this._ourServiceOffer.PaymentConfiguration.PaymentType)
      {
        entry.Result = CompareEntryResult.OK;
        entry.Fix = CompareEntryResultFix.None;
      }
      else
      {
        entry.Result = CompareEntryResult.Different;
        entry.Fix = CompareEntryResultFix.Update;
      }

      this.Entries.Add(entry);
    }

  }
}
