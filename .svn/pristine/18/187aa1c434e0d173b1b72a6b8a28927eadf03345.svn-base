using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ImageFormatTable : TableBase<ImageFormat>
  {
    public static string GetColumnNames()
    {
      return TableBase<ImageFormat>.GetColumnNames(string.Empty, ImageFormatTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ImageFormat>.GetColumnNames(tablePrefix, ImageFormatTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ImageFormatID = new ColumnDescription("ImageFormatID", 0, typeof(int));
			public static readonly ColumnDescription ImageFormatTypeID = new ColumnDescription("ImageFormatTypeID", 1, typeof(int));
			public static readonly ColumnDescription Name = new ColumnDescription("Name", 2, typeof(string));
			public static readonly ColumnDescription MimeType = new ColumnDescription("MimeType", 3, typeof(string));
			public static readonly ColumnDescription Extension = new ColumnDescription("Extension", 4, typeof(string));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 5, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 6, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ImageFormatID,
				ImageFormatTypeID,
				Name,
				MimeType,
				Extension,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ImageFormatTable(SqlQuery query) : base(query) { }
    public ImageFormatTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ImageFormatID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ImageFormatID)); } }
		public int ImageFormatTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ImageFormatTypeID)); } }
		public string Name { get { return this.Reader.GetString(this.GetIndex(Columns.Name)); } }
		public string MimeType { get { return this.Reader.GetString(this.GetIndex(Columns.MimeType)); } }
		public string Extension { get { return this.Reader.GetString(this.GetIndex(Columns.Extension)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ImageFormat CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ImageFormat(this.ImageFormatID,(ImageFormatType)this.ImageFormatTypeID,this.Name,this.MimeType,this.Extension,this.Updated,this.Created); 
		}
		

  }
}

