using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  public partial class QuizContentDetailManager : IQuizContentDetailManager
  {
    public List<QuizContentDetail> Load(QuizContent content)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, content);
    }

    public List<QuizContentDetail> Load(IConnectionInfo connection, QuizContent content)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, content);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, content);
    }

    public List<QuizContentDetail> Load(ISqlConnectionInfo connection, QuizContent content)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[qcd].QuizContentID = @QuizContentID";
      parameters.Arguments.Add("QuizContentID", content.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<QuizContentDetail> Load(Service service)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service);
    }

    public List<QuizContentDetail> Load(IConnectionInfo connection, Service service)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service);
    }

    public List<QuizContentDetail> Load(ISqlConnectionInfo connection, Service service)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[qcd].ServiceID = @ServiceID";
      parameters.Arguments.Add("ServiceID", service.ID);
      return this.LoadMany(connection, parameters);
    }

    public List<QuizContentDetail> Load(Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, service, language);
    }

    public List<QuizContentDetail> Load(IConnectionInfo connection, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, service, language);
    }

    public List<QuizContentDetail> Load(ISqlConnectionInfo connection, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[qcd].ServiceID = @ServiceID AND [qcd].LanguageID = @LanguageID";
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.LoadMany(connection, parameters);
    }

    public QuizContentDetail Load(QuizContent content, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load(connection, content, language);
    }

    public QuizContentDetail Load(IConnectionInfo connection, QuizContent content, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load(sqlConnection, content, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load(sqlConnection, content, language);
    }

    public QuizContentDetail Load(ISqlConnectionInfo connection, QuizContent content, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[qcd].QuizContentID = @QuizContentID AND [qcd].LanguageID = @LanguageID";
      parameters.Arguments.Add("QuizContentID", content.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      return this.Load(connection, parameters);
    }

    public T Load<T>(QuizContent content, Service service, Language language)
    {
      using (SqlConnectionInfo connection = new SqlConnectionInfo(this.Type))
        return this.Load<T>(connection, content, service, language);
    }

    public T Load<T>(IConnectionInfo connection, QuizContent content, Service service, Language language)
    {
      ISqlConnectionInfo sqlConnection = connection as ISqlConnectionInfo;
      if (sqlConnection != null)
        return this.Load<T>(sqlConnection, content, service, language);
      using (sqlConnection = new SqlConnectionInfo(connection, this.Type))
        return this.Load<T>(sqlConnection, content, service, language);
    }

    public T Load<T>(ISqlConnectionInfo connection, QuizContent content, Service service, Language language)
    {
      SqlQueryParameters parameters = new SqlQueryParameters();
      parameters.Where = "[qcd_qc].QuizContentID = @QuizContentID AND ([qcd_s].ServiceID = @ServiceID OR [qcd_s].ServiceID IS NULL) AND ([qcd_l].LanguageID = @LanguageID OR [qcd_l].LanguageID IS NULL)";
      parameters.Arguments.Add("QuizContentID", content.ID);
      parameters.Arguments.Add("ServiceID", service.ID);
      parameters.Arguments.Add("LanguageID", language.ID);
      if (typeof(T).Equals(typeof(List<QuizContentDetail>)))
        return (T)Convert.ChangeType(this.LoadMany(connection, parameters), typeof(T));
      else
        return (T)Convert.ChangeType(this.Load(connection, parameters), typeof(T));
    }
  }
}

