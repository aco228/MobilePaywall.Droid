using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class AuctionBidTable : TableBase<AuctionBid>
  {
    public static string GetColumnNames()
    {
      return TableBase<AuctionBid>.GetColumnNames(string.Empty, AuctionBidTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<AuctionBid>.GetColumnNames(tablePrefix, AuctionBidTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription AuctionBidID = new ColumnDescription("AuctionBidID", 0, typeof(int));
			public static readonly ColumnDescription AuctionRoundID = new ColumnDescription("AuctionRoundID", 1, typeof(int));
			public static readonly ColumnDescription CustomerID = new ColumnDescription("CustomerID", 2, typeof(int));
			public static readonly ColumnDescription Amount = new ColumnDescription("Amount", 3, typeof(double));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				AuctionBidID,
				AuctionRoundID,
				CustomerID,
				Amount,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public AuctionBidTable(SqlQuery query) : base(query) { }
    public AuctionBidTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int AuctionBidID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AuctionBidID)); } }
		public int AuctionRoundID { get { return this.Reader.GetInt32(this.GetIndex(Columns.AuctionRoundID)); } }
		public int CustomerID { get { return this.Reader.GetInt32(this.GetIndex(Columns.CustomerID)); } }
		public decimal Amount { get { return this.Reader.GetDecimal(this.GetIndex(Columns.Amount)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public AuctionBid CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new AuctionBid(this.AuctionBidID,new AuctionRound(this.AuctionRoundID), new Customer(this.CustomerID), this.Amount,this.Updated,this.Created); 
		}
		public AuctionBid CreateInstance(AuctionRound auctionRound)  
		{ 
			if (!this.HasData) return null;
			return new AuctionBid(this.AuctionBidID,auctionRound ?? new AuctionRound(this.AuctionRoundID), new Customer(this.CustomerID), this.Amount,this.Updated,this.Created); 
		}
		public AuctionBid CreateInstance(Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new AuctionBid(this.AuctionBidID,new AuctionRound(this.AuctionRoundID), customer ?? new Customer(this.CustomerID), this.Amount,this.Updated,this.Created); 
		}
		public AuctionBid CreateInstance(AuctionRound auctionRound, Customer customer)  
		{ 
			if (!this.HasData) return null;
			return new AuctionBid(this.AuctionBidID,auctionRound ?? new AuctionRound(this.AuctionRoundID), customer ?? new Customer(this.CustomerID), this.Amount,this.Updated,this.Created); 
		}
		

  }
}

