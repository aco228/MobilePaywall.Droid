using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPublishSessionManager : IDataManager<PublishSession> 
  {
	

  }

  public partial class PublishSession : MobilePaywallObject<IPublishSessionManager> 
  {
		private Client _client;
		private Application _application;
		private bool _isSuccessfull = false;
		private string _elapsedTime = String.Empty;
		

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public Application Application 
		{
			get
			{
				if (this._application != null &&
						this._application.IsEmpty)
					if (this.ConnectionContext != null)
						this._application = Application.CreateManager().LazyLoad(this.ConnectionContext, this._application.ID) as Application;
					else
						this._application = Application.CreateManager().LazyLoad(this._application.ID) as Application;
				return this._application;
			}
			set { _application = value; }
		}

		public bool IsSuccessfull {get {return this._isSuccessfull; } set { this._isSuccessfull = value;} }
		public string ElapsedTime{ get {return this._elapsedTime; } set { this._elapsedTime = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public PublishSession()
    { 
    }

    public PublishSession(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public PublishSession(int id,  Client client, Application application, bool isSuccessfull, string elapsedTime, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._client = client;
			this._application = application;
			this._isSuccessfull = isSuccessfull;
			this._elapsedTime = elapsedTime;
			
    }

    public override object Clone(bool deepClone)
    {
      return new PublishSession(-1,  this.Client, this.Application,this.IsSuccessfull,this.ElapsedTime, DateTime.Now, DateTime.Now);
    }
  }
}

