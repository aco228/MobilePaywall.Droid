using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IUserSessionManager : IDataManager<UserSession> 
  {
	

  }

  public partial class UserSession : MobilePaywallObject<IUserSessionManager> 
  {
		private Guid _guid;
		private UserSessionType _userSessionType;
		private Service _service;
		private Domain _domain;
		private Customer _customer;
		private Country _country;
		private Language _language;
		private MobileOperator _mobileOperator;
		private int? _trackingID = -1;
		private Guid? _fingerprintID;
		private bool _hasVerifiedAge = false;
		private bool? _isWelcomeShown = false;
		private string _iPAddress = String.Empty;
		private IPAddressType _iPAddressType;
		private string _userAgent = String.Empty;
		private string _entranceUrl = String.Empty;
		private string _referrer = String.Empty;
		private DateTime _validUntil = DateTime.MinValue;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public UserSessionType UserSessionType 
		{
			get
			{
				if (this._userSessionType != null &&
						this._userSessionType.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSessionType = UserSessionType.CreateManager().LazyLoad(this.ConnectionContext, this._userSessionType.ID) as UserSessionType;
					else
						this._userSessionType = UserSessionType.CreateManager().LazyLoad(this._userSessionType.ID) as UserSessionType;
				return this._userSessionType;
			}
			set { _userSessionType = value; }
		}

		public Service Service 
		{
			get
			{
				if (this._service != null &&
						this._service.IsEmpty)
					if (this.ConnectionContext != null)
						this._service = Service.CreateManager().LazyLoad(this.ConnectionContext, this._service.ID) as Service;
					else
						this._service = Service.CreateManager().LazyLoad(this._service.ID) as Service;
				return this._service;
			}
			set { _service = value; }
		}

		public Domain Domain 
		{
			get
			{
				if (this._domain != null &&
						this._domain.IsEmpty)
					if (this.ConnectionContext != null)
						this._domain = Domain.CreateManager().LazyLoad(this.ConnectionContext, this._domain.ID) as Domain;
					else
						this._domain = Domain.CreateManager().LazyLoad(this._domain.ID) as Domain;
				return this._domain;
			}
			set { _domain = value; }
		}

		public Customer Customer 
		{
			get
			{
				if (this._customer != null &&
						this._customer.IsEmpty)
					if (this.ConnectionContext != null)
						this._customer = Customer.CreateManager().LazyLoad(this.ConnectionContext, this._customer.ID) as Customer;
					else
						this._customer = Customer.CreateManager().LazyLoad(this._customer.ID) as Customer;
				return this._customer;
			}
			set { _customer = value; }
		}

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public Language Language 
		{
			get
			{
				if (this._language != null &&
						this._language.IsEmpty)
					if (this.ConnectionContext != null)
						this._language = Language.CreateManager().LazyLoad(this.ConnectionContext, this._language.ID) as Language;
					else
						this._language = Language.CreateManager().LazyLoad(this._language.ID) as Language;
				return this._language;
			}
			set { _language = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public int? TrackingID{ get {return this._trackingID; } set { this._trackingID = value;} }
		public Guid? FingerprintID { get { return this._fingerprintID; } set { this._fingerprintID = value;}}
		public bool HasVerifiedAge {get {return this._hasVerifiedAge; } set { this._hasVerifiedAge = value;} }
		public bool? IsWelcomeShown {get {return this._isWelcomeShown; } set { this._isWelcomeShown = value;} }
		public string IPAddress{ get {return this._iPAddress; } set { this._iPAddress = value;} }
		public IPAddressType IPAddressType  { get { return this._iPAddressType; } set { this._iPAddressType = value; } }
		public string UserAgent{ get {return this._userAgent; } set { this._userAgent = value;} }
		public string EntranceUrl{ get {return this._entranceUrl; } set { this._entranceUrl = value;} }
		public string Referrer{ get {return this._referrer; } set { this._referrer = value;} }
		public DateTime ValidUntil { get { return this._validUntil; } set { this._validUntil = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return true;} }

    public override bool IsUpdatable { get { return true;} }

    public UserSession()
    { 
    }

    public UserSession(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public UserSession(int id,  Guid guid, UserSessionType userSessionType, Service service, Domain domain, Customer customer, Country country, Language language, MobileOperator mobileOperator, int? trackingID, Guid? fingerprintID, bool hasVerifiedAge, bool? isWelcomeShown, string iPAddress, IPAddressType iPAddressType, string userAgent, string entranceUrl, string referrer, DateTime validUntil, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._userSessionType = userSessionType;
			this._service = service;
			this._domain = domain;
			this._customer = customer;
			this._country = country;
			this._language = language;
			this._mobileOperator = mobileOperator;
			this._trackingID = trackingID;
			this._fingerprintID = fingerprintID;
			this._hasVerifiedAge = hasVerifiedAge;
			this._isWelcomeShown = isWelcomeShown;
			this._iPAddress = iPAddress;
			this._iPAddressType = iPAddressType;
			this._userAgent = userAgent;
			this._entranceUrl = entranceUrl;
			this._referrer = referrer;
			this._validUntil = validUntil;
			
    }

    public override object Clone(bool deepClone)
    {
      return new UserSession(-1, this.Guid, this.UserSessionType, this.Service, this.Domain, this.Customer, this.Country, this.Language, this.MobileOperator,this.TrackingID,this.FingerprintID,this.HasVerifiedAge,this.IsWelcomeShown,this.IPAddress, this.IPAddressType,this.UserAgent,this.EntranceUrl,this.Referrer,this.ValidUntil, DateTime.Now, DateTime.Now);
    }
  }
}

