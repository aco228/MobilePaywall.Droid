using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IImageContentDataManager : IDataManager<ImageContentData> 
  {
	

  }

  public partial class ImageContentData : MobilePaywallObject<IImageContentDataManager> 
  {
		private ImageContent _imageContent;
		private VideoConversionProfileEntry _videoConversionProfileEntry;
		private byte[] _data = null;
		private int _width = -1;
		private int _height = -1;
		private int _size = -1;
		private bool _isOriginal = false;
		

		public ImageContent ImageContent 
		{
			get
			{
				if (this._imageContent != null &&
						this._imageContent.IsEmpty)
					if (this.ConnectionContext != null)
						this._imageContent = ImageContent.CreateManager().LazyLoad(this.ConnectionContext, this._imageContent.ID) as ImageContent;
					else
						this._imageContent = ImageContent.CreateManager().LazyLoad(this._imageContent.ID) as ImageContent;
				return this._imageContent;
			}
			set { _imageContent = value; }
		}

		public VideoConversionProfileEntry VideoConversionProfileEntry 
		{
			get
			{
				if (this._videoConversionProfileEntry != null &&
						this._videoConversionProfileEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._videoConversionProfileEntry = VideoConversionProfileEntry.CreateManager().LazyLoad(this.ConnectionContext, this._videoConversionProfileEntry.ID) as VideoConversionProfileEntry;
					else
						this._videoConversionProfileEntry = VideoConversionProfileEntry.CreateManager().LazyLoad(this._videoConversionProfileEntry.ID) as VideoConversionProfileEntry;
				return this._videoConversionProfileEntry;
			}
			set { _videoConversionProfileEntry = value; }
		}

		public byte[] Data { get { return this._data; } set { this._data = value;}  }
		public int Width{ get {return this._width; } set { this._width = value;} }
		public int Height{ get {return this._height; } set { this._height = value;} }
		public int Size{ get {return this._size; } set { this._size = value;} }
		public bool IsOriginal {get {return this._isOriginal; } set { this._isOriginal = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ImageContentData()
    { 
    }

    public ImageContentData(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ImageContentData(int id,  ImageContent imageContent, VideoConversionProfileEntry videoConversionProfileEntry, byte[] data, int width, int height, int size, bool isOriginal, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._imageContent = imageContent;
			this._videoConversionProfileEntry = videoConversionProfileEntry;
			this._data = data;
			this._width = width;
			this._height = height;
			this._size = size;
			this._isOriginal = isOriginal;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ImageContentData(-1,  this.ImageContent, this.VideoConversionProfileEntry,this.Data,this.Width,this.Height,this.Size,this.IsOriginal, DateTime.Now, DateTime.Now);
    }
  }
}

