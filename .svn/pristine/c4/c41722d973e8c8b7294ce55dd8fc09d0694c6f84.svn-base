using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IBusinessModelEntryManager : IDataManager<BusinessModelEntry> 
  {
	

  }

  public partial class BusinessModelEntry : MobilePaywallObject<IBusinessModelEntryManager> 
  {
		private BusinessModelEntryStatus _businessModelEntryStatus;
		private BusinessModel _businessModel;
		private Country _country;
		private MobileOperator _mobileOperator;
		private BusinessModelType _businessModelType;
		

		public BusinessModelEntryStatus BusinessModelEntryStatus  { get { return this._businessModelEntryStatus; } set { this._businessModelEntryStatus = value; } }
		public BusinessModel BusinessModel 
		{
			get
			{
				if (this._businessModel != null &&
						this._businessModel.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModel = BusinessModel.CreateManager().LazyLoad(this.ConnectionContext, this._businessModel.ID) as BusinessModel;
					else
						this._businessModel = BusinessModel.CreateManager().LazyLoad(this._businessModel.ID) as BusinessModel;
				return this._businessModel;
			}
			set { _businessModel = value; }
		}

		public Country Country 
		{
			get
			{
				if (this._country != null &&
						this._country.IsEmpty)
					if (this.ConnectionContext != null)
						this._country = Country.CreateManager().LazyLoad(this.ConnectionContext, this._country.ID) as Country;
					else
						this._country = Country.CreateManager().LazyLoad(this._country.ID) as Country;
				return this._country;
			}
			set { _country = value; }
		}

		public MobileOperator MobileOperator 
		{
			get
			{
				if (this._mobileOperator != null &&
						this._mobileOperator.IsEmpty)
					if (this.ConnectionContext != null)
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this.ConnectionContext, this._mobileOperator.ID) as MobileOperator;
					else
						this._mobileOperator = MobileOperator.CreateManager().LazyLoad(this._mobileOperator.ID) as MobileOperator;
				return this._mobileOperator;
			}
			set { _mobileOperator = value; }
		}

		public BusinessModelType BusinessModelType 
		{
			get
			{
				if (this._businessModelType != null &&
						this._businessModelType.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModelType = BusinessModelType.CreateManager().LazyLoad(this.ConnectionContext, this._businessModelType.ID) as BusinessModelType;
					else
						this._businessModelType = BusinessModelType.CreateManager().LazyLoad(this._businessModelType.ID) as BusinessModelType;
				return this._businessModelType;
			}
			set { _businessModelType = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public BusinessModelEntry()
    { 
    }

    public BusinessModelEntry(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public BusinessModelEntry(int id,  BusinessModelEntryStatus businessModelEntryStatus, BusinessModel businessModel, Country country, MobileOperator mobileOperator, BusinessModelType businessModelType, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._businessModelEntryStatus = businessModelEntryStatus;
			this._businessModel = businessModel;
			this._country = country;
			this._mobileOperator = mobileOperator;
			this._businessModelType = businessModelType;
			
    }

    public override object Clone(bool deepClone)
    {
      return new BusinessModelEntry(-1,  this.BusinessModelEntryStatus, this.BusinessModel, this.Country, this.MobileOperator, this.BusinessModelType, DateTime.Now, DateTime.Now);
    }
  }
}

