using MobilePaywall.Base;
using MobilePaywall.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MobilePaywall.Implementation.Service
{
  public class ServiceStorageManager : StorageManagerBase
  {

    private Data.Service _service = null;

    public ServiceStorageManager(Data.Service service)
      :base(service)
    {
      this._service = service;
    }

    //protected List<ServiceStorage> Storage
    //{
    //  get
    //  {
    //    return ServiceStorage.CreateManager().Load(this._service);
    //  }
    //}

    //// SUMMARY: Get ServiceStorage by Key
    //protected ServiceStorage this[string key]
    //{
    //  get
    //  {
    //    return (from c in this.Storage where c.Key.ToLower().Equals(key.ToLower()) select c).FirstOrDefault();
    //  }
    //}

    //public ServiceStorageManager(Data.Service service)
    //{
    //  this._service = service;  
    //}

    //public bool Exists(string key)
    //{
    //  return this[key] != null;
    //}

    //public virtual string GetString(string key)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null)
    //    return string.Empty;
    //  return cs.Value;
    //}

    //public virtual int? GetInt(string key)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null)
    //    return null;
    //  int result = -1;
    //  if (!Int32.TryParse(cs.Value, out result))
    //    return null;
    //  return result;
    //}

    //public virtual DateTime? GetDate(string key)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null) return null;
    //  DateTime dt;
    //  if (!DateTime.TryParse(cs.Value, out dt))
    //    return null;
    //  return dt;
    //}
    
    //public virtual bool? GetBool(string key)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null) return null;
    //  return cs.Value.Equals("1");
    //}

    //public virtual Guid? GetGuid(string key)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null) return null;
    //  Guid dt;
    //  if (!Guid.TryParse(cs.Value, out dt))
    //    return null;
    //  return dt;
    //}


    //public virtual void PutString(string key, string value)
    //{
    //  ServiceStorage cs = this[key];
    //  if (cs == null)
    //  {
    //    cs = new ServiceStorage(-1, this._service, key, value, DateTime.Now, DateTime.Now);
    //    cs.Insert();
    //  }
    //  else
    //  {
    //    cs.Value = value;
    //    cs.Update();
    //  }
    //}

    //public virtual void PutInt(string key, int value)
    //{
    //  this.PutString(key, value.ToString());
    //}

    //public virtual void PutDate(string key, DateTime date)
    //{
    //  this.PutString(key, date.ToString());
    //}

    //public virtual void PutBool(string key, bool status)
    //{
    //  this.PutString(key, (status ? "1" : "0"));
    //}

    //public virtual void PutGuid(string key, Guid guid)
    //{
    //  this.PutString(key, guid.ToString());
    //}

  }
}
