using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ApplicationContentDataTable : TableBase<ApplicationContentData>
  {
    public static string GetColumnNames()
    {
      return TableBase<ApplicationContentData>.GetColumnNames(string.Empty, ApplicationContentDataTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ApplicationContentData>.GetColumnNames(tablePrefix, ApplicationContentDataTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ApplicationContentDataID = new ColumnDescription("ApplicationContentDataID", 0, typeof(int));
			public static readonly ColumnDescription ApplicationContentID = new ColumnDescription("ApplicationContentID", 1, typeof(int));
			public static readonly ColumnDescription ApplicationContentDataStatusID = new ColumnDescription("ApplicationContentDataStatusID", 2, typeof(int));
			public static readonly ColumnDescription MimeTypeID = new ColumnDescription("MimeTypeID", 3, typeof(int));
			public static readonly ColumnDescription VersionID = new ColumnDescription("VersionID", 4, typeof(int));
			public static readonly ColumnDescription Build = new ColumnDescription("Build", 5, typeof(string));
			public static readonly ColumnDescription Size = new ColumnDescription("Size", 6, typeof(int));
			public static readonly ColumnDescription Data = new ColumnDescription("Data", 7, typeof(byte[]));
			public static readonly ColumnDescription IsDemo = new ColumnDescription("IsDemo", 8, typeof(bool));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 9, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 10, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ApplicationContentDataID,
				ApplicationContentID,
				ApplicationContentDataStatusID,
				MimeTypeID,
				VersionID,
				Build,
				Size,
				Data,
				IsDemo,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ApplicationContentDataTable(SqlQuery query) : base(query) { }
    public ApplicationContentDataTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ApplicationContentDataID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ApplicationContentDataID)); } }
		public int ApplicationContentID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ApplicationContentID)); } }
		public int ApplicationContentDataStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ApplicationContentDataStatusID)); } }
		public int MimeTypeID { get { return this.Reader.GetInt32(this.GetIndex(Columns.MimeTypeID)); } }
		public int VersionID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VersionID)); } }
		
		public string Build 
		{
			get
			{
				int index = this.GetIndex(Columns.Build);
				if (this.Reader.IsDBNull(index)) return null;
				return this.Reader.GetString(index);
			}
		}

		public int Size { get { return this.Reader.GetInt32(this.GetIndex(Columns.Size)); } }
		
		public byte[] Data {
			 get
			{
				int index = this.GetIndex(Columns.Data);
				if (this.Reader.IsDBNull(index)) return null;
				long len = Reader.GetBytes(index, 0, null, 0, 0);
				Byte[] path = new Byte[len]; 
				Reader.GetBytes(index, 0, path, 0, (int)len);
				return path;
			}
		}

		public bool IsDemo { get { return this.Reader.GetBoolean(this.GetIndex(Columns.IsDemo)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ApplicationContentData CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,new MimeType(this.MimeTypeID), new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(ApplicationContent applicationContent)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,applicationContent ?? new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,new MimeType(this.MimeTypeID), new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(MimeType mimeType)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,mimeType ?? new MimeType(this.MimeTypeID), new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(Version version)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,new MimeType(this.MimeTypeID), version ?? new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(ApplicationContent applicationContent, MimeType mimeType)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,applicationContent ?? new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,mimeType ?? new MimeType(this.MimeTypeID), new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(ApplicationContent applicationContent, Version version)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,applicationContent ?? new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,new MimeType(this.MimeTypeID), version ?? new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(MimeType mimeType, Version version)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,mimeType ?? new MimeType(this.MimeTypeID), version ?? new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		public ApplicationContentData CreateInstance(ApplicationContent applicationContent, MimeType mimeType, Version version)  
		{ 
			if (!this.HasData) return null;
			return new ApplicationContentData(this.ApplicationContentDataID,applicationContent ?? new ApplicationContent(this.ApplicationContentID), (ApplicationContentDataStatus)this.ApplicationContentDataStatusID,mimeType ?? new MimeType(this.MimeTypeID), version ?? new Version(this.VersionID), this.Build,this.Size,this.Data,this.IsDemo,this.Updated,this.Created); 
		}
		

  }
}

