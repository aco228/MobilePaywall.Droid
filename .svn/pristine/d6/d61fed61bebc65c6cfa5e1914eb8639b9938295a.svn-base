using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IUserHttpRequestManager : IDataManager<UserHttpRequest> 
  {
	

  }

  public partial class UserHttpRequest : MobilePaywallObject<IUserHttpRequestManager> 
  {
		private Guid _guid;
		private UserSession _userSession;
		private Content _content;
		private string _requestedUrl = String.Empty;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public Content Content 
		{
			get
			{
				if (this._content != null &&
						this._content.IsEmpty)
					if (this.ConnectionContext != null)
						this._content = Content.CreateManager().LazyLoad(this.ConnectionContext, this._content.ID) as Content;
					else
						this._content = Content.CreateManager().LazyLoad(this._content.ID) as Content;
				return this._content;
			}
			set { _content = value; }
		}

		public string RequestedUrl{ get {return this._requestedUrl; } set { this._requestedUrl = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public UserHttpRequest()
    { 
    }

    public UserHttpRequest(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public UserHttpRequest(int id,  Guid guid, UserSession userSession, Content content, string requestedUrl, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._userSession = userSession;
			this._content = content;
			this._requestedUrl = requestedUrl;
			
    }

    public override object Clone(bool deepClone)
    {
      return new UserHttpRequest(-1, this.Guid, this.UserSession, this.Content,this.RequestedUrl, DateTime.Now, DateTime.Now);
    }
  }
}

