using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ITransactionManager : IDataManager<Transaction> 
  {
	

  }

  public partial class Transaction : MobilePaywallObject<ITransactionManager> 
  {
		private Guid _guid;
		private Payment _payment;
		private Guid _externalTransactionGroupGuid;
		private Guid _externalTransactionGuid;
		private TransactionStatus _transactionStatus;
		private TransactionType _transactionType;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public Payment Payment 
		{
			get
			{
				if (this._payment != null &&
						this._payment.IsEmpty)
					if (this.ConnectionContext != null)
						this._payment = Payment.CreateManager().LazyLoad(this.ConnectionContext, this._payment.ID) as Payment;
					else
						this._payment = Payment.CreateManager().LazyLoad(this._payment.ID) as Payment;
				return this._payment;
			}
			set { _payment = value; }
		}

		public Guid ExternalTransactionGroupGuid { get { return this._externalTransactionGroupGuid; } set { this._externalTransactionGroupGuid = value;}}
		public Guid ExternalTransactionGuid { get { return this._externalTransactionGuid; } set { this._externalTransactionGuid = value;}}
		public TransactionStatus TransactionStatus  { get { return this._transactionStatus; } set { this._transactionStatus = value; } }
		public TransactionType TransactionType  { get { return this._transactionType; } set { this._transactionType = value; } }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Transaction()
    { 
    }

    public Transaction(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Transaction(int id,  Guid guid, Payment payment, Guid externalTransactionGroupGuid, Guid externalTransactionGuid, TransactionStatus transactionStatus, TransactionType transactionType, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._payment = payment;
			this._externalTransactionGroupGuid = externalTransactionGroupGuid;
			this._externalTransactionGuid = externalTransactionGuid;
			this._transactionStatus = transactionStatus;
			this._transactionType = transactionType;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Transaction(-1, this.Guid, this.Payment,this.ExternalTransactionGroupGuid,this.ExternalTransactionGuid, this.TransactionStatus, this.TransactionType, DateTime.Now, DateTime.Now);
    }
  }
}

