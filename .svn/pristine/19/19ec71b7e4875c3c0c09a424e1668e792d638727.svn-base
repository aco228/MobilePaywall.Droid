using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Senti.Localization;

namespace MobilePaywall.Localization
{
  public class ControlsLocalizationGroup : ILocalizationGroup 
  {
    public static readonly ControlsLocalizationGroup Empty = new ControlsLocalizationGroup();

    private MobilePaywallLocalization _localization = null;

    protected bool IsEmpty { get { return this._localization == null; } }
    protected MobilePaywallLocalization Localization { get { return this._localization; } }

    private string _play = null;
		private string _more = null;
    private string _next = null;
    private string _previous = null;
    private string _submit = null;
		

    public string Play { get { return this._play ?? ((this.Localization.HasFallback && this.Localization.Fallback.Controls != null) ? this.Localization.Fallback.Controls.Play : string.Empty); } }
		public string More { get { return this._more ?? ((this.Localization.HasFallback && this.Localization.Fallback.Controls != null) ? this.Localization.Fallback.Controls.More : string.Empty); } }
		public string Next { get { return this._next ?? ((this.Localization.HasFallback && this.Localization.Fallback.Controls != null) ? this.Localization.Fallback.Controls.Next : string.Empty); } }
    public string Previous { get { return this._previous ?? ((this.Localization.HasFallback && this.Localization.Fallback.Controls != null) ? this.Localization.Fallback.Controls.Previous : string.Empty); } }
    public string Submit { get { return this._submit ?? ((this.Localization.HasFallback && this.Localization.Fallback.Controls != null) ? this.Localization.Fallback.Controls.Submit : string.Empty); } }
		

    private ControlsLocalizationGroup()
    {
      this._play = string.Empty;
				this._more = string.Empty;
        this._next = string.Empty;
        this._previous = string.Empty;
        this._submit = string.Empty;
				
    }

    public ControlsLocalizationGroup(MobilePaywallLocalization localization)
    {
      this._localization = localization;
    }

    public string GetValue(string key)
    {
      switch (key)
      {
        case "Play":
					return this.Play;
				case "More":
					return this.More;
				case "Next":
          return this.Next;
        case "Previous":
          return this.Previous;
        case "Submit":
          return this.Submit;
				
        default:
          return null;
      }
    }

    public bool AssignValue(string key, string value)
    {
      switch (key)
      {
        case "Play":
					this._play = value;
					return true;
				case "More":
					this._more = value;
					return true;
				case "Next":
					this._next = value;
          return true;
        case "Previous":
          this._previous = value;
          return true;
        case "Submit":
          this._submit = value;
          return true;
				
        default:
          return false;
      }
    }
  }
}
