using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

using MobilePaywall.TrckdPaywall.Data; 

namespace MobilePaywall.TrckdPaywall.Data 
{
  public partial interface IActionManager : IDataManager<Action> 
  {
	

  }

  public partial class Action : MobilePaywallObject<IActionManager> 
  {
		private UserSession _userSession;
		private Payment _payment;
		private Transaction _transaction;
		private ActionType _actionType;
		private ActionStatus _actionStatus;
		

		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public Payment Payment 
		{
			get
			{
				if (this._payment != null &&
						this._payment.IsEmpty)
					if (this.ConnectionContext != null)
						this._payment = Payment.CreateManager().LazyLoad(this.ConnectionContext, this._payment.ID) as Payment;
					else
						this._payment = Payment.CreateManager().LazyLoad(this._payment.ID) as Payment;
				return this._payment;
			}
			set { _payment = value; }
		}

		public Transaction Transaction 
		{
			get
			{
				if (this._transaction != null &&
						this._transaction.IsEmpty)
					if (this.ConnectionContext != null)
						this._transaction = Transaction.CreateManager().LazyLoad(this.ConnectionContext, this._transaction.ID) as Transaction;
					else
						this._transaction = Transaction.CreateManager().LazyLoad(this._transaction.ID) as Transaction;
				return this._transaction;
			}
			set { _transaction = value; }
		}

		public ActionType ActionType  { get { return this._actionType; } set { this._actionType = value; } }
		public ActionStatus ActionStatus  { get { return this._actionStatus; } set { this._actionStatus = value; } }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Action()
    { 
    }

    public Action(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Action(int id,  UserSession userSession, Payment payment, Transaction transaction, ActionType actionType, ActionStatus actionStatus, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._userSession = userSession;
			this._payment = payment;
			this._transaction = transaction;
			this._actionType = actionType;
			this._actionStatus = actionStatus;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Action(-1,  this.UserSession, this.Payment, this.Transaction, this.ActionType, this.ActionStatus, DateTime.Now, DateTime.Now);
    }
  }
}

