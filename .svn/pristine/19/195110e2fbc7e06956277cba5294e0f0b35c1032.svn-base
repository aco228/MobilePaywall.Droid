using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(PublishSession))] 
  public partial class PublishSessionManager : MobilePaywall.Data.Sql.SqlManagerBase<PublishSession>, IPublishSessionManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override PublishSession LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							PublishSessionTable.GetColumnNames("[ps]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[ps_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[ps_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[ps_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[ps_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[ps_a_rt]") : string.Empty) + 
					" FROM [core].[PublishSession] AS [ps] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [ps_c] ON [ps].[ClientID] = [ps_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [ps_c_ct] ON [ps_c].[ClientTypeID] = [ps_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [ps_a] ON [ps].[ApplicationID] = [ps_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [ps_a_i] ON [ps_a].[InstanceID] = [ps_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[RuntimeType] AS [ps_a_rt] ON [ps_a].[RuntimeTypeID] = [ps_a_rt].[RuntimeTypeID] ";
				sqlCmdText += "WHERE [ps].[PublishSessionID] = @PublishSessionID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@PublishSessionID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "loadinternal", "notfound"), "PublishSession could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				PublishSessionTable psTable = new PublishSessionTable(query);
				ClientTable ps_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable ps_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable ps_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable ps_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable ps_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;

        
				ClientType ps_c_ctObject = (this.Depth > 1) ? ps_c_ctTable.CreateInstance() : null;
				Client ps_cObject = (this.Depth > 0) ? ps_cTable.CreateInstance(ps_c_ctObject) : null;
				Instance ps_a_iObject = (this.Depth > 1) ? ps_a_iTable.CreateInstance() : null;
				RuntimeType ps_a_rtObject = (this.Depth > 1) ? ps_a_rtTable.CreateInstance() : null;
				Application ps_aObject = (this.Depth > 0) ? ps_aTable.CreateInstance(ps_a_iObject, ps_a_rtObject) : null;
				PublishSession psObject = psTable.CreateInstance(ps_cObject, ps_aObject);
				sqlReader.Close();

				return psObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "loadinternal", "exception"), "PublishSession could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "PublishSession", "Exception while loading PublishSession object from database. See inner exception for details.", ex);
      }
    }

    public PublishSession Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							PublishSessionTable.GetColumnNames("[ps]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[ps_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[ps_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[ps_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[ps_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[ps_a_rt]") : string.Empty) +  
					" FROM [core].[PublishSession] AS [ps] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [ps_c] ON [ps].[ClientID] = [ps_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [ps_c_ct] ON [ps_c].[ClientTypeID] = [ps_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [ps_a] ON [ps].[ApplicationID] = [ps_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [ps_a_i] ON [ps_a].[InstanceID] = [ps_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[RuntimeType] AS [ps_a_rt] ON [ps_a].[RuntimeTypeID] = [ps_a_rt].[RuntimeTypeID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "customload", "notfound"), "PublishSession could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				PublishSessionTable psTable = new PublishSessionTable(query);
				ClientTable ps_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable ps_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable ps_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable ps_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable ps_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;

        
				ClientType ps_c_ctObject = (this.Depth > 1) ? ps_c_ctTable.CreateInstance() : null;
				Client ps_cObject = (this.Depth > 0) ? ps_cTable.CreateInstance(ps_c_ctObject) : null;
				Instance ps_a_iObject = (this.Depth > 1) ? ps_a_iTable.CreateInstance() : null;
				RuntimeType ps_a_rtObject = (this.Depth > 1) ? ps_a_rtTable.CreateInstance() : null;
				Application ps_aObject = (this.Depth > 0) ? ps_aTable.CreateInstance(ps_a_iObject, ps_a_rtObject) : null;
				PublishSession psObject = psTable.CreateInstance(ps_cObject, ps_aObject);
				sqlReader.Close();

				return psObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "customload", "exception"), "PublishSession could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "PublishSession", "Exception while loading (custom/single) PublishSession object from database. See inner exception for details.", ex);
      }
    }

    public List<PublishSession> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							PublishSessionTable.GetColumnNames("[ps]") + 
							(this.Depth > 0 ? "," + ClientTable.GetColumnNames("[ps_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + ClientTypeTable.GetColumnNames("[ps_c_ct]") : string.Empty) + 
							(this.Depth > 0 ? "," + ApplicationTable.GetColumnNames("[ps_a]") : string.Empty) + 
							(this.Depth > 1 ? "," + InstanceTable.GetColumnNames("[ps_a_i]") : string.Empty) + 
							(this.Depth > 1 ? "," + RuntimeTypeTable.GetColumnNames("[ps_a_rt]") : string.Empty) +  
					" FROM [core].[PublishSession] AS [ps] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Client] AS [ps_c] ON [ps].[ClientID] = [ps_c].[ClientID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[ClientType] AS [ps_c_ct] ON [ps_c].[ClientTypeID] = [ps_c_ct].[ClientTypeID] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Application] AS [ps_a] ON [ps].[ApplicationID] = [ps_a].[ApplicationID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[Instance] AS [ps_a_i] ON [ps_a].[InstanceID] = [ps_a_i].[InstanceID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[RuntimeType] AS [ps_a_rt] ON [ps_a].[RuntimeTypeID] = [ps_a_rt].[RuntimeTypeID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "customloadmany", "notfound"), "PublishSession list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<PublishSession>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				PublishSessionTable psTable = new PublishSessionTable(query);
				ClientTable ps_cTable = (this.Depth > 0) ? new ClientTable(query) : null;
				ClientTypeTable ps_c_ctTable = (this.Depth > 1) ? new ClientTypeTable(query) : null;
				ApplicationTable ps_aTable = (this.Depth > 0) ? new ApplicationTable(query) : null;
				InstanceTable ps_a_iTable = (this.Depth > 1) ? new InstanceTable(query) : null;
				RuntimeTypeTable ps_a_rtTable = (this.Depth > 1) ? new RuntimeTypeTable(query) : null;

        List<PublishSession> result = new List<PublishSession>();
        do
        {
          
					ClientType ps_c_ctObject = (this.Depth > 1) ? ps_c_ctTable.CreateInstance() : null;
					Client ps_cObject = (this.Depth > 0) ? ps_cTable.CreateInstance(ps_c_ctObject) : null;
					Instance ps_a_iObject = (this.Depth > 1) ? ps_a_iTable.CreateInstance() : null;
					RuntimeType ps_a_rtObject = (this.Depth > 1) ? ps_a_rtTable.CreateInstance() : null;
					Application ps_aObject = (this.Depth > 0) ? ps_aTable.CreateInstance(ps_a_iObject, ps_a_rtObject) : null;
					PublishSession psObject = (this.Depth > -1) ? psTable.CreateInstance(ps_cObject, ps_aObject) : null;
					result.Add(psObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "customloadmany", "exception"), "PublishSession list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "PublishSession", "Exception while loading (custom/many) PublishSession object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, PublishSession data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[PublishSession] ([ClientID],[ApplicationID],[IsSuccessfull],[ElapsedTime]) VALUES(@ClientID,@ApplicationID,@IsSuccessfull,@ElapsedTime); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@IsSuccessfull", data.IsSuccessfull).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@ElapsedTime", !string.IsNullOrEmpty(data.ElapsedTime) ? (object)data.ElapsedTime : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "insert", "noprimarykey"), "PublishSession could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "PublishSession", "Exception while inserting PublishSession object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "insert", "exception"), "PublishSession could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "PublishSession", "Exception while inserting PublishSession object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, PublishSession data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[PublishSession] SET " +
												"[ClientID] = @ClientID, " + 
												"[ApplicationID] = @ApplicationID, " + 
												"[IsSuccessfull] = @IsSuccessfull, " + 
												"[ElapsedTime] = @ElapsedTime, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [PublishSessionID] = @PublishSessionID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@ClientID", data.Client.ID);
				sqlCmd.Parameters.AddWithValue("@ApplicationID", data.Application.ID);
				sqlCmd.Parameters.AddWithValue("@IsSuccessfull", data.IsSuccessfull).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@ElapsedTime", !string.IsNullOrEmpty(data.ElapsedTime) ? (object)data.ElapsedTime : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@PublishSessionID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "update", "norecord"), "PublishSession could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "PublishSession", "Exception while updating PublishSession object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "update", "morerecords"), "PublishSession was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "PublishSession", "Exception while updating PublishSession object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "update", "exception"), "PublishSession could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "PublishSession", "Exception while updating PublishSession object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, PublishSession data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[PublishSession] WHERE PublishSessionID = @PublishSessionID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@PublishSessionID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "delete", "norecord"), "PublishSession could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "PublishSession", "Exception while deleting PublishSession object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("ps", "delete", "exception"), "PublishSession could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "PublishSession", "Exception while deleting PublishSession object from database. See inner exception for details.", ex);
      }
    }
  }
}

