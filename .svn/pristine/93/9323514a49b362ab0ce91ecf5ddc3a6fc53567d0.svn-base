using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(CustomPage))] 
  public partial class CustomPageManager : MobilePaywall.Data.Sql.SqlManagerBase<CustomPage>, ICustomPageManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override CustomPage LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							CustomPageTable.GetColumnNames("[cp]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[cp_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[cp_c_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + CurrencyTable.GetColumnNames("[cp_c_c]") : string.Empty) + 
							(this.Depth > 0 ? "," + RouteTable.GetColumnNames("[cp_r]") : string.Empty) + 
							(this.Depth > 1 ? "," + RouteSetTable.GetColumnNames("[cp_r_rs]") : string.Empty) + 
					" FROM [core].[CustomPage] AS [cp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [cp_c] ON [cp].[CountryID] = [cp_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [cp_c_l] ON [cp_c].[LanguageID] = [cp_c_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Currency] AS [cp_c_c] ON [cp_c].[CurrencyID] = [cp_c_c].[CurrencyID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Route] AS [cp_r] ON [cp].[RouteID] = [cp_r].[RouteID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RouteSet] AS [cp_r_rs] ON [cp_r].[RouteSetID] = [cp_r_rs].[RouteSetID] ";
				sqlCmdText += "WHERE [cp].[CustomPageID] = @CustomPageID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@CustomPageID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "loadinternal", "notfound"), "CustomPage could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				CustomPageTable cpTable = new CustomPageTable(query);
				CountryTable cp_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable cp_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				CurrencyTable cp_c_cTable = (this.Depth > 1) ? new CurrencyTable(query) : null;
				RouteTable cp_rTable = (this.Depth > 0) ? new RouteTable(query) : null;
				RouteSetTable cp_r_rsTable = (this.Depth > 1) ? new RouteSetTable(query) : null;

        
				Language cp_c_lObject = (this.Depth > 1) ? cp_c_lTable.CreateInstance() : null;
				Currency cp_c_cObject = (this.Depth > 1) ? cp_c_cTable.CreateInstance() : null;
				Country cp_cObject = (this.Depth > 0) ? cp_cTable.CreateInstance(cp_c_lObject, cp_c_cObject) : null;
				RouteSet cp_r_rsObject = (this.Depth > 1) ? cp_r_rsTable.CreateInstance() : null;
				Route cp_rObject = (this.Depth > 0) ? cp_rTable.CreateInstance(cp_r_rsObject) : null;
				CustomPage cpObject = cpTable.CreateInstance(cp_cObject, cp_rObject);
				sqlReader.Close();

				return cpObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "loadinternal", "exception"), "CustomPage could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "CustomPage", "Exception while loading CustomPage object from database. See inner exception for details.", ex);
      }
    }

    public CustomPage Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							CustomPageTable.GetColumnNames("[cp]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[cp_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[cp_c_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + CurrencyTable.GetColumnNames("[cp_c_c]") : string.Empty) + 
							(this.Depth > 0 ? "," + RouteTable.GetColumnNames("[cp_r]") : string.Empty) + 
							(this.Depth > 1 ? "," + RouteSetTable.GetColumnNames("[cp_r_rs]") : string.Empty) +  
					" FROM [core].[CustomPage] AS [cp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [cp_c] ON [cp].[CountryID] = [cp_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [cp_c_l] ON [cp_c].[LanguageID] = [cp_c_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Currency] AS [cp_c_c] ON [cp_c].[CurrencyID] = [cp_c_c].[CurrencyID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Route] AS [cp_r] ON [cp].[RouteID] = [cp_r].[RouteID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RouteSet] AS [cp_r_rs] ON [cp_r].[RouteSetID] = [cp_r_rs].[RouteSetID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "customload", "notfound"), "CustomPage could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				CustomPageTable cpTable = new CustomPageTable(query);
				CountryTable cp_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable cp_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				CurrencyTable cp_c_cTable = (this.Depth > 1) ? new CurrencyTable(query) : null;
				RouteTable cp_rTable = (this.Depth > 0) ? new RouteTable(query) : null;
				RouteSetTable cp_r_rsTable = (this.Depth > 1) ? new RouteSetTable(query) : null;

        
				Language cp_c_lObject = (this.Depth > 1) ? cp_c_lTable.CreateInstance() : null;
				Currency cp_c_cObject = (this.Depth > 1) ? cp_c_cTable.CreateInstance() : null;
				Country cp_cObject = (this.Depth > 0) ? cp_cTable.CreateInstance(cp_c_lObject, cp_c_cObject) : null;
				RouteSet cp_r_rsObject = (this.Depth > 1) ? cp_r_rsTable.CreateInstance() : null;
				Route cp_rObject = (this.Depth > 0) ? cp_rTable.CreateInstance(cp_r_rsObject) : null;
				CustomPage cpObject = cpTable.CreateInstance(cp_cObject, cp_rObject);
				sqlReader.Close();

				return cpObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "customload", "exception"), "CustomPage could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "CustomPage", "Exception while loading (custom/single) CustomPage object from database. See inner exception for details.", ex);
      }
    }

    public List<CustomPage> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							CustomPageTable.GetColumnNames("[cp]") + 
							(this.Depth > 0 ? "," + CountryTable.GetColumnNames("[cp_c]") : string.Empty) + 
							(this.Depth > 1 ? "," + LanguageTable.GetColumnNames("[cp_c_l]") : string.Empty) + 
							(this.Depth > 1 ? "," + CurrencyTable.GetColumnNames("[cp_c_c]") : string.Empty) + 
							(this.Depth > 0 ? "," + RouteTable.GetColumnNames("[cp_r]") : string.Empty) + 
							(this.Depth > 1 ? "," + RouteSetTable.GetColumnNames("[cp_r_rs]") : string.Empty) +  
					" FROM [core].[CustomPage] AS [cp] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[Country] AS [cp_c] ON [cp].[CountryID] = [cp_c].[CountryID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Language] AS [cp_c_l] ON [cp_c].[LanguageID] = [cp_c_l].[LanguageID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Currency] AS [cp_c_c] ON [cp_c].[CurrencyID] = [cp_c_c].[CurrencyID] ";
				if (this.Depth > 0)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[Route] AS [cp_r] ON [cp].[RouteID] = [cp_r].[RouteID] ";
				if (this.Depth > 1)
				  sqlCmdText += "LEFT OUTER  JOIN [core].[RouteSet] AS [cp_r_rs] ON [cp_r].[RouteSetID] = [cp_r_rs].[RouteSetID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "customloadmany", "notfound"), "CustomPage list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<CustomPage>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				CustomPageTable cpTable = new CustomPageTable(query);
				CountryTable cp_cTable = (this.Depth > 0) ? new CountryTable(query) : null;
				LanguageTable cp_c_lTable = (this.Depth > 1) ? new LanguageTable(query) : null;
				CurrencyTable cp_c_cTable = (this.Depth > 1) ? new CurrencyTable(query) : null;
				RouteTable cp_rTable = (this.Depth > 0) ? new RouteTable(query) : null;
				RouteSetTable cp_r_rsTable = (this.Depth > 1) ? new RouteSetTable(query) : null;

        List<CustomPage> result = new List<CustomPage>();
        do
        {
          
					Language cp_c_lObject = (this.Depth > 1) ? cp_c_lTable.CreateInstance() : null;
					Currency cp_c_cObject = (this.Depth > 1) ? cp_c_cTable.CreateInstance() : null;
					Country cp_cObject = (this.Depth > 0) ? cp_cTable.CreateInstance(cp_c_lObject, cp_c_cObject) : null;
					RouteSet cp_r_rsObject = (this.Depth > 1) ? cp_r_rsTable.CreateInstance() : null;
					Route cp_rObject = (this.Depth > 0) ? cp_rTable.CreateInstance(cp_r_rsObject) : null;
					CustomPage cpObject = (this.Depth > -1) ? cpTable.CreateInstance(cp_cObject, cp_rObject) : null;
					result.Add(cpObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "customloadmany", "exception"), "CustomPage list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "CustomPage", "Exception while loading (custom/many) CustomPage object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, CustomPage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [core].[CustomPage] ([CountryID],[RouteID],[OverridePage],[ContextValidationFilter],[AuthenticationFilter],[AgeVerificationFilter],[RestrictedAccessFilter],[Title],[Description]) VALUES(@CountryID,@RouteID,@OverridePage,@ContextValidationFilter,@AuthenticationFilter,@AgeVerificationFilter,@RestrictedAccessFilter,@Title,@Description); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@RouteID", data.Route == null ? DBNull.Value : (object)data.Route.ID);
				sqlCmd.Parameters.AddWithValue("@OverridePage", !string.IsNullOrEmpty(data.OverridePage) ? (object)data.OverridePage : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ContextValidationFilter", data.ContextValidationFilter.HasValue ? (object)data.ContextValidationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@AuthenticationFilter", data.AuthenticationFilter.HasValue ? (object)data.AuthenticationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@AgeVerificationFilter", data.AgeVerificationFilter.HasValue ? (object)data.AgeVerificationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@RestrictedAccessFilter", data.RestrictedAccessFilter.HasValue ? (object)data.RestrictedAccessFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Title", data.Title).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "insert", "noprimarykey"), "CustomPage could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "CustomPage", "Exception while inserting CustomPage object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "insert", "exception"), "CustomPage could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "CustomPage", "Exception while inserting CustomPage object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, CustomPage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [core].[CustomPage] SET " +
												"[CountryID] = @CountryID, " + 
												"[RouteID] = @RouteID, " + 
												"[OverridePage] = @OverridePage, " + 
												"[ContextValidationFilter] = @ContextValidationFilter, " + 
												"[AuthenticationFilter] = @AuthenticationFilter, " + 
												"[AgeVerificationFilter] = @AgeVerificationFilter, " + 
												"[RestrictedAccessFilter] = @RestrictedAccessFilter, " + 
												"[Title] = @Title, " + 
												"[Description] = @Description, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [CustomPageID] = @CustomPageID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@CountryID", data.Country.ID);
				sqlCmd.Parameters.AddWithValue("@RouteID", data.Route == null ? DBNull.Value : (object)data.Route.ID);
				sqlCmd.Parameters.AddWithValue("@OverridePage", !string.IsNullOrEmpty(data.OverridePage) ? (object)data.OverridePage : DBNull.Value).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@ContextValidationFilter", data.ContextValidationFilter.HasValue ? (object)data.ContextValidationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@AuthenticationFilter", data.AuthenticationFilter.HasValue ? (object)data.AuthenticationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@AgeVerificationFilter", data.AgeVerificationFilter.HasValue ? (object)data.AgeVerificationFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@RestrictedAccessFilter", data.RestrictedAccessFilter.HasValue ? (object)data.RestrictedAccessFilter.Value : DBNull.Value).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@Title", data.Title).SqlDbType = SqlDbType.NVarChar;
				sqlCmd.Parameters.AddWithValue("@Description", !string.IsNullOrEmpty(data.Description) ? (object)data.Description : DBNull.Value).SqlDbType = SqlDbType.NText;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@CustomPageID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "update", "norecord"), "CustomPage could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "CustomPage", "Exception while updating CustomPage object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "update", "morerecords"), "CustomPage was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "CustomPage", "Exception while updating CustomPage object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "update", "exception"), "CustomPage could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "CustomPage", "Exception while updating CustomPage object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, CustomPage data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [core].[CustomPage] WHERE CustomPageID = @CustomPageID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@CustomPageID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "delete", "norecord"), "CustomPage could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "CustomPage", "Exception while deleting CustomPage object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("cp", "delete", "exception"), "CustomPage could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "CustomPage", "Exception while deleting CustomPage object from database. See inner exception for details.", ex);
      }
    }
  }
}

