using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface ILookupSessionManager : IDataManager<LookupSession> 
  {
	

  }

  public partial class LookupSession : MobilePaywallObject<ILookupSessionManager> 
  {
		private Guid _guid;
		private LookupSessionStatus _lookupSessionStatus;
		private UserSession _userSession;
		private UserHttpRequest _userHttpRequest;
		private Guid? _identificationSessionGuid;
		private string _lookupUrl = String.Empty;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public LookupSessionStatus LookupSessionStatus  { get { return this._lookupSessionStatus; } set { this._lookupSessionStatus = value; } }
		public UserSession UserSession 
		{
			get
			{
				if (this._userSession != null &&
						this._userSession.IsEmpty)
					if (this.ConnectionContext != null)
						this._userSession = UserSession.CreateManager().LazyLoad(this.ConnectionContext, this._userSession.ID) as UserSession;
					else
						this._userSession = UserSession.CreateManager().LazyLoad(this._userSession.ID) as UserSession;
				return this._userSession;
			}
			set { _userSession = value; }
		}

		public UserHttpRequest UserHttpRequest 
		{
			get
			{
				if (this._userHttpRequest != null &&
						this._userHttpRequest.IsEmpty)
					if (this.ConnectionContext != null)
						this._userHttpRequest = UserHttpRequest.CreateManager().LazyLoad(this.ConnectionContext, this._userHttpRequest.ID) as UserHttpRequest;
					else
						this._userHttpRequest = UserHttpRequest.CreateManager().LazyLoad(this._userHttpRequest.ID) as UserHttpRequest;
				return this._userHttpRequest;
			}
			set { _userHttpRequest = value; }
		}

		public Guid? IdentificationSessionGuid { get { return this._identificationSessionGuid; } set { this._identificationSessionGuid = value;}}
		public string LookupUrl{ get {return this._lookupUrl; } set { this._lookupUrl = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public LookupSession()
    { 
    }

    public LookupSession(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public LookupSession(int id,  Guid guid, LookupSessionStatus lookupSessionStatus, UserSession userSession, UserHttpRequest userHttpRequest, Guid? identificationSessionGuid, string lookupUrl, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._lookupSessionStatus = lookupSessionStatus;
			this._userSession = userSession;
			this._userHttpRequest = userHttpRequest;
			this._identificationSessionGuid = identificationSessionGuid;
			this._lookupUrl = lookupUrl;
			
    }

    public override object Clone(bool deepClone)
    {
      return new LookupSession(-1, this.Guid, this.LookupSessionStatus, this.UserSession, this.UserHttpRequest,this.IdentificationSessionGuid,this.LookupUrl, DateTime.Now, DateTime.Now);
    }
  }
}

