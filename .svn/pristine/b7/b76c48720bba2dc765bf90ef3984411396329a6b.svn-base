using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IApplicationContentDataManager : IDataManager<ApplicationContentData> 
  {
	

  }

  public partial class ApplicationContentData : MobilePaywallObject<IApplicationContentDataManager> 
  {
		private ApplicationContent _applicationContent;
		private ApplicationContentDataStatus _applicationContentDataStatus;
		private MimeType _mimeType;
		private Version _version;
		private string _build = String.Empty;
		private int _size = -1;
		private byte[] _data = null;
		private bool _isDemo = false;
		

		public ApplicationContent ApplicationContent 
		{
			get
			{
				if (this._applicationContent != null &&
						this._applicationContent.IsEmpty)
					if (this.ConnectionContext != null)
						this._applicationContent = ApplicationContent.CreateManager().LazyLoad(this.ConnectionContext, this._applicationContent.ID) as ApplicationContent;
					else
						this._applicationContent = ApplicationContent.CreateManager().LazyLoad(this._applicationContent.ID) as ApplicationContent;
				return this._applicationContent;
			}
			set { _applicationContent = value; }
		}

		public ApplicationContentDataStatus ApplicationContentDataStatus  { get { return this._applicationContentDataStatus; } set { this._applicationContentDataStatus = value; } }
		public MimeType MimeType 
		{
			get
			{
				if (this._mimeType != null &&
						this._mimeType.IsEmpty)
					if (this.ConnectionContext != null)
						this._mimeType = MimeType.CreateManager().LazyLoad(this.ConnectionContext, this._mimeType.ID) as MimeType;
					else
						this._mimeType = MimeType.CreateManager().LazyLoad(this._mimeType.ID) as MimeType;
				return this._mimeType;
			}
			set { _mimeType = value; }
		}

		public Version Version 
		{
			get
			{
				if (this._version != null &&
						this._version.IsEmpty)
					if (this.ConnectionContext != null)
						this._version = Version.CreateManager().LazyLoad(this.ConnectionContext, this._version.ID) as Version;
					else
						this._version = Version.CreateManager().LazyLoad(this._version.ID) as Version;
				return this._version;
			}
			set { _version = value; }
		}

		public string Build{ get {return this._build; } set { this._build = value;} }
		public int Size{ get {return this._size; } set { this._size = value;} }
		public byte[] Data { get { return this._data; } set { this._data = value;}  }
		public bool IsDemo {get {return this._isDemo; } set { this._isDemo = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ApplicationContentData()
    { 
    }

    public ApplicationContentData(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ApplicationContentData(int id,  ApplicationContent applicationContent, ApplicationContentDataStatus applicationContentDataStatus, MimeType mimeType, Version version, string build, int size, byte[] data, bool isDemo, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._applicationContent = applicationContent;
			this._applicationContentDataStatus = applicationContentDataStatus;
			this._mimeType = mimeType;
			this._version = version;
			this._build = build;
			this._size = size;
			this._data = data;
			this._isDemo = isDemo;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ApplicationContentData(-1,  this.ApplicationContent, this.ApplicationContentDataStatus, this.MimeType, this.Version,this.Build,this.Size,this.Data,this.IsDemo, DateTime.Now, DateTime.Now);
    }
  }
}

