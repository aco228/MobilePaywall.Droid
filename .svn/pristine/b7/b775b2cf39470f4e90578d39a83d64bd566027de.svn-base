using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class VideoConversionProfileEntryTable : TableBase<VideoConversionProfileEntry>
  {
    public static string GetColumnNames()
    {
      return TableBase<VideoConversionProfileEntry>.GetColumnNames(string.Empty, VideoConversionProfileEntryTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<VideoConversionProfileEntry>.GetColumnNames(tablePrefix, VideoConversionProfileEntryTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription VideoConversionProfileEntryID = new ColumnDescription("VideoConversionProfileEntryID", 0, typeof(int));
			public static readonly ColumnDescription VideoConversionProfileID = new ColumnDescription("VideoConversionProfileID", 1, typeof(int));
			public static readonly ColumnDescription VisualMediaDimensionsID = new ColumnDescription("VisualMediaDimensionsID", 2, typeof(int));
			public static readonly ColumnDescription VideoCodecID = new ColumnDescription("VideoCodecID", 3, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				VideoConversionProfileEntryID,
				VideoConversionProfileID,
				VisualMediaDimensionsID,
				VideoCodecID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public VideoConversionProfileEntryTable(SqlQuery query) : base(query) { }
    public VideoConversionProfileEntryTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int VideoConversionProfileEntryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoConversionProfileEntryID)); } }
		public int VideoConversionProfileID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoConversionProfileID)); } }
		public int VisualMediaDimensionsID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VisualMediaDimensionsID)); } }
		public int VideoCodecID { get { return this.Reader.GetInt32(this.GetIndex(Columns.VideoCodecID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public VideoConversionProfileEntry CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,new VideoConversionProfile(this.VideoConversionProfileID), new VisualMediaDimensions(this.VisualMediaDimensionsID), new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VideoCodec videoCodec)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,new VideoConversionProfile(this.VideoConversionProfileID), new VisualMediaDimensions(this.VisualMediaDimensionsID), videoCodec ?? new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VideoConversionProfile videoConversionProfile)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,videoConversionProfile ?? new VideoConversionProfile(this.VideoConversionProfileID), new VisualMediaDimensions(this.VisualMediaDimensionsID), new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VisualMediaDimensions visualMediaDimensions)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,new VideoConversionProfile(this.VideoConversionProfileID), visualMediaDimensions ?? new VisualMediaDimensions(this.VisualMediaDimensionsID), new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VideoConversionProfile videoConversionProfile, VideoCodec videoCodec)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,videoConversionProfile ?? new VideoConversionProfile(this.VideoConversionProfileID), new VisualMediaDimensions(this.VisualMediaDimensionsID), videoCodec ?? new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VisualMediaDimensions visualMediaDimensions, VideoCodec videoCodec)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,new VideoConversionProfile(this.VideoConversionProfileID), visualMediaDimensions ?? new VisualMediaDimensions(this.VisualMediaDimensionsID), videoCodec ?? new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VideoConversionProfile videoConversionProfile, VisualMediaDimensions visualMediaDimensions)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,videoConversionProfile ?? new VideoConversionProfile(this.VideoConversionProfileID), visualMediaDimensions ?? new VisualMediaDimensions(this.VisualMediaDimensionsID), new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		public VideoConversionProfileEntry CreateInstance(VideoConversionProfile videoConversionProfile, VisualMediaDimensions visualMediaDimensions, VideoCodec videoCodec)  
		{ 
			if (!this.HasData) return null;
			return new VideoConversionProfileEntry(this.VideoConversionProfileEntryID,videoConversionProfile ?? new VideoConversionProfile(this.VideoConversionProfileID), visualMediaDimensions ?? new VisualMediaDimensions(this.VisualMediaDimensionsID), videoCodec ?? new VideoCodec(this.VideoCodecID), this.Updated,this.Created); 
		}
		

  }
}

