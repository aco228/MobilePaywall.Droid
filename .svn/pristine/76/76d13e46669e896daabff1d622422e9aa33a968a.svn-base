using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IAuctionCreditHistoryManager : IDataManager<AuctionCreditHistory> 
  {
	

  }

  public partial class AuctionCreditHistory : MobilePaywallObject<IAuctionCreditHistoryManager> 
  {
		private AuctionCredit _auctionCredit;
		private AuctionCreditPolicy _auctionCreditPolicy;
		private Customer _customer;
		private decimal _amount = 0;
		

		public AuctionCredit AuctionCredit 
		{
			get
			{
				if (this._auctionCredit != null &&
						this._auctionCredit.IsEmpty)
					if (this.ConnectionContext != null)
						this._auctionCredit = AuctionCredit.CreateManager().LazyLoad(this.ConnectionContext, this._auctionCredit.ID) as AuctionCredit;
					else
						this._auctionCredit = AuctionCredit.CreateManager().LazyLoad(this._auctionCredit.ID) as AuctionCredit;
				return this._auctionCredit;
			}
			set { _auctionCredit = value; }
		}

		public AuctionCreditPolicy AuctionCreditPolicy 
		{
			get
			{
				if (this._auctionCreditPolicy != null &&
						this._auctionCreditPolicy.IsEmpty)
					if (this.ConnectionContext != null)
						this._auctionCreditPolicy = AuctionCreditPolicy.CreateManager().LazyLoad(this.ConnectionContext, this._auctionCreditPolicy.ID) as AuctionCreditPolicy;
					else
						this._auctionCreditPolicy = AuctionCreditPolicy.CreateManager().LazyLoad(this._auctionCreditPolicy.ID) as AuctionCreditPolicy;
				return this._auctionCreditPolicy;
			}
			set { _auctionCreditPolicy = value; }
		}

		public Customer Customer 
		{
			get
			{
				if (this._customer != null &&
						this._customer.IsEmpty)
					if (this.ConnectionContext != null)
						this._customer = Customer.CreateManager().LazyLoad(this.ConnectionContext, this._customer.ID) as Customer;
					else
						this._customer = Customer.CreateManager().LazyLoad(this._customer.ID) as Customer;
				return this._customer;
			}
			set { _customer = value; }
		}

		public decimal Amount { get { return this._amount; } set { this._amount = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public AuctionCreditHistory()
    { 
    }

    public AuctionCreditHistory(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public AuctionCreditHistory(int id,  AuctionCredit auctionCredit, AuctionCreditPolicy auctionCreditPolicy, Customer customer, decimal amount, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._auctionCredit = auctionCredit;
			this._auctionCreditPolicy = auctionCreditPolicy;
			this._customer = customer;
			this._amount = amount;
			
    }

    public override object Clone(bool deepClone)
    {
      return new AuctionCreditHistory(-1,  this.AuctionCredit, this.AuctionCreditPolicy, this.Customer,this.Amount, DateTime.Now, DateTime.Now);
    }
  }
}

