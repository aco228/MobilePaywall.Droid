using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;


namespace MobilePaywall.Data.Sql
{
  public class ShortMessageStatusHistoryTable : TableBase<ShortMessageStatusHistory>
  {
    public static string GetColumnNames()
    {
      return TableBase<ShortMessageStatusHistory>.GetColumnNames(string.Empty, ShortMessageStatusHistoryTable.Columns.Item);
    }

    public static string GetColumnNames(string tablePrefix)
    {
      return TableBase<ShortMessageStatusHistory>.GetColumnNames(tablePrefix, ShortMessageStatusHistoryTable.Columns.Item);
    }

    public class Columns
    {
		
			public static readonly ColumnDescription ShortMessageStatusHistoryID = new ColumnDescription("ShortMessageStatusHistoryID", 0, typeof(int));
			public static readonly ColumnDescription ShortMessageID = new ColumnDescription("ShortMessageID", 1, typeof(int));
			public static readonly ColumnDescription OldShortMessageStatusID = new ColumnDescription("OldShortMessageStatusID", 2, typeof(int));
			public static readonly ColumnDescription NewShortMessageStatusID = new ColumnDescription("NewShortMessageStatusID", 3, typeof(int));
			public static readonly ColumnDescription Updated = new ColumnDescription("Updated", 4, typeof(DateTime));
			public static readonly ColumnDescription Created = new ColumnDescription("Created", 5, typeof(DateTime));
			

			public static readonly ColumnDescription[] Item = new ColumnDescription[] 
			{
				ShortMessageStatusHistoryID,
				ShortMessageID,
				OldShortMessageStatusID,
				NewShortMessageStatusID,
				Updated,
				Created
			};
    }

    public override int ColumnCount
    {
      get { return Columns.Item.Length; }
    }

    public ShortMessageStatusHistoryTable(SqlQuery query) : base(query) { }
    public ShortMessageStatusHistoryTable(SqlQuery query, ColumnSelectMode selectMode,
                           params ColumnDescription[] columns)
      : base(query, selectMode, columns) { }

    public ColumnDescription this[int index] { get { return Columns.Item[index]; } }

		public int ShortMessageStatusHistoryID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageStatusHistoryID)); } }
		public int ShortMessageID { get { return this.Reader.GetInt32(this.GetIndex(Columns.ShortMessageID)); } }
		public int OldShortMessageStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.OldShortMessageStatusID)); } }
		public int NewShortMessageStatusID { get { return this.Reader.GetInt32(this.GetIndex(Columns.NewShortMessageStatusID)); } }
		public DateTime Updated { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Updated)); } }
		public DateTime Created { get { return this.Reader.GetDateTime(this.GetIndex(Columns.Created)); } }
		

	  public ShortMessageStatusHistory CreateInstance()  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageStatusHistory(this.ShortMessageStatusHistoryID,new ShortMessage(this.ShortMessageID), (ShortMessageStatus)this.OldShortMessageStatusID,(ShortMessageStatus)this.NewShortMessageStatusID,this.Updated,this.Created); 
		}
		public ShortMessageStatusHistory CreateInstance(ShortMessage shortMessage)  
		{ 
			if (!this.HasData) return null;
			return new ShortMessageStatusHistory(this.ShortMessageStatusHistoryID,shortMessage ?? new ShortMessage(this.ShortMessageID), (ShortMessageStatus)this.OldShortMessageStatusID,(ShortMessageStatus)this.NewShortMessageStatusID,this.Updated,this.Created); 
		}
		

  }
}

