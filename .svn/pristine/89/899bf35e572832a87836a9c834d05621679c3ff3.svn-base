using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti;
using Senti.Diagnostics.Log;
using Senti.Data;
using Senti.Data.Sql;

using MobilePaywall.Data;
using MobilePaywall.Data.Sql;



namespace MobilePaywall.Data.Sql
{
  [DataManager(typeof(LookupMsisdnCallback))] 
  public partial class LookupMsisdnCallbackManager : MobilePaywall.Data.Sql.SqlManagerBase<LookupMsisdnCallback>, ILookupMsisdnCallbackManager
  {
    public override DatabaseType Type
    {
      get { return DatabaseType.MobilePaywall; }
    }

    protected override LookupMsisdnCallback LoadInternal(ISqlConnectionInfo connection, int id)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT " + 
							LookupMsisdnCallbackTable.GetColumnNames("[lmc]") + 
							(this.Depth > 0 ? "," + LookupSessionTable.GetColumnNames("[lmc_ls]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTable.GetColumnNames("[lmc_ls_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserHttpRequestTable.GetColumnNames("[lmc_ls_uhr]") : string.Empty) + 
					" FROM [async].[LookupMsisdnCallback] AS [lmc] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[LookupSession] AS [lmc_ls] ON [lmc].[LookupSessionID] = [lmc_ls].[LookupSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [lmc_ls_us] ON [lmc_ls].[UserSessionID] = [lmc_ls_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserHttpRequest] AS [lmc_ls_uhr] ON [lmc_ls].[UserHttpRequestID] = [lmc_ls_uhr].[UserHttpRequestID] ";
				sqlCmdText += "WHERE [lmc].[LookupMsisdnCallbackID] = @LookupMsisdnCallbackID;";

        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@LookupMsisdnCallbackID", id);
        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "loadinternal", "notfound"), "LookupMsisdnCallback could not be loaded by id as it was not found.", sqlCmdText, this, connection, id);
          if (this.Logger.IsWarnEnabled)
            this.Logger.Warn(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				LookupMsisdnCallbackTable lmcTable = new LookupMsisdnCallbackTable(query);
				LookupSessionTable lmc_lsTable = (this.Depth > 0) ? new LookupSessionTable(query) : null;
				UserSessionTable lmc_ls_usTable = (this.Depth > 1) ? new UserSessionTable(query) : null;
				UserHttpRequestTable lmc_ls_uhrTable = (this.Depth > 1) ? new UserHttpRequestTable(query) : null;

        
				UserSession lmc_ls_usObject = (this.Depth > 1) ? lmc_ls_usTable.CreateInstance() : null;
				UserHttpRequest lmc_ls_uhrObject = (this.Depth > 1) ? lmc_ls_uhrTable.CreateInstance() : null;
				LookupSession lmc_lsObject = (this.Depth > 0) ? lmc_lsTable.CreateInstance(lmc_ls_usObject, lmc_ls_uhrObject) : null;
				LookupMsisdnCallback lmcObject = lmcTable.CreateInstance(lmc_lsObject);
				sqlReader.Close();

				return lmcObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "loadinternal", "exception"), "LookupMsisdnCallback could not be loaded by id. See exception for details.", sqlCmdText, ex, this, connection, id);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "LookupMsisdnCallback", "Exception while loading LookupMsisdnCallback object from database. See inner exception for details.", ex);
      }
    }

    public LookupMsisdnCallback Load(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							LookupMsisdnCallbackTable.GetColumnNames("[lmc]") + 
							(this.Depth > 0 ? "," + LookupSessionTable.GetColumnNames("[lmc_ls]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTable.GetColumnNames("[lmc_ls_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserHttpRequestTable.GetColumnNames("[lmc_ls_uhr]") : string.Empty) +  
					" FROM [async].[LookupMsisdnCallback] AS [lmc] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[LookupSession] AS [lmc_ls] ON [lmc].[LookupSessionID] = [lmc_ls].[LookupSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [lmc_ls_us] ON [lmc_ls].[UserSessionID] = [lmc_ls_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserHttpRequest] AS [lmc_ls_uhr] ON [lmc_ls].[UserHttpRequestID] = [lmc_ls_uhr].[UserHttpRequestID] ";
				

        parameters.Top = 1;
        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "customload", "notfound"), "LookupMsisdnCallback could not be loaded using custom logic as it was not found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return null;
        }

        SqlQuery query = new SqlQuery(sqlReader);

				LookupMsisdnCallbackTable lmcTable = new LookupMsisdnCallbackTable(query);
				LookupSessionTable lmc_lsTable = (this.Depth > 0) ? new LookupSessionTable(query) : null;
				UserSessionTable lmc_ls_usTable = (this.Depth > 1) ? new UserSessionTable(query) : null;
				UserHttpRequestTable lmc_ls_uhrTable = (this.Depth > 1) ? new UserHttpRequestTable(query) : null;

        
				UserSession lmc_ls_usObject = (this.Depth > 1) ? lmc_ls_usTable.CreateInstance() : null;
				UserHttpRequest lmc_ls_uhrObject = (this.Depth > 1) ? lmc_ls_uhrTable.CreateInstance() : null;
				LookupSession lmc_lsObject = (this.Depth > 0) ? lmc_lsTable.CreateInstance(lmc_ls_usObject, lmc_ls_uhrObject) : null;
				LookupMsisdnCallback lmcObject = lmcTable.CreateInstance(lmc_lsObject);
				sqlReader.Close();

				return lmcObject;

      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "customload", "exception"), "LookupMsisdnCallback could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "LookupMsisdnCallback", "Exception while loading (custom/single) LookupMsisdnCallback object from database. See inner exception for details.", ex);
      }
    }

    public List<LookupMsisdnCallback> LoadMany(ISqlConnectionInfo connection, SqlQueryParameters parameters)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (parameters == null)
        throw new ArgumentNullException("parameters");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "SELECT {0} " + 
							LookupMsisdnCallbackTable.GetColumnNames("[lmc]") + 
							(this.Depth > 0 ? "," + LookupSessionTable.GetColumnNames("[lmc_ls]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserSessionTable.GetColumnNames("[lmc_ls_us]") : string.Empty) + 
							(this.Depth > 1 ? "," + UserHttpRequestTable.GetColumnNames("[lmc_ls_uhr]") : string.Empty) +  
					" FROM [async].[LookupMsisdnCallback] AS [lmc] ";
				if (this.Depth > 0)
				  sqlCmdText += "INNER  JOIN [core].[LookupSession] AS [lmc_ls] ON [lmc].[LookupSessionID] = [lmc_ls].[LookupSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserSession] AS [lmc_ls_us] ON [lmc_ls].[UserSessionID] = [lmc_ls_us].[UserSessionID] ";
				if (this.Depth > 1)
				  sqlCmdText += "INNER  JOIN [core].[UserHttpRequest] AS [lmc_ls_uhr] ON [lmc_ls].[UserHttpRequestID] = [lmc_ls_uhr].[UserHttpRequestID] ";
				

        sqlCmdText = parameters.BuildQuery(sqlCmdText);       
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        foreach (KeyValuePair<string, object> argument in parameters.Arguments)
          sqlCmd.Parameters.AddWithValue("@" + argument.Key, argument.Value);

        SqlDataReader sqlReader = database.Add(sqlCmd) as SqlDataReader;

        if (!sqlReader.HasRows || !sqlReader.Read())
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "customloadmany", "notfound"), "LookupMsisdnCallback list could not be loaded using custom logic as no items were found.", sqlCmdText, this, connection, parameters);
          if (this.Logger.IsDebugEnabled)
            this.Logger.Debug(builder.ToString());
          sqlReader.Close();
          return new List<LookupMsisdnCallback>();
        }

        SqlQuery query = new SqlQuery(sqlReader);

				LookupMsisdnCallbackTable lmcTable = new LookupMsisdnCallbackTable(query);
				LookupSessionTable lmc_lsTable = (this.Depth > 0) ? new LookupSessionTable(query) : null;
				UserSessionTable lmc_ls_usTable = (this.Depth > 1) ? new UserSessionTable(query) : null;
				UserHttpRequestTable lmc_ls_uhrTable = (this.Depth > 1) ? new UserHttpRequestTable(query) : null;

        List<LookupMsisdnCallback> result = new List<LookupMsisdnCallback>();
        do
        {
          
					UserSession lmc_ls_usObject = (this.Depth > 1) ? lmc_ls_usTable.CreateInstance() : null;
					UserHttpRequest lmc_ls_uhrObject = (this.Depth > 1) ? lmc_ls_uhrTable.CreateInstance() : null;
					LookupSession lmc_lsObject = (this.Depth > 0) ? lmc_lsTable.CreateInstance(lmc_ls_usObject, lmc_ls_uhrObject) : null;
					LookupMsisdnCallback lmcObject = (this.Depth > -1) ? lmcTable.CreateInstance(lmc_lsObject) : null;
					result.Add(lmcObject);

        } while (sqlReader.Read());
        sqlReader.Close();

        return result;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "customloadmany", "exception"), "LookupMsisdnCallback list could not be loaded using custom logic. See exception for details.", sqlCmdText, ex, this, connection, parameters);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Load, "LookupMsisdnCallback", "Exception while loading (custom/many) LookupMsisdnCallback object from database. See inner exception for details.", ex);
      }
    }
    
    public override int? Insert(ISqlConnectionInfo connection, LookupMsisdnCallback data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText = "INSERT INTO [async].[LookupMsisdnCallback] ([LookupMsisdnCallbackGuid],[LookupSessionID],[IsCompleted],[ValidTo]) VALUES(@LookupMsisdnCallbackGuid,@LookupSessionID,@IsCompleted,@ValidTo); SELECT SCOPE_IDENTITY();";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@LookupMsisdnCallbackGuid", data.Guid);
				sqlCmd.Parameters.AddWithValue("@LookupSessionID", data.LookupSession.ID);
				sqlCmd.Parameters.AddWithValue("@IsCompleted", data.IsCompleted).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@ValidTo", data.ValidTo).SqlDbType = SqlDbType.DateTime2;
				
        object idObj = sqlCmd.ExecuteScalar();
        if (idObj == null || DBNull.Value.Equals(idObj))
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "insert", "noprimarykey"), "LookupMsisdnCallback could not be inserted or inserted primary key was not returned. Are you missing SELECT SCOPE_IDENTITY();?", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Insert, "LookupMsisdnCallback", "Exception while inserting LookupMsisdnCallback object in database.");
        }
        return (int)((decimal)idObj);
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "insert", "exception"), "LookupMsisdnCallback could not be inserted. See exception for details.", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Insert, "LookupMsisdnCallback", "Exception while inserting LookupMsisdnCallback object in database. See inner exception for details.", ex);
      }
    }

    public override bool Update(ISqlConnectionInfo connection, LookupMsisdnCallback data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        data.Updated = DateTime.Now;
        sqlCmdText = "UPDATE [async].[LookupMsisdnCallback] SET " +
												"[LookupMsisdnCallbackGuid] = @LookupMsisdnCallbackGuid, " + 
												"[LookupSessionID] = @LookupSessionID, " + 
												"[IsCompleted] = @IsCompleted, " + 
												"[ValidTo] = @ValidTo, " + 
												"[Updated] = GETDATE() " + 
											"WHERE [LookupMsisdnCallbackID] = @LookupMsisdnCallbackID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
		
				sqlCmd.Parameters.AddWithValue("@LookupMsisdnCallbackGuid", data.Guid);
				sqlCmd.Parameters.AddWithValue("@LookupSessionID", data.LookupSession.ID);
				sqlCmd.Parameters.AddWithValue("@IsCompleted", data.IsCompleted).SqlDbType = SqlDbType.Bit;
				sqlCmd.Parameters.AddWithValue("@ValidTo", data.ValidTo).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@Updated", data.Updated).SqlDbType = SqlDbType.DateTime2;
				sqlCmd.Parameters.AddWithValue("@LookupMsisdnCallbackID", data.ID);

        int rowCount = sqlCmd.ExecuteNonQuery();
        if (rowCount < 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "update", "norecord"), "LookupMsisdnCallback could not be updated as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "LookupMsisdnCallback", "Exception while updating LookupMsisdnCallback object in database. No record found for this id.");
        }
        else if (rowCount > 1)
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "update", "morerecords"), "LookupMsisdnCallback was updated but there was more than one record affected.", sqlCmdText, this, connection, data);
          if (this.Logger.IsFatalEnabled)
            this.Logger.Fatal(builder.ToString());
          throw new DataOperationException(DataOperation.Update, "LookupMsisdnCallback", "Exception while updating LookupMsisdnCallback object in database. More than one record found for this statement (update statement where clause broken?!).");
        }
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "update", "exception"), "LookupMsisdnCallback could not be updated. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Update, "LookupMsisdnCallback", "Exception while updating LookupMsisdnCallback object in database. See inner exception for details.", ex);
      }
    }

    public override bool Delete(ISqlConnectionInfo connection, LookupMsisdnCallback data)
    {
      IDatabase database = connection.Database;
      if (database == null)
        throw new ArgumentNullException("database", "Error initializing database connection.");
      if (data == null)
        throw new ArgumentNullException("data");
      string sqlCmdText = string.Empty;
      try
      {
        sqlCmdText =  "DELETE FROM [async].[LookupMsisdnCallback] WHERE LookupMsisdnCallbackID = @LookupMsisdnCallbackID;";
        SqlCommand sqlCmd = database.Add(sqlCmdText) as SqlCommand;
        sqlCmd.Parameters.AddWithValue("@LookupMsisdnCallbackID", data.ID);

        int success = sqlCmd.ExecuteNonQuery();

        if (success == -1)        
        {
          IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "delete", "norecord"), "LookupMsisdnCallback could not be deleted as no matching record was found.", sqlCmdText, this, connection, data);
          if (this.Logger.IsErrorEnabled)
            this.Logger.Error(builder.ToString());
          throw new DataOperationException(DataOperation.Delete, "LookupMsisdnCallback", "Exception while deleting LookupMsisdnCallback object from database. No such record found.");
        }
        
        return true;
      }
      catch (Exception ex)
      {
        database.HandleException(ex);
        IMessageBuilder builder = new DbLogMessageBuilder(new LogErrorCode("lmc", "delete", "exception"), "LookupMsisdnCallback could not be deleted. See exception for details", sqlCmdText, ex, this, connection, data);
        if (this.Logger.IsErrorEnabled)
          this.Logger.Error(builder.ToString(), ex);
        throw new DataOperationException(DataOperation.Delete, "LookupMsisdnCallback", "Exception while deleting LookupMsisdnCallback object from database. See inner exception for details.", ex);
      }
    }
  }
}

