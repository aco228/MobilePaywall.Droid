using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using Temporary.Data;

namespace Temporary.Data 
{
  public partial interface ITemporaryManager : IDataManager<Temporary> 
  {
	

  }

  public partial class Temporary : TemporaryObject<ITemporaryManager> 
  {
		private TemporaryType _temporaryType;
		private string _path = String.Empty;
		private byte[] _data = null;
		private bool _isDone = false;
		

		public TemporaryType TemporaryType  { get { return this._temporaryType; } set { this._temporaryType = value; } }
		public string Path{ get {return this._path; } set { this._path = value;} }
		public byte[] Data { get { return this._data; } set { this._data = value;}  }
		public bool IsDone {get {return this._isDone; } set { this._isDone = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Temporary()
    { 
    }

    public Temporary(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Temporary(int id,  TemporaryType temporaryType, string path, byte[] data, bool isDone, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._temporaryType = temporaryType;
			this._path = path;
			this._data = data;
			this._isDone = isDone;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Temporary(-1,  this.TemporaryType,this.Path,this.Data,this.IsDone, DateTime.Now, DateTime.Now);
    }
  }
}

