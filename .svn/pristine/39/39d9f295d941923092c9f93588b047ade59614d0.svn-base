using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IClientSessionManager : IDataManager<ClientSession> 
  {
	

  }

  public partial class ClientSession : MobilePaywallObject<IClientSessionManager> 
  {
		private Guid _guid;
		private Application _application;
		private Client _client;
		private Language _language;
		private string _domain = String.Empty;
		private string _iPAdress = String.Empty;
		private IPAddressType _iPAdressType;
		private string _userAgent = String.Empty;
		private bool _isActive = false;
		private DateTime _validUntil = DateTime.MinValue;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public Application Application 
		{
			get
			{
				if (this._application != null &&
						this._application.IsEmpty)
					if (this.ConnectionContext != null)
						this._application = Application.CreateManager().LazyLoad(this.ConnectionContext, this._application.ID) as Application;
					else
						this._application = Application.CreateManager().LazyLoad(this._application.ID) as Application;
				return this._application;
			}
			set { _application = value; }
		}

		public Client Client 
		{
			get
			{
				if (this._client != null &&
						this._client.IsEmpty)
					if (this.ConnectionContext != null)
						this._client = Client.CreateManager().LazyLoad(this.ConnectionContext, this._client.ID) as Client;
					else
						this._client = Client.CreateManager().LazyLoad(this._client.ID) as Client;
				return this._client;
			}
			set { _client = value; }
		}

		public Language Language 
		{
			get
			{
				if (this._language != null &&
						this._language.IsEmpty)
					if (this.ConnectionContext != null)
						this._language = Language.CreateManager().LazyLoad(this.ConnectionContext, this._language.ID) as Language;
					else
						this._language = Language.CreateManager().LazyLoad(this._language.ID) as Language;
				return this._language;
			}
			set { _language = value; }
		}

		public string Domain{ get {return this._domain; } set { this._domain = value;} }
		public string IPAdress{ get {return this._iPAdress; } set { this._iPAdress = value;} }
		public IPAddressType IPAdressType  { get { return this._iPAdressType; } set { this._iPAdressType = value; } }
		public string UserAgent{ get {return this._userAgent; } set { this._userAgent = value;} }
		public bool IsActive {get {return this._isActive; } set { this._isActive = value;} }
		public DateTime ValidUntil { get { return this._validUntil; } set { this._validUntil = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public ClientSession()
    { 
    }

    public ClientSession(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public ClientSession(int id,  Guid guid, Application application, Client client, Language language, string domain, string iPAdress, IPAddressType iPAdressType, string userAgent, bool isActive, DateTime validUntil, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._application = application;
			this._client = client;
			this._language = language;
			this._domain = domain;
			this._iPAdress = iPAdress;
			this._iPAdressType = iPAdressType;
			this._userAgent = userAgent;
			this._isActive = isActive;
			this._validUntil = validUntil;
			
    }

    public override object Clone(bool deepClone)
    {
      return new ClientSession(-1, this.Guid, this.Application, this.Client, this.Language,this.Domain,this.IPAdress, this.IPAdressType,this.UserAgent,this.IsActive,this.ValidUntil, DateTime.Now, DateTime.Now);
    }
  }
}

