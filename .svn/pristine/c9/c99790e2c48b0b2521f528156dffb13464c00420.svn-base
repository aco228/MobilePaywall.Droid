using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IPaymentManager : IDataManager<Payment> 
  {
	

  }

  public partial class Payment : MobilePaywallObject<IPaymentManager> 
  {
		private Guid _guid;
		private PaymentType _paymentType;
		private Guid? _externalPaymentGuid;
		private PaymentStatus _paymentStatus;
		private PaymentRequest _paymentRequest;
		private Customer _customer;
		private ServiceOffer _serviceOffer;
		private BusinessModelEntry _businessModelEntry;
		

		public Guid Guid { get { return this._guid; } set { _guid = value; } }
		public PaymentType PaymentType  { get { return this._paymentType; } set { this._paymentType = value; } }
		public Guid? ExternalPaymentGuid { get { return this._externalPaymentGuid; } set { this._externalPaymentGuid = value;}}
		public PaymentStatus PaymentStatus  { get { return this._paymentStatus; } set { this._paymentStatus = value; } }
		public PaymentRequest PaymentRequest 
		{
			get
			{
				if (this._paymentRequest != null &&
						this._paymentRequest.IsEmpty)
					if (this.ConnectionContext != null)
						this._paymentRequest = PaymentRequest.CreateManager().LazyLoad(this.ConnectionContext, this._paymentRequest.ID) as PaymentRequest;
					else
						this._paymentRequest = PaymentRequest.CreateManager().LazyLoad(this._paymentRequest.ID) as PaymentRequest;
				return this._paymentRequest;
			}
			set { _paymentRequest = value; }
		}

		public Customer Customer 
		{
			get
			{
				if (this._customer != null &&
						this._customer.IsEmpty)
					if (this.ConnectionContext != null)
						this._customer = Customer.CreateManager().LazyLoad(this.ConnectionContext, this._customer.ID) as Customer;
					else
						this._customer = Customer.CreateManager().LazyLoad(this._customer.ID) as Customer;
				return this._customer;
			}
			set { _customer = value; }
		}

		public ServiceOffer ServiceOffer 
		{
			get
			{
				if (this._serviceOffer != null &&
						this._serviceOffer.IsEmpty)
					if (this.ConnectionContext != null)
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this.ConnectionContext, this._serviceOffer.ID) as ServiceOffer;
					else
						this._serviceOffer = ServiceOffer.CreateManager().LazyLoad(this._serviceOffer.ID) as ServiceOffer;
				return this._serviceOffer;
			}
			set { _serviceOffer = value; }
		}

		public BusinessModelEntry BusinessModelEntry 
		{
			get
			{
				if (this._businessModelEntry != null &&
						this._businessModelEntry.IsEmpty)
					if (this.ConnectionContext != null)
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this.ConnectionContext, this._businessModelEntry.ID) as BusinessModelEntry;
					else
						this._businessModelEntry = BusinessModelEntry.CreateManager().LazyLoad(this._businessModelEntry.ID) as BusinessModelEntry;
				return this._businessModelEntry;
			}
			set { _businessModelEntry = value; }
		}

		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Payment()
    { 
    }

    public Payment(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Payment(int id,  Guid guid, PaymentType paymentType, Guid? externalPaymentGuid, PaymentStatus paymentStatus, PaymentRequest paymentRequest, Customer customer, ServiceOffer serviceOffer, BusinessModelEntry businessModelEntry, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._guid = guid;
			this._paymentType = paymentType;
			this._externalPaymentGuid = externalPaymentGuid;
			this._paymentStatus = paymentStatus;
			this._paymentRequest = paymentRequest;
			this._customer = customer;
			this._serviceOffer = serviceOffer;
			this._businessModelEntry = businessModelEntry;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Payment(-1, this.Guid, this.PaymentType,this.ExternalPaymentGuid, this.PaymentStatus, this.PaymentRequest, this.Customer, this.ServiceOffer, this.BusinessModelEntry, DateTime.Now, DateTime.Now);
    }
  }
}

