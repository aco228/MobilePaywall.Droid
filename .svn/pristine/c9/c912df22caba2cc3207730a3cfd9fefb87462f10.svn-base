using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Senti.Data;
using MobilePaywall.Data;

 

namespace MobilePaywall.Data 
{
  public partial interface IContentManager : IDataManager<Content> 
  {
	

  }

  public partial class Content : MobilePaywallObject<IContentManager> 
  {
		private ContentGroup _contentGroup;
		private ContentType _contentType;
		private ContentStorage _contentStorage;
		private AgeRating _ageRating;
		private bool _isEnabled = false;
		

		public ContentGroup ContentGroup 
		{
			get
			{
				if (this._contentGroup != null &&
						this._contentGroup.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this.ConnectionContext, this._contentGroup.ID) as ContentGroup;
					else
						this._contentGroup = ContentGroup.CreateManager().LazyLoad(this._contentGroup.ID) as ContentGroup;
				return this._contentGroup;
			}
			set { _contentGroup = value; }
		}

		public ContentType ContentType 
		{
			get
			{
				if (this._contentType != null &&
						this._contentType.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentType = ContentType.CreateManager().LazyLoad(this.ConnectionContext, this._contentType.ID) as ContentType;
					else
						this._contentType = ContentType.CreateManager().LazyLoad(this._contentType.ID) as ContentType;
				return this._contentType;
			}
			set { _contentType = value; }
		}

		public ContentStorage ContentStorage 
		{
			get
			{
				if (this._contentStorage != null &&
						this._contentStorage.IsEmpty)
					if (this.ConnectionContext != null)
						this._contentStorage = ContentStorage.CreateManager().LazyLoad(this.ConnectionContext, this._contentStorage.ID) as ContentStorage;
					else
						this._contentStorage = ContentStorage.CreateManager().LazyLoad(this._contentStorage.ID) as ContentStorage;
				return this._contentStorage;
			}
			set { _contentStorage = value; }
		}

		public AgeRating AgeRating 
		{
			get
			{
				if (this._ageRating != null &&
						this._ageRating.IsEmpty)
					if (this.ConnectionContext != null)
						this._ageRating = AgeRating.CreateManager().LazyLoad(this.ConnectionContext, this._ageRating.ID) as AgeRating;
					else
						this._ageRating = AgeRating.CreateManager().LazyLoad(this._ageRating.ID) as AgeRating;
				return this._ageRating;
			}
			set { _ageRating = value; }
		}

		public bool IsEnabled {get {return this._isEnabled; } set { this._isEnabled = value;} }
		

    public override bool IsInsertable { get { return true;} }

    public override bool IsDeletable { get { return false;} }

    public override bool IsUpdatable { get { return true;} }

    public Content()
    { 
    }

    public Content(int id): base(id, DateTime.Now, DateTime.Now, true)
    {
    }

    public Content(int id,  ContentGroup contentGroup, ContentType contentType, ContentStorage contentStorage, AgeRating ageRating, bool isEnabled, DateTime updated, DateTime created): base(id, updated, created, false)
    {
			this._contentGroup = contentGroup;
			this._contentType = contentType;
			this._contentStorage = contentStorage;
			this._ageRating = ageRating;
			this._isEnabled = isEnabled;
			
    }

    public override object Clone(bool deepClone)
    {
      return new Content(-1,  this.ContentGroup, this.ContentType, this.ContentStorage, this.AgeRating,this.IsEnabled, DateTime.Now, DateTime.Now);
    }
  }
}

